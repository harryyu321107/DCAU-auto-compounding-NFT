{
  "address": "0xC832D169225fBAE75f490569f88d86ac764b9186",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_DCAU",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_feeAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DRAGON_EQUIPMENT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_EXP_TO_LEVEL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DCAU_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DRAGON_EQUIPMENT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HEALTH_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "START_EXP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "START_LEVEL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "START_STAT_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAT_POINTS_PER_LEVEL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toAdd",
          "type": "address"
        }
      ],
      "name": "addAuthorized",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_body",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_hand1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_hand2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_both",
          "type": "uint256"
        }
      ],
      "name": "addEquipment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "experienceAmount",
          "type": "uint256"
        }
      ],
      "name": "addExperience",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addSingleResource",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "characterPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        }
      ],
      "name": "heal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "attack",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defense",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endurance",
          "type": "uint256"
        }
      ],
      "name": "mintCharacter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toRemove",
          "type": "address"
        }
      ],
      "name": "removeAuthorized",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        }
      ],
      "name": "resurrect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setCharacterPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x559864dfae0ee3a8f974f5b810be64c9bbf1775342ae25b62eb657decf49d50f",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0xC832D169225fBAE75f490569f88d86ac764b9186",
    "transactionIndex": 0,
    "gasUsed": "2578429",
    "logsBloom": "0x
    "blockHash": "0x795bd0e75e3363662d6045296fc26ea073bf9b980e06f0e44c2059dbe7ba9444",
    "transactionHash": "0x559864dfae0ee3a8f974f5b810be64c9bbf1775342ae25b62eb657decf49d50f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2534499,
        "transactionHash": "0x559864dfae0ee3a8f974f5b810be64c9bbf1775342ae25b62eb657decf49d50f",
        "address": "0xC832D169225fBAE75f490569f88d86ac764b9186",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x795bd0e75e3363662d6045296fc26ea073bf9b980e06f0e44c2059dbe7ba9444"
      }
    ],
    "blockNumber": 2534499,
    "cumulativeGasUsed": "2578429",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF72Cc18218058722a3874b63487F1B4C82F92081",
    "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "0x900f2c938966468d0a4D481057fc58120d4e2Bfe"
  ],
  "solcInputHash": "42d28277cfe61df6081a7e9fd31a8cf2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DCAU\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DRAGON_EQUIPMENT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_EXP_TO_LEVEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DCAU_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DRAGON_EQUIPMENT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEALTH_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_EXP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_LEVEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_STAT_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAT_POINTS_PER_LEVEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAdd\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_body\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hand1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hand2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_both\",\"type\":\"uint256\"}],\"name\":\"addEquipment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"experienceAmount\",\"type\":\"uint256\"}],\"name\":\"addExperience\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addSingleResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"characterPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"}],\"name\":\"heal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"attack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defense\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endurance\",\"type\":\"uint256\"}],\"name\":\"mintCharacter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toRemove\",\"type\":\"address\"}],\"name\":\"removeAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"}],\"name\":\"resurrect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setCharacterPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dragon/DragonPlayerCharacter.sol\":\"DragonPlayerCharacter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x188d038a65a945481cc13fe30db334472dfbed61f7959d4478d05feb6303b1ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/dragon/DragonPlayerCharacter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../libraries/Authorizable.sol\\\";\\nimport \\\"./interfaces/IDragonEquipment.sol\\\";\\nimport \\\"./interfaces/IDragonEquipmentType.sol\\\";\\n\\ncontract DragonPlayerCharacter is ERC721URIStorage, Authorizable, ReentrancyGuard {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n    address payable private _feeAddress;\\n    uint256 private _characterPrice = 5; // 5 DCAU token\\n\\n    address public immutable DCAU_TOKEN;\\n    uint256 public constant START_STAT_POINTS = 12;\\n    uint256 public constant HEALTH_MULTIPLIER = 100;\\n    uint256 public constant START_LEVEL = 1;\\n    uint256 public constant START_EXP = 0;\\n    uint256 public constant BASE_EXP_TO_LEVEL = 2500;\\n    uint256 public constant STAT_POINTS_PER_LEVEL = 4;\\n\\n    address public immutable DRAGON_EQUIPMENT;\\n\\n    /** Dragon stats */\\n    struct Dragon {\\n        uint256 attack;\\n        uint256 defense;\\n        uint256 speed;\\n        uint256 endurance;\\n        uint256 luck;\\n        uint256 experience;\\n        uint256 level;\\n        uint256 currentHealth;\\n        uint256 totalHealth;\\n        uint256 created;\\n        uint256 statPointsToSpend;\\n        uint256 equipmentBody; // Equipment token ID, should be body type\\n        uint256 equipmentHand1; // Equipment token ID, should be hand1 type\\n        uint256 equipmentHand2; // Equipment token ID, should be hand2 type\\n        uint256 equipmentBoth; // Equipment token ID, should be both hand type\\n        bool isAlive;\\n    }\\n    mapping(uint256 => Dragon) private dragonPlayers; // characterId => Dragon\\n    mapping(uint256 => mapping(uint8 => uint256)) private dragonResources; // characterId => Dragon\\n\\n    constructor(\\n        address _DCAU,\\n        address payable _feeAddress_,\\n        address _DRAGON_EQUIPMENT\\n    ) ERC721(\\\"Dragon Player Character\\\", \\\"DPC\\\") {\\n        require(_DCAU != address(0) && _feeAddress_ != address(0) && _DRAGON_EQUIPMENT != address(0), \\\"Dragon: ZERO_ADDRESS\\\");\\n        DCAU_TOKEN = _DCAU;\\n        _feeAddress = _feeAddress_;\\n        DRAGON_EQUIPMENT = _DRAGON_EQUIPMENT;\\n    }\\n\\n    function characterPrice() public view returns (uint256) {\\n        return _characterPrice;\\n    }\\n\\n    function mintCharacter(\\n        string memory tokenURI,\\n        uint256 attack,\\n        uint256 defense,\\n        uint256 speed,\\n        uint256 endurance\\n    ) external nonReentrant returns (uint256) {\\n        require(attack + defense + speed + endurance == START_STAT_POINTS, \\\"Dragon: Invalid stats\\\");\\n        // TODO what is this?\\n        // IERC20(DCAU_TOKEN).transferFrom(msg.sender, _feeAddress, 5 * (10**IERC20Metadata(DCAU_TOKEN).decimals()));\\n\\n        uint256 startHealth = endurance * HEALTH_MULTIPLIER;\\n\\n        uint256 newItemId = _tokenIds.current();\\n        dragonPlayers[newItemId] = Dragon({\\n            attack: attack,\\n            defense: defense,\\n            speed: speed,\\n            endurance: endurance,\\n            luck: 0,\\n            experience: START_EXP,\\n            level: START_LEVEL,\\n            totalHealth: startHealth,\\n            currentHealth: startHealth,\\n            created: block.timestamp,\\n            statPointsToSpend: 0,\\n            equipmentBody: 0,\\n            equipmentHand1: 0, // Equipment token ID, should be hand1 type\\n            equipmentHand2: 0, // Equipment token ID, should be hand2 type\\n            equipmentBoth: 0,\\n            isAlive: true\\n        });\\n        // TODO\\n\\n        // _mint(address(this), newItemId);\\n        _mint(msg.sender, newItemId);\\n        _setTokenURI(newItemId, tokenURI);\\n        _tokenIds.increment();\\n\\n        return newItemId;\\n    }\\n\\n    function heal(uint256 characterId) public onlyAuthorized {\\n        dragonPlayers[characterId].currentHealth = dragonPlayers[characterId].totalHealth;\\n    }\\n\\n    function resurrect(uint256 characterId) public onlyAuthorized {\\n        heal(characterId);\\n        dragonPlayers[characterId].isAlive = true;\\n    }\\n\\n    function addExperience(uint256 characterId, uint256 experienceAmount) public onlyAuthorized {\\n        Dragon memory character = dragonPlayers[characterId];\\n\\n        uint256 experienceToNextLevel = character.level * BASE_EXP_TO_LEVEL;\\n        uint256 newExperience = character.experience + experienceAmount;\\n\\n        if (newExperience >= experienceToNextLevel) {\\n            uint256 experienceLeftOver = experienceToNextLevel - newExperience;\\n            dragonPlayers[characterId].experience = experienceLeftOver;\\n            dragonPlayers[characterId].level++;\\n            dragonPlayers[characterId].statPointsToSpend += STAT_POINTS_PER_LEVEL;\\n        } else {\\n            dragonPlayers[characterId].experience = newExperience;\\n        }\\n    }\\n\\n    // TODO set equipments\\n    function addEquipment(\\n        uint256 _playerId,\\n        uint256 _body,\\n        uint256 _hand1,\\n        uint256 _hand2,\\n        uint256 _both\\n    ) external nonReentrant {\\n        require(ownerOf(_playerId) == msg.sender, \\\"Dragon: Forbidden\\\");\\n        require(_validateEquipment(_body, _hand1, _hand2, _both), \\\"Dragon: Invalid item combination\\\");\\n\\n        // TODO Transfer DragonEquipment - ERC1155 to PlayerCharacter or Burn?\\n        // For now let's assume burn\\n        uint256[] memory _burnIds = new uint256[](4);\\n        _burnIds[0] = _body;\\n        _burnIds[1] = _hand1;\\n        _burnIds[2] = _hand2;\\n        _burnIds[3] = _both;\\n\\n        uint256[] memory _amounts = new uint256[](4);\\n        _amounts[0] = _amounts[1] = _amounts[2] = _amounts[3] = 1;\\n        IDragonEquipment(DRAGON_EQUIPMENT).burnBatch(msg.sender, _burnIds, _amounts);\\n\\n        Dragon storage _dragon = dragonPlayers[_playerId];\\n        _dragon.equipmentBody = _body;\\n        _dragon.equipmentHand1 = _hand1;\\n        _dragon.equipmentHand2 = _hand2;\\n        _dragon.equipmentBoth = _both;\\n    }\\n\\n    function _validateEquipment(\\n        uint256 _body,\\n        uint256 _hand1,\\n        uint256 _hand2,\\n        uint256 _both\\n    ) private view returns (bool) {\\n        IDragonEquipment _dgEquip = IDragonEquipment(DRAGON_EQUIPMENT);\\n        IDragonEquipmentType _dgEquipType = IDragonEquipmentType(DRAGON_EQUIPMENT);\\n\\n        // Each equipment should be equiped in proper place\\n        if (\\n            _dgEquip.typeOfItem(_body) != _dgEquipType.EQUIPMENT_BODY() ||\\n            _dgEquip.typeOfItem(_hand1) != _dgEquipType.EQUIPMENT_ONE_HANDED() ||\\n            _dgEquip.typeOfItem(_hand2) != _dgEquipType.EQUIPMENT_SHIELD() ||\\n            _dgEquip.typeOfItem(_both) != _dgEquipType.EQUIPMENT_BOTH_HANDED()\\n        ) {\\n            return false;\\n        }\\n\\n        // Both handed item can not be equiped with any one handed weapon\\n        if ((_hand1 != 0 || _hand2 != 0) && _both != 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    // TODO Resource staff in next stage\\n    function addSingleResource() public {}\\n\\n    function setCharacterPrice(uint256 _price) external onlyOwner {\\n        _characterPrice = _price;\\n    }\\n}\\n\",\"keccak256\":\"0xc13298b35427128609ff42adbb4b707b2894ed1079ab700a1286e9c513f4a842\",\"license\":\"MIT\"},\"contracts/dragon/interfaces/IDragonEquipment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of DragonEquipmentType.\\n */\\ninterface IDragonEquipment {\\n    function typeOfItem(uint256 _tokenId) external view returns (uint8);\\n\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5979e571f53a9c5ddba9e3cd544cb38017baabf6782da15a517f5e2901c23438\",\"license\":\"MIT\"},\"contracts/dragon/interfaces/IDragonEquipmentType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of DragonEquipmentType.\\n */\\ninterface IDragonEquipmentType {\\n    function EQUIPMENT_BODY() external view returns (uint256);\\n\\n    function EQUIPMENT_ONE_HANDED() external view returns (uint256);\\n\\n    function EQUIPMENT_SHIELD() external view returns (uint256);\\n\\n    function EQUIPMENT_BOTH_HANDED() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x70496772d926ce483222735b2839adcf8ceabf139a4a62f764685b98f39ef7b6\",\"license\":\"MIT\"},\"contracts/libraries/Authorizable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Authorizable is Ownable {\\n    mapping(address => bool) public authorized;\\n\\n    modifier onlyAuthorized() {\\n        require(authorized[msg.sender] || owner() == msg.sender);\\n        _;\\n    }\\n\\n    function addAuthorized(address toAdd) public onlyOwner {\\n        authorized[toAdd] = true;\\n    }\\n\\n    function removeAuthorized(address toRemove) public onlyOwner {\\n        require(toRemove != msg.sender);\\n        authorized[toRemove] = false;\\n    }\\n}\\n\",\"keccak256\":\"0xb729da05b364f2ccadc2d585250fe1458a08a9579956b747214869fff4d83efc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526005600c553480156200001657600080fd5b5060405162002e9138038062002e9183398101604081905262000039916200026d565b604080518082018252601781527f447261676f6e20506c617965722043686172616374657200000000000000000060208083019182528351808501909452600384526244504360e81b9084015281519192916200009991600091620001c7565b508051620000af906001906020840190620001c7565b505050620000cc620000c66200017160201b60201c565b62000175565b60016009556001600160a01b03831615801590620000f257506001600160a01b03821615155b80156200010757506001600160a01b03811615155b6200012f5760405162461bcd60e51b81526004016200012690620002c0565b60405180910390fd5b606092831b6001600160601b0319908116608052600b80546001600160a01b0319166001600160a01b03949094169390931790925590911b1660a0526200034d565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001d590620002f7565b90600052602060002090601f016020900481019282620001f9576000855562000244565b82601f106200021457805160ff191683800117855562000244565b8280016001018555821562000244579182015b828111156200024457825182559160200191906001019062000227565b506200025292915062000256565b5090565b5b8082111562000252576000815560010162000257565b60008060006060848603121562000282578283fd5b83516200028f8162000334565b6020850151909350620002a28162000334565b6040850151909250620002b58162000334565b809150509250925092565b60208082526014908201527f447261676f6e3a205a45524f5f41444452455353000000000000000000000000604082015260600190565b6002810460018216806200030c57607f821691505b602082108114156200032e57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b03811681146200034a57600080fd5b50565b60805160601c60a05160601c612b036200038e6000396000818161061401528181610e6c015281816116c801526116ed015260006111d80152612b036000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c8063715018a611610125578063b9181611116100ad578063dddf54c51161007c578063dddf54c51461040b578063e516920714610413578063e985e9c51461041b578063f2fde38b1461042e578063f37ac61c1461044157610211565b8063b9181611146103ca578063c87b56dd146103dd578063cf1c316a146103f0578063d70675181461040357610211565b80638da5cb5b116100f45780638da5cb5b1461038c57806395d89b4114610394578063a22cb4651461039c578063abdef399146103af578063b88d4fde146103b757610211565b8063715018a614610356578063811c2bab1461035e5780638cacd7a3146103715780638d06470c1461037957610211565b80633d932308116101a8578063504883611161017757806350488361146103025780635d240c581461030a5780636352211e1461031d5780636a60d9ab1461033057806370a082311461034357610211565b80633d932308146102c157806342842e0e146102c9578063485d7d94146102dc5780634d243147146102ef57610211565b80631a045a6a116101e45780631a045a6a1461028957806321b8dc191461029157806323b872dd146102a65780632a655215146102b957610211565b806301ffc9a71461021657806306fdde031461023f578063081812fc14610254578063095ea7b314610274575b600080fd5b6102296102243660046120cc565b610454565b6040516102369190612337565b60405180910390f35b61024761049c565b6040516102369190612342565b610267610262366004612172565b61052e565b60405161023691906122b3565b6102876102823660046120a3565b61057a565b005b610267610612565b610299610636565b6040516102369190612974565b6102876102b4366004611fb5565b61063b565b610299610673565b610299610678565b6102876102d7366004611fb5565b61067d565b6102876102ea366004611f69565b610698565b6102876102fd366004612172565b61070e565b610299610752565b6102876103183660046121a2565b610758565b61026761032b366004612172565b610901565b61029961033e366004612104565b610936565b610299610351366004611f69565b610b33565b610287610b77565b61028761036c366004612172565b610bc2565b610299610c1f565b6102876103873660046121c3565b610c24565b610267610f0c565b610247610f1b565b6102876103aa366004612069565b610f2a565b610299610ff8565b6102876103c5366004611ff0565b610ffe565b6102296103d8366004611f69565b61103d565b6102476103eb366004612172565b611052565b6102876103fe366004611f69565b611173565b610287610bc0565b6102676111d6565b6102996111fa565b610229610429366004611f83565b6111ff565b61028761043c366004611f69565b61122d565b61028761044f366004612172565b61129e565b60006001600160e01b031982166380ac58cd60e01b148061048557506001600160e01b03198216635b5e139f60e01b145b806104945750610494826112ef565b90505b919050565b6060600080546104ab90612a0b565b80601f01602080910402602001604051908101604052809291908181526020018280546104d790612a0b565b80156105245780601f106104f957610100808354040283529160200191610524565b820191906000526020600020905b81548152906001019060200180831161050757829003601f168201915b5050505050905090565b600061053982611308565b61055e5760405162461bcd60e51b81526004016105559061270c565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061058582610901565b9050806001600160a01b0316836001600160a01b031614156105b95760405162461bcd60e51b815260040161055590612833565b806001600160a01b03166105cb611325565b6001600160a01b031614806105e757506105e781610429611325565b6106035760405162461bcd60e51b81526004016105559061252d565b61060d8383611329565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600c81565b61064c610646611325565b82611397565b6106685760405162461bcd60e51b815260040161055590612874565b61060d838383611414565b600481565b606481565b61060d83838360405180602001604052806000815250610ffe565b6106a0611325565b6001600160a01b03166106b1610f0c565b6001600160a01b0316146106d75760405162461bcd60e51b815260040161055590612758565b6001600160a01b0381163314156106ed57600080fd5b6001600160a01b03166000908152600860205260409020805460ff19169055565b610716611325565b6001600160a01b0316610727610f0c565b6001600160a01b03161461074d5760405162461bcd60e51b815260040161055590612758565b600c55565b6109c481565b3360009081526008602052604090205460ff168061078557503361077a610f0c565b6001600160a01b0316145b61078e57600080fd5b6000828152600d60208181526040808420815161020081018352815481526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460c08301819052600782015460e084015260088201546101008401526009820154610120840152600a820154610140840152600b820154610160840152600c820154610180840152928101546101a0830152600e8101546101c0830152600f015460ff1615156101e08201529190610862906109c4906129a9565b90506000838360a00151610876919061297d565b90508181106108e557600061088b82846129c8565b6000878152600d60205260408120600581018390556006018054929350906108b283612a46565b90915550506000868152600d60205260408120600a018054600492906108d990849061297d565b909155506108fa915050565b6000858152600d602052604090206005018190555b5050505050565b6000818152600260205260408120546001600160a01b0316806104945760405162461bcd60e51b8152600401610555906125d4565b60006002600954141561095b5760405162461bcd60e51b81526004016105559061293d565b6002600955600c828461096e878961297d565b610978919061297d565b610982919061297d565b1461099f5760405162461bcd60e51b815260040161055590612906565b60006109ac6064846129a9565b905060006109ba600a611541565b9050604051806102000160405280888152602001878152602001868152602001858152602001600081526020016000815260200160018152602001838152602001838152602001428152602001600081526020016000815260200160008152602001600081526020016000815260200160011515815250600d6000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015561018082015181600c01556101a082015181600d01556101c082015181600e01556101e082015181600f0160006101000a81548160ff021916908315150217905550905050610b0f3382611545565b610b198189611624565b610b23600a611668565b6001600955979650505050505050565b60006001600160a01b038216610b5b5760405162461bcd60e51b81526004016105559061258a565b506001600160a01b031660009081526003602052604090205490565b610b7f611325565b6001600160a01b0316610b90610f0c565b6001600160a01b031614610bb65760405162461bcd60e51b815260040161055590612758565b610bc06000611671565b565b3360009081526008602052604090205460ff1680610bef575033610be4610f0c565b6001600160a01b0316145b610bf857600080fd5b610c018161129e565b6000908152600d60205260409020600f01805460ff19166001179055565b600181565b60026009541415610c475760405162461bcd60e51b81526004016105559061293d565b600260095533610c5686610901565b6001600160a01b031614610c7c5760405162461bcd60e51b8152600401610555906124aa565b610c88848484846116c3565b610ca45760405162461bcd60e51b8152600401610555906128d1565b60408051600480825260a08201909252600091602082016080803683370190505090508481600081518110610ce957634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508381600181518110610d1757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508281600281518110610d4557634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508181600381518110610d7357634e487b7160e01b600052603260045260246000fd5b602090810291909101015260408051600480825260a08201909252600091816020016020820280368337019050509050600181600381518110610dc657634e487b7160e01b600052603260045260246000fd5b602002602001018181525081600281518110610df257634e487b7160e01b600052603260045260246000fd5b602002602001018181525081600181518110610e1e57634e487b7160e01b600052603260045260246000fd5b602002602001018181525081600081518110610e4a57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604051631ac8311560e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636b20c45490610ea590339086908690600401612303565b600060405180830381600087803b158015610ebf57600080fd5b505af1158015610ed3573d6000803e3d6000fd5b50505060009788525050600d60208190526040909620600b81019590955550600c84019290925592820192909255600e01556001600955565b6007546001600160a01b031690565b6060600180546104ab90612a0b565b610f32611325565b6001600160a01b0316826001600160a01b03161415610f635760405162461bcd60e51b815260040161055590612473565b8060056000610f70611325565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610fb4611325565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610fec9190612337565b60405180910390a35050565b600c5490565b61100f611009611325565b83611397565b61102b5760405162461bcd60e51b815260040161055590612874565b61103784848484611b30565b50505050565b60086020526000908152604090205460ff1681565b606061105d82611308565b6110795760405162461bcd60e51b8152600401610555906126af565b6000828152600660205260408120805461109290612a0b565b80601f01602080910402602001604051908101604052809291908181526020018280546110be90612a0b565b801561110b5780601f106110e05761010080835404028352916020019161110b565b820191906000526020600020905b8154815290600101906020018083116110ee57829003601f168201915b50505050509050600061111c611b63565b905080516000141561113057509050610497565b81511561116257808260405160200161114a929190612284565b60405160208183030381529060405292505050610497565b61116b84611b75565b949350505050565b61117b611325565b6001600160a01b031661118c610f0c565b6001600160a01b0316146111b25760405162461bcd60e51b815260040161055590612758565b6001600160a01b03166000908152600860205260409020805460ff19166001179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b611235611325565b6001600160a01b0316611246610f0c565b6001600160a01b03161461126c5760405162461bcd60e51b815260040161055590612758565b6001600160a01b0381166112925760405162461bcd60e51b8152600401610555906123b2565b61129b81611671565b50565b3360009081526008602052604090205460ff16806112cb5750336112c0610f0c565b6001600160a01b0316145b6112d457600080fd5b6000908152600d602052604090206008810154600790910155565b6001600160e01b031981166301ffc9a760e01b14919050565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061135e82610901565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006113a282611308565b6113be5760405162461bcd60e51b8152600401610555906124e1565b60006113c983610901565b9050806001600160a01b0316846001600160a01b031614806114045750836001600160a01b03166113f98461052e565b6001600160a01b0316145b8061116b575061116b81856111ff565b826001600160a01b031661142782610901565b6001600160a01b03161461144d5760405162461bcd60e51b81526004016105559061278d565b6001600160a01b0382166114735760405162461bcd60e51b81526004016105559061242f565b61147e83838361060d565b611489600082611329565b6001600160a01b03831660009081526003602052604081208054600192906114b29084906129c8565b90915550506001600160a01b03821660009081526003602052604081208054600192906114e090849061297d565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b5490565b6001600160a01b03821661156b5760405162461bcd60e51b81526004016105559061267a565b61157481611308565b156115915760405162461bcd60e51b8152600401610555906123f8565b61159d6000838361060d565b6001600160a01b03821660009081526003602052604081208054600192906115c690849061297d565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b61162d82611308565b6116495760405162461bcd60e51b81526004016105559061261d565b6000828152600660209081526040909120825161060d92840190611e49565b80546001019055565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000807f0000000000000000000000000000000000000000000000000000000000000000905060007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b031663168283056040518163ffffffff1660e01b815260040160206040518083038186803b15801561174757600080fd5b505afa15801561175b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177f919061218a565b604051631389af5b60e31b81526001600160a01b03841690639c4d7ad8906117ab908b90600401612974565b60206040518083038186803b1580156117c357600080fd5b505afa1580156117d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fb91906121fd565b60ff161415806118f95750806001600160a01b0316631fa458fc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561183f57600080fd5b505afa158015611853573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611877919061218a565b604051631389af5b60e31b81526001600160a01b03841690639c4d7ad8906118a3908a90600401612974565b60206040518083038186803b1580156118bb57600080fd5b505afa1580156118cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f391906121fd565b60ff1614155b806119f25750806001600160a01b031663a7289fde6040518163ffffffff1660e01b815260040160206040518083038186803b15801561193857600080fd5b505afa15801561194c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611970919061218a565b604051631389af5b60e31b81526001600160a01b03841690639c4d7ad89061199c908990600401612974565b60206040518083038186803b1580156119b457600080fd5b505afa1580156119c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ec91906121fd565b60ff1614155b80611aeb5750806001600160a01b031663c874c50d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3157600080fd5b505afa158015611a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a69919061218a565b604051631389af5b60e31b81526001600160a01b03841690639c4d7ad890611a95908890600401612974565b60206040518083038186803b158015611aad57600080fd5b505afa158015611ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae591906121fd565b60ff1614155b15611afb5760009250505061116b565b85151580611b0857508415155b8015611b1357508315155b15611b235760009250505061116b565b5060019695505050505050565b611b3b848484611414565b611b4784848484611bf8565b6110375760405162461bcd60e51b815260040161055590612355565b60408051602081019091526000815290565b6060611b8082611308565b611b9c5760405162461bcd60e51b8152600401610555906127d6565b6000611ba6611b63565b90506000815111611bc65760405180602001604052806000815250611bf1565b80611bd084611d10565b604051602001611be1929190612284565b6040516020818303038152906040525b9392505050565b6000611c0c846001600160a01b0316611e43565b15611d0857836001600160a01b031663150b7a02611c28611325565b8786866040518563ffffffff1660e01b8152600401611c4a94939291906122c7565b602060405180830381600087803b158015611c6457600080fd5b505af1925050508015611c94575060408051601f3d908101601f19168201909252611c91918101906120e8565b60015b611cee573d808015611cc2576040519150601f19603f3d011682016040523d82523d6000602084013e611cc7565b606091505b508051611ce65760405162461bcd60e51b815260040161055590612355565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061116b565b50600161116b565b606081611d3557506040805180820190915260018152600360fc1b6020820152610497565b8160005b8115611d5f5780611d4981612a46565b9150611d589050600a83612995565b9150611d39565b60008167ffffffffffffffff811115611d8857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611db2576020820181803683370190505b5090505b841561116b57611dc76001836129c8565b9150611dd4600a86612a61565b611ddf90603061297d565b60f81b818381518110611e0257634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611e3c600a86612995565b9450611db6565b3b151590565b828054611e5590612a0b565b90600052602060002090601f016020900481019282611e775760008555611ebd565b82601f10611e9057805160ff1916838001178555611ebd565b82800160010185558215611ebd579182015b82811115611ebd578251825591602001919060010190611ea2565b50611ec9929150611ecd565b5090565b5b80821115611ec95760008155600101611ece565b600067ffffffffffffffff80841115611efd57611efd612aa1565b604051601f8501601f191681016020018281118282101715611f2157611f21612aa1565b604052848152915081838501861015611f3957600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b038116811461049757600080fd5b600060208284031215611f7a578081fd5b611bf182611f52565b60008060408385031215611f95578081fd5b611f9e83611f52565b9150611fac60208401611f52565b90509250929050565b600080600060608486031215611fc9578081fd5b611fd284611f52565b9250611fe060208501611f52565b9150604084013590509250925092565b60008060008060808587031215612005578081fd5b61200e85611f52565b935061201c60208601611f52565b925060408501359150606085013567ffffffffffffffff81111561203e578182fd5b8501601f8101871361204e578182fd5b61205d87823560208401611ee2565b91505092959194509250565b6000806040838503121561207b578182fd5b61208483611f52565b915060208301358015158114612098578182fd5b809150509250929050565b600080604083850312156120b5578182fd5b6120be83611f52565b946020939093013593505050565b6000602082840312156120dd578081fd5b8135611bf181612ab7565b6000602082840312156120f9578081fd5b8151611bf181612ab7565b600080600080600060a0868803121561211b578081fd5b853567ffffffffffffffff811115612131578182fd5b8601601f81018813612141578182fd5b61215088823560208401611ee2565b9860208801359850604088013597606081013597506080013595509350505050565b600060208284031215612183578081fd5b5035919050565b60006020828403121561219b578081fd5b5051919050565b600080604083850312156121b4578182fd5b50508035926020909101359150565b600080600080600060a086880312156121da578283fd5b505083359560208501359550604085013594606081013594506080013592509050565b60006020828403121561220e578081fd5b815160ff81168114611bf1578182fd5b6000815180845260208085019450808401835b8381101561224d57815187529582019590820190600101612231565b509495945050505050565b600081518084526122708160208601602086016129df565b601f01601f19169290920160200192915050565b600083516122968184602088016129df565b8351908301906122aa8183602088016129df565b01949350505050565b6001600160a01b0391909116815260200190565b60006001600160a01b038087168352808616602084015250836040830152608060608301526122f96080830184612258565b9695505050505050565b60006001600160a01b038516825260606020830152612325606083018561221e565b82810360408401526122f9818561221e565b901515815260200190565b600060208252611bf16020830184612258565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527f63656976657220696d706c656d656e7465720000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b60208082526011908201527f447261676f6e3a20466f7262696464656e000000000000000000000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252602e908201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60408201527f6578697374656e7420746f6b656e000000000000000000000000000000000000606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b60208082526031908201527f45524337323155524953746f726167653a2055524920717565727920666f722060408201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000606082015260800190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60408201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606082015260800190565b6020808252818101527f447261676f6e3a20496e76616c6964206974656d20636f6d62696e6174696f6e604082015260600190565b60208082526015908201527f447261676f6e3a20496e76616c69642073746174730000000000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b6000821982111561299057612990612a75565b500190565b6000826129a4576129a4612a8b565b500490565b60008160001904831182151516156129c3576129c3612a75565b500290565b6000828210156129da576129da612a75565b500390565b60005b838110156129fa5781810151838201526020016129e2565b838111156110375750506000910152565b600281046001821680612a1f57607f821691505b60208210811415612a4057634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612a5a57612a5a612a75565b5060010190565b600082612a7057612a70612a8b565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461129b57600080fdfea2646970667358221220fd2299b09bef7f772ccab1ee3b3dd707c56709e9017a9c8b7bb8b5ab9ccc4bea64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c8063715018a611610125578063b9181611116100ad578063dddf54c51161007c578063dddf54c51461040b578063e516920714610413578063e985e9c51461041b578063f2fde38b1461042e578063f37ac61c1461044157610211565b8063b9181611146103ca578063c87b56dd146103dd578063cf1c316a146103f0578063d70675181461040357610211565b80638da5cb5b116100f45780638da5cb5b1461038c57806395d89b4114610394578063a22cb4651461039c578063abdef399146103af578063b88d4fde146103b757610211565b8063715018a614610356578063811c2bab1461035e5780638cacd7a3146103715780638d06470c1461037957610211565b80633d932308116101a8578063504883611161017757806350488361146103025780635d240c581461030a5780636352211e1461031d5780636a60d9ab1461033057806370a082311461034357610211565b80633d932308146102c157806342842e0e146102c9578063485d7d94146102dc5780634d243147146102ef57610211565b80631a045a6a116101e45780631a045a6a1461028957806321b8dc191461029157806323b872dd146102a65780632a655215146102b957610211565b806301ffc9a71461021657806306fdde031461023f578063081812fc14610254578063095ea7b314610274575b600080fd5b6102296102243660046120cc565b610454565b6040516102369190612337565b60405180910390f35b61024761049c565b6040516102369190612342565b610267610262366004612172565b61052e565b60405161023691906122b3565b6102876102823660046120a3565b61057a565b005b610267610612565b610299610636565b6040516102369190612974565b6102876102b4366004611fb5565b61063b565b610299610673565b610299610678565b6102876102d7366004611fb5565b61067d565b6102876102ea366004611f69565b610698565b6102876102fd366004612172565b61070e565b610299610752565b6102876103183660046121a2565b610758565b61026761032b366004612172565b610901565b61029961033e366004612104565b610936565b610299610351366004611f69565b610b33565b610287610b77565b61028761036c366004612172565b610bc2565b610299610c1f565b6102876103873660046121c3565b610c24565b610267610f0c565b610247610f1b565b6102876103aa366004612069565b610f2a565b610299610ff8565b6102876103c5366004611ff0565b610ffe565b6102296103d8366004611f69565b61103d565b6102476103eb366004612172565b611052565b6102876103fe366004611f69565b611173565b610287610bc0565b6102676111d6565b6102996111fa565b610229610429366004611f83565b6111ff565b61028761043c366004611f69565b61122d565b61028761044f366004612172565b61129e565b60006001600160e01b031982166380ac58cd60e01b148061048557506001600160e01b03198216635b5e139f60e01b145b806104945750610494826112ef565b90505b919050565b6060600080546104ab90612a0b565b80601f01602080910402602001604051908101604052809291908181526020018280546104d790612a0b565b80156105245780601f106104f957610100808354040283529160200191610524565b820191906000526020600020905b81548152906001019060200180831161050757829003601f168201915b5050505050905090565b600061053982611308565b61055e5760405162461bcd60e51b81526004016105559061270c565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061058582610901565b9050806001600160a01b0316836001600160a01b031614156105b95760405162461bcd60e51b815260040161055590612833565b806001600160a01b03166105cb611325565b6001600160a01b031614806105e757506105e781610429611325565b6106035760405162461bcd60e51b81526004016105559061252d565b61060d8383611329565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600c81565b61064c610646611325565b82611397565b6106685760405162461bcd60e51b815260040161055590612874565b61060d838383611414565b600481565b606481565b61060d83838360405180602001604052806000815250610ffe565b6106a0611325565b6001600160a01b03166106b1610f0c565b6001600160a01b0316146106d75760405162461bcd60e51b815260040161055590612758565b6001600160a01b0381163314156106ed57600080fd5b6001600160a01b03166000908152600860205260409020805460ff19169055565b610716611325565b6001600160a01b0316610727610f0c565b6001600160a01b03161461074d5760405162461bcd60e51b815260040161055590612758565b600c55565b6109c481565b3360009081526008602052604090205460ff168061078557503361077a610f0c565b6001600160a01b0316145b61078e57600080fd5b6000828152600d60208181526040808420815161020081018352815481526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460c08301819052600782015460e084015260088201546101008401526009820154610120840152600a820154610140840152600b820154610160840152600c820154610180840152928101546101a0830152600e8101546101c0830152600f015460ff1615156101e08201529190610862906109c4906129a9565b90506000838360a00151610876919061297d565b90508181106108e557600061088b82846129c8565b6000878152600d60205260408120600581018390556006018054929350906108b283612a46565b90915550506000868152600d60205260408120600a018054600492906108d990849061297d565b909155506108fa915050565b6000858152600d602052604090206005018190555b5050505050565b6000818152600260205260408120546001600160a01b0316806104945760405162461bcd60e51b8152600401610555906125d4565b60006002600954141561095b5760405162461bcd60e51b81526004016105559061293d565b6002600955600c828461096e878961297d565b610978919061297d565b610982919061297d565b1461099f5760405162461bcd60e51b815260040161055590612906565b60006109ac6064846129a9565b905060006109ba600a611541565b9050604051806102000160405280888152602001878152602001868152602001858152602001600081526020016000815260200160018152602001838152602001838152602001428152602001600081526020016000815260200160008152602001600081526020016000815260200160011515815250600d6000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015561018082015181600c01556101a082015181600d01556101c082015181600e01556101e082015181600f0160006101000a81548160ff021916908315150217905550905050610b0f3382611545565b610b198189611624565b610b23600a611668565b6001600955979650505050505050565b60006001600160a01b038216610b5b5760405162461bcd60e51b81526004016105559061258a565b506001600160a01b031660009081526003602052604090205490565b610b7f611325565b6001600160a01b0316610b90610f0c565b6001600160a01b031614610bb65760405162461bcd60e51b815260040161055590612758565b610bc06000611671565b565b3360009081526008602052604090205460ff1680610bef575033610be4610f0c565b6001600160a01b0316145b610bf857600080fd5b610c018161129e565b6000908152600d60205260409020600f01805460ff19166001179055565b600181565b60026009541415610c475760405162461bcd60e51b81526004016105559061293d565b600260095533610c5686610901565b6001600160a01b031614610c7c5760405162461bcd60e51b8152600401610555906124aa565b610c88848484846116c3565b610ca45760405162461bcd60e51b8152600401610555906128d1565b60408051600480825260a08201909252600091602082016080803683370190505090508481600081518110610ce957634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508381600181518110610d1757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508281600281518110610d4557634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508181600381518110610d7357634e487b7160e01b600052603260045260246000fd5b602090810291909101015260408051600480825260a08201909252600091816020016020820280368337019050509050600181600381518110610dc657634e487b7160e01b600052603260045260246000fd5b602002602001018181525081600281518110610df257634e487b7160e01b600052603260045260246000fd5b602002602001018181525081600181518110610e1e57634e487b7160e01b600052603260045260246000fd5b602002602001018181525081600081518110610e4a57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604051631ac8311560e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636b20c45490610ea590339086908690600401612303565b600060405180830381600087803b158015610ebf57600080fd5b505af1158015610ed3573d6000803e3d6000fd5b50505060009788525050600d60208190526040909620600b81019590955550600c84019290925592820192909255600e01556001600955565b6007546001600160a01b031690565b6060600180546104ab90612a0b565b610f32611325565b6001600160a01b0316826001600160a01b03161415610f635760405162461bcd60e51b815260040161055590612473565b8060056000610f70611325565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610fb4611325565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610fec9190612337565b60405180910390a35050565b600c5490565b61100f611009611325565b83611397565b61102b5760405162461bcd60e51b815260040161055590612874565b61103784848484611b30565b50505050565b60086020526000908152604090205460ff1681565b606061105d82611308565b6110795760405162461bcd60e51b8152600401610555906126af565b6000828152600660205260408120805461109290612a0b565b80601f01602080910402602001604051908101604052809291908181526020018280546110be90612a0b565b801561110b5780601f106110e05761010080835404028352916020019161110b565b820191906000526020600020905b8154815290600101906020018083116110ee57829003601f168201915b50505050509050600061111c611b63565b905080516000141561113057509050610497565b81511561116257808260405160200161114a929190612284565b60405160208183030381529060405292505050610497565b61116b84611b75565b949350505050565b61117b611325565b6001600160a01b031661118c610f0c565b6001600160a01b0316146111b25760405162461bcd60e51b815260040161055590612758565b6001600160a01b03166000908152600860205260409020805460ff19166001179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b611235611325565b6001600160a01b0316611246610f0c565b6001600160a01b03161461126c5760405162461bcd60e51b815260040161055590612758565b6001600160a01b0381166112925760405162461bcd60e51b8152600401610555906123b2565b61129b81611671565b50565b3360009081526008602052604090205460ff16806112cb5750336112c0610f0c565b6001600160a01b0316145b6112d457600080fd5b6000908152600d602052604090206008810154600790910155565b6001600160e01b031981166301ffc9a760e01b14919050565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061135e82610901565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006113a282611308565b6113be5760405162461bcd60e51b8152600401610555906124e1565b60006113c983610901565b9050806001600160a01b0316846001600160a01b031614806114045750836001600160a01b03166113f98461052e565b6001600160a01b0316145b8061116b575061116b81856111ff565b826001600160a01b031661142782610901565b6001600160a01b03161461144d5760405162461bcd60e51b81526004016105559061278d565b6001600160a01b0382166114735760405162461bcd60e51b81526004016105559061242f565b61147e83838361060d565b611489600082611329565b6001600160a01b03831660009081526003602052604081208054600192906114b29084906129c8565b90915550506001600160a01b03821660009081526003602052604081208054600192906114e090849061297d565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b5490565b6001600160a01b03821661156b5760405162461bcd60e51b81526004016105559061267a565b61157481611308565b156115915760405162461bcd60e51b8152600401610555906123f8565b61159d6000838361060d565b6001600160a01b03821660009081526003602052604081208054600192906115c690849061297d565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b61162d82611308565b6116495760405162461bcd60e51b81526004016105559061261d565b6000828152600660209081526040909120825161060d92840190611e49565b80546001019055565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000807f0000000000000000000000000000000000000000000000000000000000000000905060007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b031663168283056040518163ffffffff1660e01b815260040160206040518083038186803b15801561174757600080fd5b505afa15801561175b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177f919061218a565b604051631389af5b60e31b81526001600160a01b03841690639c4d7ad8906117ab908b90600401612974565b60206040518083038186803b1580156117c357600080fd5b505afa1580156117d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fb91906121fd565b60ff161415806118f95750806001600160a01b0316631fa458fc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561183f57600080fd5b505afa158015611853573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611877919061218a565b604051631389af5b60e31b81526001600160a01b03841690639c4d7ad8906118a3908a90600401612974565b60206040518083038186803b1580156118bb57600080fd5b505afa1580156118cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f391906121fd565b60ff1614155b806119f25750806001600160a01b031663a7289fde6040518163ffffffff1660e01b815260040160206040518083038186803b15801561193857600080fd5b505afa15801561194c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611970919061218a565b604051631389af5b60e31b81526001600160a01b03841690639c4d7ad89061199c908990600401612974565b60206040518083038186803b1580156119b457600080fd5b505afa1580156119c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ec91906121fd565b60ff1614155b80611aeb5750806001600160a01b031663c874c50d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3157600080fd5b505afa158015611a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a69919061218a565b604051631389af5b60e31b81526001600160a01b03841690639c4d7ad890611a95908890600401612974565b60206040518083038186803b158015611aad57600080fd5b505afa158015611ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae591906121fd565b60ff1614155b15611afb5760009250505061116b565b85151580611b0857508415155b8015611b1357508315155b15611b235760009250505061116b565b5060019695505050505050565b611b3b848484611414565b611b4784848484611bf8565b6110375760405162461bcd60e51b815260040161055590612355565b60408051602081019091526000815290565b6060611b8082611308565b611b9c5760405162461bcd60e51b8152600401610555906127d6565b6000611ba6611b63565b90506000815111611bc65760405180602001604052806000815250611bf1565b80611bd084611d10565b604051602001611be1929190612284565b6040516020818303038152906040525b9392505050565b6000611c0c846001600160a01b0316611e43565b15611d0857836001600160a01b031663150b7a02611c28611325565b8786866040518563ffffffff1660e01b8152600401611c4a94939291906122c7565b602060405180830381600087803b158015611c6457600080fd5b505af1925050508015611c94575060408051601f3d908101601f19168201909252611c91918101906120e8565b60015b611cee573d808015611cc2576040519150601f19603f3d011682016040523d82523d6000602084013e611cc7565b606091505b508051611ce65760405162461bcd60e51b815260040161055590612355565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061116b565b50600161116b565b606081611d3557506040805180820190915260018152600360fc1b6020820152610497565b8160005b8115611d5f5780611d4981612a46565b9150611d589050600a83612995565b9150611d39565b60008167ffffffffffffffff811115611d8857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611db2576020820181803683370190505b5090505b841561116b57611dc76001836129c8565b9150611dd4600a86612a61565b611ddf90603061297d565b60f81b818381518110611e0257634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611e3c600a86612995565b9450611db6565b3b151590565b828054611e5590612a0b565b90600052602060002090601f016020900481019282611e775760008555611ebd565b82601f10611e9057805160ff1916838001178555611ebd565b82800160010185558215611ebd579182015b82811115611ebd578251825591602001919060010190611ea2565b50611ec9929150611ecd565b5090565b5b80821115611ec95760008155600101611ece565b600067ffffffffffffffff80841115611efd57611efd612aa1565b604051601f8501601f191681016020018281118282101715611f2157611f21612aa1565b604052848152915081838501861015611f3957600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b038116811461049757600080fd5b600060208284031215611f7a578081fd5b611bf182611f52565b60008060408385031215611f95578081fd5b611f9e83611f52565b9150611fac60208401611f52565b90509250929050565b600080600060608486031215611fc9578081fd5b611fd284611f52565b9250611fe060208501611f52565b9150604084013590509250925092565b60008060008060808587031215612005578081fd5b61200e85611f52565b935061201c60208601611f52565b925060408501359150606085013567ffffffffffffffff81111561203e578182fd5b8501601f8101871361204e578182fd5b61205d87823560208401611ee2565b91505092959194509250565b6000806040838503121561207b578182fd5b61208483611f52565b915060208301358015158114612098578182fd5b809150509250929050565b600080604083850312156120b5578182fd5b6120be83611f52565b946020939093013593505050565b6000602082840312156120dd578081fd5b8135611bf181612ab7565b6000602082840312156120f9578081fd5b8151611bf181612ab7565b600080600080600060a0868803121561211b578081fd5b853567ffffffffffffffff811115612131578182fd5b8601601f81018813612141578182fd5b61215088823560208401611ee2565b9860208801359850604088013597606081013597506080013595509350505050565b600060208284031215612183578081fd5b5035919050565b60006020828403121561219b578081fd5b5051919050565b600080604083850312156121b4578182fd5b50508035926020909101359150565b600080600080600060a086880312156121da578283fd5b505083359560208501359550604085013594606081013594506080013592509050565b60006020828403121561220e578081fd5b815160ff81168114611bf1578182fd5b6000815180845260208085019450808401835b8381101561224d57815187529582019590820190600101612231565b509495945050505050565b600081518084526122708160208601602086016129df565b601f01601f19169290920160200192915050565b600083516122968184602088016129df565b8351908301906122aa8183602088016129df565b01949350505050565b6001600160a01b0391909116815260200190565b60006001600160a01b038087168352808616602084015250836040830152608060608301526122f96080830184612258565b9695505050505050565b60006001600160a01b038516825260606020830152612325606083018561221e565b82810360408401526122f9818561221e565b901515815260200190565b600060208252611bf16020830184612258565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527f63656976657220696d706c656d656e7465720000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b60208082526011908201527f447261676f6e3a20466f7262696464656e000000000000000000000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252602e908201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60408201527f6578697374656e7420746f6b656e000000000000000000000000000000000000606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b60208082526031908201527f45524337323155524953746f726167653a2055524920717565727920666f722060408201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000606082015260800190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60408201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606082015260800190565b6020808252818101527f447261676f6e3a20496e76616c6964206974656d20636f6d62696e6174696f6e604082015260600190565b60208082526015908201527f447261676f6e3a20496e76616c69642073746174730000000000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b6000821982111561299057612990612a75565b500190565b6000826129a4576129a4612a8b565b500490565b60008160001904831182151516156129c3576129c3612a75565b500290565b6000828210156129da576129da612a75565b500390565b60005b838110156129fa5781810151838201526020016129e2565b838111156110375750506000910152565b600281046001821680612a1f57607f821691505b60208210811415612a4057634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612a5a57612a5a612a75565b5060010190565b600082612a7057612a70612a8b565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461129b57600080fdfea2646970667358221220fd2299b09bef7f772ccab1ee3b3dd707c56709e9017a9c8b7bb8b5ab9ccc4bea64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2462,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2464,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2468,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2472,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2476,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2482,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3399,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 9741,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "authorized",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 206,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_status",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 8518,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Counter)3893_storage"
      },
      {
        "astId": 8520,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_feeAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address_payable"
      },
      {
        "astId": 8523,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_characterPrice",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 8583,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "dragonPlayers",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(Dragon)8578_storage)"
      },
      {
        "astId": 8589,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "dragonResources",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_mapping(t_uint8,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Dragon)8578_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DragonPlayerCharacter.Dragon)",
        "numberOfBytes": "32",
        "value": "t_struct(Dragon)8578_storage"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3893_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3892,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Dragon)8578_storage": {
        "encoding": "inplace",
        "label": "struct DragonPlayerCharacter.Dragon",
        "members": [
          {
            "astId": 8547,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "attack",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8549,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "defense",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8551,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "speed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8553,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "endurance",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8555,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "luck",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8557,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "experience",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8559,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "level",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8561,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "currentHealth",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 8563,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "totalHealth",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 8565,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "created",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 8567,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "statPointsToSpend",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 8569,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "equipmentBody",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 8571,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "equipmentHand1",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 8573,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "equipmentHand2",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 8575,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "equipmentBoth",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 8577,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "isAlive",
            "offset": 0,
            "slot": "15",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}