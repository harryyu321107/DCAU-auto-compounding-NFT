{
  "address": "0x9ab31c04989CC6C2C9398a5A6Ae8a9d99Aeaf3B9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_DCAU",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DRAGON_NEST_SUPPORTER",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gameAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dcauPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_NFT_MARKET",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositFeeBP",
          "type": "uint256"
        }
      ],
      "name": "AddPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "DragonNestStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "DragonNestWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MarketDCAUDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SetDCAUPerSecond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "emissionEndTime",
          "type": "uint256"
        }
      ],
      "name": "SetEmissionEndTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "SetFeeAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositFeeBP",
          "type": "uint256"
        }
      ],
      "name": "SetPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStartBlock",
          "type": "uint256"
        }
      ],
      "name": "UpdateStartBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DCAU",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DCAU_MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEVADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DRAGON_NEST_SUPPORTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEEADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAMEADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_EMISSION_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NFT_MARKET",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dcauPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositMarketFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dragonNestInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePoolDragonNests",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nestSupportersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingDcau",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "pendingDcauOfDragonNest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolDragonNestInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accDepFeePerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingDepFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolExistence",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accDCAUPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dcauPerSecond",
          "type": "uint256"
        }
      ],
      "name": "setDcauPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_emissionEndTime",
          "type": "uint256"
        }
      ],
      "name": "setEmissionEndTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newStartTime",
          "type": "uint256"
        }
      ],
      "name": "setStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "stakeDragonNest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "stakedAddressForDragonNest",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePoolDragonNest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawDragonNest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe5fde89ead813a485a50baa9687de7cb9bfc0129802bcbd88fb678c95f011e98",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0x9ab31c04989CC6C2C9398a5A6Ae8a9d99Aeaf3B9",
    "transactionIndex": 3,
    "gasUsed": "3055674",
    "logsBloom": "0x
    "blockHash": "0x51c2a932a860dec99fcdbf941b38f58ee744f3fd174939dd89c085645ee99d26",
    "transactionHash": "0xe5fde89ead813a485a50baa9687de7cb9bfc0129802bcbd88fb678c95f011e98",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 9657096,
        "transactionHash": "0xe5fde89ead813a485a50baa9687de7cb9bfc0129802bcbd88fb678c95f011e98",
        "address": "0x9ab31c04989CC6C2C9398a5A6Ae8a9d99Aeaf3B9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x51c2a932a860dec99fcdbf941b38f58ee744f3fd174939dd89c085645ee99d26"
      }
    ],
    "blockNumber": 9657096,
    "cumulativeGasUsed": "3368665",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7dd5DF8396B40948fF1373A29Ae097329D12B643",
    "0x78BBA461A395B4C9Eda909D34fd5608fe6417B12",
    "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    1637139669,
    "50000000000000000",
    "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "0x698E6f9b0F1f208b37F4dB2B1e9c908c2a0A3E8E"
  ],
  "solcInputHash": "56eb90207329585f2316b84e0cd3e4dc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DCAU\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DRAGON_NEST_SUPPORTER\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gameAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dcauPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_NFT_MARKET\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFeeBP\",\"type\":\"uint256\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DragonNestStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DragonNestWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MarketDCAUDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetDCAUPerSecond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emissionEndTime\",\"type\":\"uint256\"}],\"name\":\"SetEmissionEndTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetFeeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFeeBP\",\"type\":\"uint256\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStartBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateStartBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DCAU\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DCAU_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEVADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DRAGON_NEST_SUPPORTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEEADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAMEADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_EMISSION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_MARKET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dcauPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositMarketFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dragonNestInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePoolDragonNests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nestSupportersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingDcau\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"pendingDcauOfDragonNest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolDragonNestInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accDepFeePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingDepFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDCAUPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcauPerSecond\",\"type\":\"uint256\"}],\"name\":\"setDcauPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emissionEndTime\",\"type\":\"uint256\"}],\"name\":\"setEmissionEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStartTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeDragonNest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stakedAddressForDragonNest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePoolDragonNest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawDragonNest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositMarketFee(uint256,uint256)\":{\"details\":\"This function is used for depositing DCAU from market\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MasterChef.sol\":\"MasterChef\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/MasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./interfaces/IDCAU.sol\\\";\\r\\n\\r\\n// MasterChef is the master of DCAU(Dragon Crypto Aurum). He can make DCAU and he is a fair guy.\\r\\n//\\r\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\r\\n// will be transferred to a governance smart contract once DCAU is sufficiently\\r\\n// distributed and the community can show to govern itself.\\r\\n//\\r\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\r\\ncontract MasterChef is ERC721Holder, Ownable, ReentrancyGuard {\\r\\n    event AddPool(uint256 indexed pid, address lpToken, uint256 allocPoint, uint256 depositFeeBP);\\r\\n    event SetPool(uint256 indexed pid, address lpToken, uint256 allocPoint, uint256 depositFeeBP);\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event SetFeeAddress(address indexed user, address indexed newAddress);\\r\\n    event UpdateStartBlock(uint256 newStartBlock);\\r\\n    event SetDCAUPerSecond(uint256 amount);\\r\\n    event SetEmissionEndTime(uint256 emissionEndTime);\\r\\n    event DragonNestStaked(address indexed user, uint256 indexed tokenId);\\r\\n    event DragonNestWithdrawn(address indexed user, uint256 indexed tokenId);\\r\\n    event MarketDCAUDeposited(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n        //\\r\\n        // We do some fancy math here. Basically, any point in time, the amount of DCAUs\\r\\n        // entitled to a user but is pending to be distributed is:\\r\\n        //\\r\\n        //   pending reward = (user.amount * pool.accDCAUPerShare) - user.rewardDebt\\r\\n        //\\r\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\r\\n        //   1. The pool's `accDCAUPerShare` (and `lastRewardTime`) gets updated.\\r\\n        //   2. User receives the pending reward sent to his/her address.\\r\\n        //   3. User's `amount` gets updated.\\r\\n        //   4. User's `rewardDebt` gets updated.\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IERC20 lpToken; // Address of LP token contract.\\r\\n        uint256 allocPoint; // How many allocation points assigned to this pool. DCAUs to distribute per block. 100 - 1point\\r\\n        uint256 lastRewardTime; // Last block timestamp that DCAUs distribution occurs.\\r\\n        uint256 accDCAUPerShare; // Accumulated DCAUs per share, times 1e12. See below.\\r\\n        uint16 depositFeeBP; // Deposit fee in basis points 10000 - 100%\\r\\n        uint256 lpSupply;\\r\\n    }\\r\\n\\r\\n    struct PoolDragonNestInfo {\\r\\n        uint256 accDepFeePerShare; // Accumulated LP token(from deposit fee) per share, times 1e12. See below.\\r\\n        uint256 pendingDepFee; // pending deposit fee for the reward for the Dragon Nest Supporters\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => PoolDragonNestInfo) public poolDragonNestInfo; // poolId => poolDragonNestInfo\\r\\n    mapping(uint256 => mapping(uint256 => uint256)) public dragonNestInfo; // poolId => (nestId => rewardDebt), nestId: NFT tokenId\\r\\n    mapping(uint256 => address) nestSupporters; // tokenId => nest supporter;\\r\\n    uint256 public nestSupportersLength;\\r\\n\\r\\n    uint256 public constant DCAU_MAX_SUPPLY = 155000 * (10**18);\\r\\n\\r\\n    uint256 public constant MAX_EMISSION_RATE = 1 * (10**18);\\r\\n\\r\\n    // The Dragon Cyrpto AU TOKEN!\\r\\n    address public immutable DCAU;\\r\\n    uint256 public dcauPerSecond;\\r\\n    address public immutable DRAGON_NEST_SUPPORTER;\\r\\n    // Deposit Fee address\\r\\n    address public immutable FEEADDRESS;\\r\\n    address public immutable GAMEADDRESS;\\r\\n    address public immutable NFT_MARKET;\\r\\n    // Info of each pool.\\r\\n    PoolInfo[] public poolInfo;\\r\\n    // Info of each user that stakes LP tokens.\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n    uint256 public totalAllocPoint = 0;\\r\\n    // The time when Dragon mining starts.\\r\\n    uint256 public startTime;\\r\\n    // The time when Dragon mining ends.\\r\\n    uint256 public emissionEndTime = type(uint256).max;\\r\\n\\r\\n    address public immutable DEVADDRESS;\\r\\n\\r\\n    constructor(\\r\\n        address _DCAU,\\r\\n        address _DRAGON_NEST_SUPPORTER,\\r\\n        address _gameAddress,\\r\\n        address _feeAddress,\\r\\n        uint256 _startTime,\\r\\n        uint256 _dcauPerSecond,\\r\\n        address _devAddress,\\r\\n        address _NFT_MARKET\\r\\n    ) {\\r\\n        require(_DCAU != address(0), \\\"must be valid address\\\");\\r\\n        require(_DRAGON_NEST_SUPPORTER != address(0), \\\"must be valid address\\\");\\r\\n        require(_gameAddress != address(0), \\\"must be valid address\\\");\\r\\n        require(_feeAddress != address(0), \\\"must be valid address\\\");\\r\\n        require(_startTime > block.timestamp, \\\"must start in the future\\\");\\r\\n        require(_dcauPerSecond <= MAX_EMISSION_RATE, \\\"emission rate too high\\\");\\r\\n        require(_devAddress != address(0), \\\"must be valid address\\\");\\r\\n        require(_NFT_MARKET != address(0), \\\"must be valid address\\\");\\r\\n\\r\\n        DCAU = _DCAU;\\r\\n        DRAGON_NEST_SUPPORTER = _DRAGON_NEST_SUPPORTER;\\r\\n        FEEADDRESS = _feeAddress;\\r\\n        startTime = _startTime;\\r\\n        dcauPerSecond = _dcauPerSecond;\\r\\n        DEVADDRESS = _devAddress;\\r\\n        GAMEADDRESS = _gameAddress;\\r\\n        NFT_MARKET = _NFT_MARKET;\\r\\n    }\\r\\n\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    mapping(IERC20 => bool) public poolExistence;\\r\\n    modifier nonDuplicated(IERC20 _lpToken) {\\r\\n        require(poolExistence[_lpToken] == false, \\\"nonDuplicated: duplicated\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Add a new lp to the pool. Can only be called by the owner.\\r\\n    function add(\\r\\n        uint256 _allocPoint,\\r\\n        IERC20 _lpToken,\\r\\n        uint16 _depositFeeBP,\\r\\n        bool _withUpdate\\r\\n    ) external onlyOwner nonDuplicated(_lpToken) {\\r\\n        require(poolInfo.length < 20, \\\"too many pools\\\");\\r\\n\\r\\n        // Make sure the provided token is ERC20\\r\\n        _lpToken.balanceOf(address(this));\\r\\n\\r\\n        require(_depositFeeBP <= 401, \\\"add: invalid deposit fee basis points\\\");\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        uint256 lastRewardTime = block.timestamp > startTime ? block.timestamp : startTime;\\r\\n        totalAllocPoint = totalAllocPoint + _allocPoint;\\r\\n        poolExistence[_lpToken] = true;\\r\\n\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n                lpToken: _lpToken,\\r\\n                allocPoint: _allocPoint,\\r\\n                lastRewardTime: lastRewardTime,\\r\\n                accDCAUPerShare: 0,\\r\\n                depositFeeBP: _depositFeeBP,\\r\\n                lpSupply: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        emit AddPool(poolInfo.length - 1, address(_lpToken), _allocPoint, _depositFeeBP);\\r\\n    }\\r\\n\\r\\n    // Update the given pool's DCAU allocation point and deposit fee. Can only be called by the owner.\\r\\n    function set(\\r\\n        uint256 _pid,\\r\\n        uint256 _allocPoint,\\r\\n        uint16 _depositFeeBP,\\r\\n        bool _withUpdate\\r\\n    ) external onlyOwner {\\r\\n        require(_depositFeeBP <= 401, \\\"set: invalid deposit fee basis points\\\");\\r\\n        require(_pid < poolInfo.length, \\\"Dragon: Non-existent pool\\\");\\r\\n\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\r\\n\\r\\n        emit SetPool(_pid, address(poolInfo[_pid].lpToken), _allocPoint, _depositFeeBP);\\r\\n    }\\r\\n\\r\\n    // Return reward multiplier over the given _from to _to block.\\r\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\r\\n        // As we set the multiplier to 0 here after emissionEndTime\\r\\n        // deposits aren't blocked after farming ends.\\r\\n        // reward every 1 seconds\\r\\n        if (_from > emissionEndTime) return 0;\\r\\n        if (_to > emissionEndTime) return (emissionEndTime - _from);\\r\\n        else return (_to - _from);\\r\\n    }\\r\\n\\r\\n    // View function to see pending DCAUs on frontend.\\r\\n    function pendingDcau(uint256 _pid, address _user) external view returns (uint256) {\\r\\n        require(_pid < poolInfo.length, \\\"Dragon: Non-existent pool\\\");\\r\\n\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accDcauPerShare = pool.accDCAUPerShare;\\r\\n\\r\\n        if (block.timestamp > pool.lastRewardTime && pool.lpSupply != 0 && totalAllocPoint > 0) {\\r\\n            uint256 multiplier = getMultiplier(pool.lastRewardTime, block.timestamp);\\r\\n            uint256 dcauReward = (multiplier * dcauPerSecond * pool.allocPoint) / totalAllocPoint;\\r\\n\\r\\n            uint256 dcauTotalSupply = IERC20(DCAU).totalSupply();\\r\\n\\r\\n            uint256 gameDevDcauReward = dcauReward / 15;\\r\\n\\r\\n            // This shouldn't happen, but just in case we stop rewards.\\r\\n            if (dcauTotalSupply >= DCAU_MAX_SUPPLY) {\\r\\n                dcauReward = 0;\\r\\n            } else if ((dcauTotalSupply + dcauReward + gameDevDcauReward) > DCAU_MAX_SUPPLY) {\\r\\n                uint256 dcauSupplyRemaining = DCAU_MAX_SUPPLY - dcauTotalSupply;\\r\\n                dcauReward = (dcauSupplyRemaining * 15) / 16;\\r\\n            }\\r\\n\\r\\n            accDcauPerShare = accDcauPerShare + ((dcauReward * 1e12) / pool.lpSupply);\\r\\n        }\\r\\n\\r\\n        return ((user.amount * accDcauPerShare) / 1e12) - user.rewardDebt;\\r\\n    }\\r\\n\\r\\n    // Update reward variables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            updatePool(pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool(uint256 _pid) public {\\r\\n        require(_pid < poolInfo.length, \\\"Dragon: Non-existent pool\\\");\\r\\n\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.timestamp <= pool.lastRewardTime) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (pool.lpSupply == 0 || pool.allocPoint == 0) {\\r\\n            pool.lastRewardTime = block.timestamp;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 multiplier = getMultiplier(pool.lastRewardTime, block.timestamp);\\r\\n        uint256 dcauReward = (multiplier * dcauPerSecond * pool.allocPoint) / totalAllocPoint;\\r\\n        uint256 dcauTotalSupply = IERC20(DCAU).totalSupply();\\r\\n\\r\\n        uint256 gameDevDcauReward = dcauReward / 15;\\r\\n\\r\\n        // This shouldn't happen, but just in case we stop rewards.\\r\\n        if (dcauTotalSupply >= DCAU_MAX_SUPPLY) {\\r\\n            dcauReward = 0;\\r\\n            gameDevDcauReward = 0;\\r\\n        } else if ((dcauTotalSupply + dcauReward + gameDevDcauReward) > DCAU_MAX_SUPPLY) {\\r\\n            uint256 dcauSupplyRemaining = DCAU_MAX_SUPPLY - dcauTotalSupply;\\r\\n            dcauReward = (dcauSupplyRemaining * 15) / 16;\\r\\n            gameDevDcauReward = dcauSupplyRemaining - dcauReward;\\r\\n        }\\r\\n\\r\\n        if (dcauReward > 0) {\\r\\n            IDCAU(DCAU).mint(address(this), dcauReward);\\r\\n        }\\r\\n\\r\\n        if (gameDevDcauReward > 0) {\\r\\n            uint256 devReward = (gameDevDcauReward * 1) / 3;\\r\\n            uint256 gameReward = gameDevDcauReward - devReward;\\r\\n\\r\\n            IDCAU(DCAU).mint(DEVADDRESS, devReward);\\r\\n            IDCAU(DCAU).mint(GAMEADDRESS, gameReward);\\r\\n        }\\r\\n\\r\\n        dcauTotalSupply = IERC20(DCAU).totalSupply();\\r\\n\\r\\n        // The first time we reach DCAU's max supply we solidify the end of farming.\\r\\n        if (dcauTotalSupply >= DCAU_MAX_SUPPLY && emissionEndTime == type(uint256).max) emissionEndTime = block.timestamp;\\r\\n\\r\\n        pool.accDCAUPerShare = pool.accDCAUPerShare + ((dcauReward * 1e12) / pool.lpSupply);\\r\\n        pool.lastRewardTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    // Deposit LP tokens to MasterChef for DCAU allocation.\\r\\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant {\\r\\n        require(_pid < poolInfo.length, \\\"Dragon: Non-existent pool\\\");\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        updatePool(_pid);\\r\\n        if (user.amount > 0) {\\r\\n            uint256 pending = ((user.amount * pool.accDCAUPerShare) / 1e12) - user.rewardDebt;\\r\\n            if (pending > 0) {\\r\\n                safeDcauTransfer(msg.sender, pending);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            // We are considering tokens which takes accounts fees when trasnsferring such like reflect finance\\r\\n            IERC20 _lpToken = pool.lpToken;\\r\\n            {\\r\\n                uint256 balanceBefore = _lpToken.balanceOf(address(this));\\r\\n                _lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n                _amount = _lpToken.balanceOf(address(this)) - balanceBefore;\\r\\n                require(_amount > 0, \\\"We only accept amount > 0\\\");\\r\\n            }\\r\\n\\r\\n            if (pool.depositFeeBP > 0) {\\r\\n                uint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\\r\\n                // We split this fee to feeAddress and Dragon Nest supporters - 90% 10%\\r\\n                _lpToken.safeTransfer(FEEADDRESS, (depositFee * 9000) / 10000);\\r\\n\\r\\n                poolDragonNestInfo[_pid].pendingDepFee += (depositFee * 1000) / 10000;\\r\\n\\r\\n                user.amount = user.amount + _amount - depositFee;\\r\\n                pool.lpSupply = pool.lpSupply + _amount - depositFee;\\r\\n            } else {\\r\\n                user.amount = user.amount + _amount;\\r\\n                pool.lpSupply = pool.lpSupply + _amount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        user.rewardDebt = (user.amount * pool.accDCAUPerShare) / 1e12;\\r\\n\\r\\n        emit Deposit(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw LP tokens from MasterChef.\\r\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\r\\n        require(_pid < poolInfo.length, \\\"Dragon: Non-existent pool\\\");\\r\\n\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        require(user.amount >= _amount, \\\"Withdraw: not good\\\");\\r\\n        updatePool(_pid);\\r\\n        uint256 pending = ((user.amount * pool.accDCAUPerShare) / 1e12) - user.rewardDebt;\\r\\n        if (pending > 0) {\\r\\n            safeDcauTransfer(msg.sender, pending);\\r\\n        }\\r\\n        if (_amount > 0) {\\r\\n            user.amount = user.amount - _amount;\\r\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\r\\n            pool.lpSupply = pool.lpSupply - _amount;\\r\\n        }\\r\\n        user.rewardDebt = (user.amount * pool.accDCAUPerShare) / 1e12;\\r\\n        emit Withdraw(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\r\\n        require(_pid < poolInfo.length, \\\"Dragon: Non-existent pool\\\");\\r\\n\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        uint256 amount = user.amount;\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\\r\\n\\r\\n        // In the case of an accounting error, we choose to let the user emergency withdraw anyway\\r\\n        if (pool.lpSupply >= amount) pool.lpSupply = pool.lpSupply - amount;\\r\\n        else pool.lpSupply = 0;\\r\\n\\r\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\r\\n    }\\r\\n\\r\\n    // Safe DCAU transfer function, just in case if rounding error causes pool to not have enough DCAUs.\\r\\n    function safeDcauTransfer(address _to, uint256 _amount) internal {\\r\\n        uint256 dcauBal = IERC20(DCAU).balanceOf(address(this));\\r\\n        bool transferSuccess = false;\\r\\n        if (_amount > dcauBal) {\\r\\n            transferSuccess = IERC20(DCAU).transfer(_to, dcauBal);\\r\\n        } else {\\r\\n            transferSuccess = IERC20(DCAU).transfer(_to, _amount);\\r\\n        }\\r\\n        require(transferSuccess, \\\"safeDcauTransfer: transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function setStartTime(uint256 _newStartTime) external onlyOwner {\\r\\n        require(poolInfo.length == 0, \\\"no changing startTime after pools have been added\\\");\\r\\n        require(block.timestamp < startTime, \\\"cannot change start time if sale has already commenced\\\");\\r\\n        require(block.timestamp < _newStartTime, \\\"cannot set start time in the past\\\");\\r\\n        startTime = _newStartTime;\\r\\n\\r\\n        emit UpdateStartBlock(startTime);\\r\\n    }\\r\\n\\r\\n    function setDcauPerSecond(uint256 _dcauPerSecond) external onlyOwner {\\r\\n        require(_dcauPerSecond <= MAX_EMISSION_RATE, \\\"emissions too high limited to 1 per second\\\");\\r\\n\\r\\n        massUpdatePools();\\r\\n\\r\\n        dcauPerSecond = _dcauPerSecond;\\r\\n        emit SetDCAUPerSecond(_dcauPerSecond);\\r\\n    }\\r\\n\\r\\n    function setEmissionEndTime(uint256 _emissionEndTime) external onlyOwner {\\r\\n        require(_emissionEndTime > block.timestamp, \\\"Emission can not be end in the past\\\");\\r\\n        emissionEndTime = _emissionEndTime;\\r\\n        emit SetEmissionEndTime(_emissionEndTime);\\r\\n    }\\r\\n\\r\\n    function massUpdatePoolDragonNests() external nonReentrant {\\r\\n        _massUpdatePoolDragonNests();\\r\\n    }\\r\\n\\r\\n    function _massUpdatePoolDragonNests() private {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            _updatePoolDragonNest(pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update dragon nest.\\r\\n    function updatePoolDragonNest(uint256 _pid) external nonReentrant {\\r\\n        _updatePoolDragonNest(_pid);\\r\\n    }\\r\\n\\r\\n    function _updatePoolDragonNest(uint256 _pid) private {\\r\\n        require(nestSupportersLength > 0, \\\"Must have supporters\\\");\\r\\n\\r\\n        PoolDragonNestInfo storage poolDragonNest = poolDragonNestInfo[_pid];\\r\\n        uint256 _pendingDepFee = poolDragonNest.pendingDepFee;\\r\\n\\r\\n        if (_pendingDepFee > 0) {\\r\\n            poolDragonNest.accDepFeePerShare += _pendingDepFee / nestSupportersLength;\\r\\n            poolDragonNest.pendingDepFee = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * These functions are private function for using contract internal.\\r\\n     * These functions will be used when user stakes new DragonNestSupporter\\r\\n     */\\r\\n    function massUpdatePoolDragonNestsWithNewToken(uint256 _tokenId) private {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            updatePoolDragonNestWithNewToken(pid, _tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updatePoolDragonNestWithNewToken(uint256 _pid, uint256 _tokenId) private {\\r\\n        PoolDragonNestInfo storage _poolDragonNestInfo = poolDragonNestInfo[_pid];\\r\\n        uint256 _pendingDepFee = _poolDragonNestInfo.pendingDepFee;\\r\\n\\r\\n        uint256 accDepFeePerShare = _poolDragonNestInfo.accDepFeePerShare;\\r\\n        if (_pendingDepFee > 0 && nestSupportersLength > 0) {\\r\\n            _poolDragonNestInfo.accDepFeePerShare = accDepFeePerShare + _pendingDepFee / nestSupportersLength;\\r\\n            _poolDragonNestInfo.pendingDepFee = 0;\\r\\n        }\\r\\n        dragonNestInfo[_pid][_tokenId] = accDepFeePerShare;\\r\\n    }\\r\\n\\r\\n    function stakeDragonNest(uint256 tokenId) external nonReentrant {\\r\\n        massUpdatePoolDragonNestsWithNewToken(tokenId);\\r\\n        IERC721 _dragonNest = IERC721(DRAGON_NEST_SUPPORTER);\\r\\n        _dragonNest.safeTransferFrom(msg.sender, address(this), tokenId);\\r\\n        nestSupporters[tokenId] = msg.sender;\\r\\n        nestSupportersLength++;\\r\\n\\r\\n        emit DragonNestStaked(msg.sender, tokenId);\\r\\n    }\\r\\n\\r\\n    function withdrawDragonNest(uint256 tokenId) external nonReentrant {\\r\\n        require(nestSupporters[tokenId] == msg.sender, \\\"Dragon: Forbidden\\\");\\r\\n        nestSupporters[tokenId] = address(0);\\r\\n        _massUpdatePoolDragonNests();\\r\\n        // transfer in for loop? It's Okay. We should do with a few number of pools\\r\\n        uint256 len = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < len; pid++) {\\r\\n            PoolInfo storage pool = poolInfo[pid];\\r\\n            pool.lpToken.safeTransfer(\\r\\n                address(msg.sender),\\r\\n                poolDragonNestInfo[pid].accDepFeePerShare - dragonNestInfo[pid][tokenId]\\r\\n            );\\r\\n            dragonNestInfo[pid][tokenId] = 0;\\r\\n        }\\r\\n\\r\\n        IERC721 _dragonNest = IERC721(DRAGON_NEST_SUPPORTER);\\r\\n        _dragonNest.safeTransferFrom(address(this), msg.sender, tokenId);\\r\\n        nestSupportersLength--;\\r\\n\\r\\n        emit DragonNestWithdrawn(msg.sender, tokenId);\\r\\n    }\\r\\n\\r\\n    // View function to see pending DCAUs on frontend.\\r\\n    function pendingDcauOfDragonNest(uint256 _pid, uint256 _tokenId) external view returns (uint256) {\\r\\n        PoolDragonNestInfo storage poolDragonNest = poolDragonNestInfo[_pid];\\r\\n        uint256 _pendingDepFee = poolDragonNest.pendingDepFee;\\r\\n\\r\\n        uint256 accDepFeePerShare = 0;\\r\\n\\r\\n        if (nestSupportersLength > 0) {\\r\\n            accDepFeePerShare = poolDragonNest.accDepFeePerShare + _pendingDepFee / nestSupportersLength;\\r\\n        } else {\\r\\n            accDepFeePerShare = poolDragonNest.accDepFeePerShare + _pendingDepFee;\\r\\n        }\\r\\n\\r\\n        return accDepFeePerShare - dragonNestInfo[_pid][_tokenId];\\r\\n    }\\r\\n\\r\\n    function stakedAddressForDragonNest(uint256 _tokenId) external view returns (address) {\\r\\n        require(_tokenId <= 25, \\\"token does not exist\\\");\\r\\n        return nestSupporters[_tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function is used for depositing DCAU from market\\r\\n     */\\r\\n    function depositMarketFee(uint256 _pid, uint256 _amount) external nonReentrant {\\r\\n        require(_pid < poolInfo.length, \\\"pool does not exist\\\");\\r\\n        require(address(poolInfo[_pid].lpToken) == DCAU, \\\"Should be DCAU pool\\\");\\r\\n        require(msg.sender == NFT_MARKET, \\\"Available from only market\\\");\\r\\n\\r\\n        IERC20(DCAU).safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n        poolDragonNestInfo[_pid].pendingDepFee += _amount;\\r\\n\\r\\n        emit MarketDCAUDeposited(msg.sender, _pid, _amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xedd52406c850030d75e072e314db0a68f018b683400cd914231bead7f2c1e989\",\"license\":\"MIT\"},\"contracts/interfaces/IDCAU.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IDCAU {\\n    function mint(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x85915cc9c7d380c1234bcde9c7e745e9127a202e96d2484950b10e64d8a63f48\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040526000600955600019600b553480156200001d57600080fd5b506040516200387e3803806200387e83398101604081905262000040916200025f565b620000546200004e620001ee565b620001f2565b600180556001600160a01b0388166200008a5760405162461bcd60e51b815260040162000081906200032b565b60405180910390fd5b6001600160a01b038716620000b35760405162461bcd60e51b815260040162000081906200032b565b6001600160a01b038616620000dc5760405162461bcd60e51b815260040162000081906200032b565b6001600160a01b038516620001055760405162461bcd60e51b815260040162000081906200032b565b428411620001275760405162461bcd60e51b8152600401620000819062000362565b670de0b6b3a7640000831115620001525760405162461bcd60e51b81526004016200008190620002f4565b6001600160a01b0382166200017b5760405162461bcd60e51b815260040162000081906200032b565b6001600160a01b038116620001a45760405162461bcd60e51b815260040162000081906200032b565b6001600160601b0319606098891b811660805296881b871660a05293871b861660c052600a92909255600655841b83166101205290831b821660e05290911b166101005262000399565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200025a57600080fd5b919050565b600080600080600080600080610100898b0312156200027c578384fd5b620002878962000242565b97506200029760208a0162000242565b9650620002a760408a0162000242565b9550620002b760608a0162000242565b94506080890151935060a08901519250620002d560c08a0162000242565b9150620002e560e08a0162000242565b90509295985092959890939650565b60208082526016908201527f656d697373696f6e207261746520746f6f206869676800000000000000000000604082015260600190565b60208082526015908201527f6d7573742062652076616c696420616464726573730000000000000000000000604082015260600190565b60208082526018908201527f6d75737420737461727420696e20746865206675747572650000000000000000604082015260600190565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c61340c6200047260003960008181610de601526119f30152600081816111440152611793015260008181610e8601526111200152600081816116340152611e90015260008181611a170152818161201b015261223e0152600081816105af015281816106c701528181610bca01528181610d0801528181610db901528181610e5701528181610ee701528181611708015281816117dd015281816123990152818161244101526124e8015261340c6000f3fe608060405234801561001057600080fd5b506004361061027e5760003560e01c80638da5cb5b11610156578063c85dad77116100d3578063d963842211610097578063e804223211610071578063e80422321461050c578063f2fde38b1461051f578063f648345f146105325761027e565b8063d9638422146104d3578063e2bbb158146104e6578063e63a6026146104f95761027e565b8063c85dad7714610488578063c9932dee1461049b578063cbd258b5146104a3578063ccbe3c5b146104c3578063d60336c5146104cb5761027e565b8063ad8913c61161011a578063ad8913c61461043f578063ae6b40ba14610447578063b105bf5b1461045a578063b27768d914610462578063bf2695e2146104755761027e565b80638da5cb5b146103e85780638dbb1e3a146103f057806393f1a40b1461040357806396501e6a14610424578063a7174aa61461042c5761027e565b806351eb05a6116101ff5780635b0eacb3116101c3578063715018a61161019d578063715018a6146103c557806378e97925146103cd57806384e82a33146103d55761027e565b80635b0eacb314610397578063630b5ba1146103aa5780636383fd70146103b25761027e565b806351eb05a6146103595780635312ea8e1461036c57806356209b891461037f5780635653df99146103875780635705799e1461038f5761027e565b8063312fc8a011610246578063312fc8a0146103035780633e0a322d1461031657806341a73c421461032b578063436cc3d61461033e578063441a3e70146103465761027e565b8063081e3eda14610283578063150b7a02146102a15780631526fe27146102c157806317caf6f1146102e65780632e51e1bb146102ee575b600080fd5b61028b61053a565b60405161029891906132a4565b60405180910390f35b6102b46102af366004612977565b610540565b6040516102989190612bfc565b6102d46102cf366004612a63565b610550565b60405161029896959493929190612c11565b61028b6105a7565b6102f66105ad565b6040516102989190612b7b565b61028b610311366004612a93565b6105d1565b610329610324366004612a63565b610842565b005b61028b610339366004612b12565b610921565b61028b61093e565b610329610354366004612b12565b61094a565b610329610367366004612a63565b610afd565b61032961037a366004612a63565b610fe3565b61028b611118565b6102f661111e565b6102f6611142565b6103296103a5366004612a63565b611166565b61032961119e565b61028b6103c0366004612b12565b6111c9565b61032961123a565b61028b611285565b6103296103e3366004612ac2565b61128b565b6102f66115c2565b61028b6103fe366004612b12565b6115d1565b610416610411366004612a93565b61160e565b6040516102989291906132ad565b6102f6611632565b6102f661043a366004612a63565b611656565b61028b611698565b610416610455366004612a63565b61169e565b61028b6116b7565b610329610470366004612b12565b6116bd565b610329610483366004612a63565b61186f565b610329610496366004612a63565b611902565b6103296119a6565b6104b66104b136600461295b565b6119dc565b6040516102989190612bf1565b6102f66119f1565b6102f6611a15565b6103296104e1366004612b33565b611a39565b6103296104f4366004612b12565b611c1e565b610329610507366004612a63565b611fdb565b61032961051a366004612a63565b6120f7565b61032961052d36600461295b565b6122ff565b61028b61236d565b60075490565b630a85bd0160e11b949350505050565b6007818154811061056057600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b0390941695509193909261ffff9091169086565b60095481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60075460009083106105fe5760405162461bcd60e51b81526004016105f590612d74565b60405180910390fd5b60006007848154811061062157634e487b7160e01b600052603260045260246000fd5b600091825260208083208784526008825260408085206001600160a01b038916865290925292206003600690920290920190810154600282015491935090421180156106705750600583015415155b801561067e57506000600954115b156108095760006106938460020154426115d1565b905060006009548560010154600654846106ad91906132f3565b6106b791906132f3565b6106c191906132d3565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561071e57600080fd5b505afa158015610732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107569190612a7b565b90506000610765600f846132d3565b90506920d2911c36cdcae00000821061078157600092506107da565b6920d2911c36cdcae000008161079785856132bb565b6107a191906132bb565b11156107da5760006107bd836920d2911c36cdcae00000613312565b905060106107cc82600f6132f3565b6107d691906132d3565b9350505b60058701546107ee8464e8d4a510006132f3565b6107f891906132d3565b61080290866132bb565b9450505050505b6001820154825464e8d4a51000906108229084906132f3565b61082c91906132d3565b6108369190613312565b93505050505b92915050565b61084a61237b565b6001600160a01b031661085b6115c2565b6001600160a01b0316146108815760405162461bcd60e51b81526004016105f59061307e565b600754156108a15760405162461bcd60e51b81526004016105f59061318f565b600a5442106108c25760405162461bcd60e51b81526004016105f590613021565b8042106108e15760405162461bcd60e51b81526004016105f590612ee0565b600a8190556040517f1ff2238e284780b094bb341b41af7e6ce294dee1da3799ae49cd0e29fbe12709906109169083906132a4565b60405180910390a150565b600360209081526000928352604080842090915290825290205481565b670de0b6b3a764000081565b6002600154141561096d5760405162461bcd60e51b81526004016105f590613236565b600260015560075482106109935760405162461bcd60e51b81526004016105f590612d74565b6000600783815481106109b657634e487b7160e01b600052603260045260246000fd5b6000918252602080832086845260088252604080852033865290925292208054600690920290920192508311156109ff5760405162461bcd60e51b81526004016105f5906130b3565b610a0884610afd565b6000816001015464e8d4a5100084600301548460000154610a2991906132f3565b610a3391906132d3565b610a3d9190613312565b90508015610a4f57610a4f338261237f565b8315610a90578154610a62908590613312565b82558254610a7a906001600160a01b03163386612597565b838360050154610a8a9190613312565b60058401555b6003830154825464e8d4a5100091610aa7916132f3565b610ab191906132d3565b6001830155604051859033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56890610aea9088906132a4565b60405180910390a3505060018055505050565b6007548110610b1e5760405162461bcd60e51b81526004016105f590612d74565b600060078281548110610b4157634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201905080600201544211610b625750610fe0565b60058101541580610b7557506001810154155b15610b865742600290910155610fe0565b6000610b968260020154426115d1565b90506000600954836001015460065484610bb091906132f3565b610bba91906132f3565b610bc491906132d3565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2157600080fd5b505afa158015610c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c599190612a7b565b90506000610c68600f846132d3565b90506920d2911c36cdcae000008210610c8657506000915081610ceb565b6920d2911c36cdcae0000081610c9c85856132bb565b610ca691906132bb565b1115610ceb576000610cc2836920d2911c36cdcae00000613312565b90506010610cd182600f6132f3565b610cdb91906132d3565b9350610ce78482613312565b9150505b8215610d72576040516340c10f1960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990610d3f9030908790600401612bb3565b600060405180830381600087803b158015610d5957600080fd5b505af1158015610d6d573d6000803e3d6000fd5b505050505b8015610ee55760006003610d878360016132f3565b610d9191906132d3565b90506000610d9f8284613312565b6040516340c10f1960e01b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990610e10907f0000000000000000000000000000000000000000000000000000000000000000908690600401612bb3565b600060405180830381600087803b158015610e2a57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b50506040516340c10f1960e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692506340c10f199150610eb0907f0000000000000000000000000000000000000000000000000000000000000000908590600401612bb3565b600060405180830381600087803b158015610eca57600080fd5b505af1158015610ede573d6000803e3d6000fd5b5050505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3e57600080fd5b505afa158015610f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f769190612a7b565b91506920d2911c36cdcae000008210158015610f955750600019600b54145b15610f9f5742600b555b6005850154610fb38464e8d4a510006132f3565b610fbd91906132d3565b8560030154610fcc91906132bb565b600386015550504260029093019290925550505b50565b600260015414156110065760405162461bcd60e51b81526004016105f590613236565b6002600155600754811061102c5760405162461bcd60e51b81526004016105f590612d74565b60006007828154811061104f57634e487b7160e01b600052603260045260246000fd5b60009182526020808320858452600882526040808520338087529352842080548582556001820195909555600690930201805490945091929161109f916001600160a01b03919091169083612597565b808360050154106110c4578083600501546110ba9190613312565b60058401556110cc565b600060058401555b83336001600160a01b03167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05958360405161110691906132a4565b60405180910390a35050600180555050565b60055481565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260015414156111895760405162461bcd60e51b81526004016105f590613236565b600260015561119781612607565b5060018055565b60075460005b818110156111c5576111b581610afd565b6111be8161336c565b90506111a4565b5050565b60008281526002602052604081206001810154600554839015611206576005546111f390836132d3565b83546111ff91906132bb565b9050611216565b82546112139083906132bb565b90505b60008681526003602090815260408083208884529091529020546108369082613312565b61124261237b565b6001600160a01b03166112536115c2565b6001600160a01b0316146112795760405162461bcd60e51b81526004016105f59061307e565b6112836000612673565b565b600a5481565b61129361237b565b6001600160a01b03166112a46115c2565b6001600160a01b0316146112ca5760405162461bcd60e51b81526004016105f59061307e565b6001600160a01b0383166000908152600c6020526040902054839060ff16156113055760405162461bcd60e51b81526004016105f590613158565b6007546014116113275760405162461bcd60e51b81526004016105f590612d3d565b6040516370a0823160e01b81526001600160a01b038516906370a0823190611353903090600401612b7b565b60206040518083038186803b15801561136b57600080fd5b505afa15801561137f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a39190612a7b565b506101918361ffff1611156113ca5760405162461bcd60e51b81526004016105f590612c7b565b81156113d8576113d861119e565b6000600a5442116113eb57600a546113ed565b425b9050856009546113fd91906132bb565b6009556001600160a01b038581166000818152600c602090815260408083208054600160ff199091168117909155815160c0810183529485529184018b81529084018681526060850184815261ffff8b81166080880190815260a088018781526007805480890182559881905298517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688600690990298890180546001600160a01b03191691909b161790995593517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68987015591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a860155517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b85015590517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68c8401805461ffff19169190921617905592517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68d909101555461157f9190613312565b7fa69d86e67bfa14ad558a2599f0df3af0dff00c36be738f9118440420f1c270678688876040516115b293929190612bcc565b60405180910390a2505050505050565b6000546001600160a01b031690565b6000600b548311156115e55750600061083c565b600b548211156116045782600b546115fd9190613312565b905061083c565b6115fd8383613312565b60086020908152600092835260408084209091529082529020805460019091015482565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060198211156116795760405162461bcd60e51b81526004016105f59061326d565b506000818152600460205260409020546001600160a01b03165b919050565b600b5481565b6002602052600090815260409020805460019091015482565b60065481565b600260015414156116e05760405162461bcd60e51b81526004016105f590613236565b600260015560075482106117065760405162461bcd60e51b81526004016105f5906130ea565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166007838154811061175157634e487b7160e01b600052603260045260246000fd5b60009182526020909120600690910201546001600160a01b0316146117885760405162461bcd60e51b81526004016105f590612cc0565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146117d05760405162461bcd60e51b81526004016105f590612fa5565b6118056001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330846126c3565b600082815260026020526040812060010180548392906118269084906132bb565b9091555050604051829033907ffb34cb7cc8899e2bac8b63f7a320fa01229cc33929c97ada0e5a61aa0e96275b9061185f9085906132a4565b60405180910390a3505060018055565b61187761237b565b6001600160a01b03166118886115c2565b6001600160a01b0316146118ae5760405162461bcd60e51b81526004016105f59061307e565b4281116118cd5760405162461bcd60e51b81526004016105f590612f21565b600b8190556040517fa10b761a678a8dae9101bf9e96bfa7261fc033eeb4eab101834145e002501b83906109169083906132a4565b61190a61237b565b6001600160a01b031661191b6115c2565b6001600160a01b0316146119415760405162461bcd60e51b81526004016105f59061307e565b670de0b6b3a76400008111156119695760405162461bcd60e51b81526004016105f590612dab565b61197161119e565b60068190556040517f4820a0ec9a3a52f9c9cabd7f18abf7ab028aa95a47535abc448aecea4b9e1edb906109169083906132a4565b600260015414156119c95760405162461bcd60e51b81526004016105f590613236565b60026001556119d66126e4565b60018055565b600c6020526000908152604090205460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b611a4161237b565b6001600160a01b0316611a526115c2565b6001600160a01b031614611a785760405162461bcd60e51b81526004016105f59061307e565b6101918261ffff161115611a9e5760405162461bcd60e51b81526004016105f590612fdc565b6007548410611abf5760405162461bcd60e51b81526004016105f590612d74565b8015611acd57611acd61119e565b8260078581548110611aef57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160010154600954611b0e9190613312565b611b1891906132bb565b6009819055508260078581548110611b4057634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600101819055508160078581548110611b7757634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160040160006101000a81548161ffff021916908361ffff160217905550837f22d010b39cce830b2f23926bfb7551a230dbe713d1f6085480fef4a6ad7a4aaa60078681548110611be557634e487b7160e01b600052603260045260246000fd5b6000918252602090912060069091020154604051611c10916001600160a01b03169087908790612bcc565b60405180910390a250505050565b60026001541415611c415760405162461bcd60e51b81526004016105f590613236565b60026001556007548210611c675760405162461bcd60e51b81526004016105f590612d74565b600060078381548110611c8a57634e487b7160e01b600052603260045260246000fd5b60009182526020808320868452600882526040808520338652909252922060069091029091019150611cbb84610afd565b805415611d0b576000816001015464e8d4a5100084600301548460000154611ce391906132f3565b611ced91906132d3565b611cf79190613312565b90508015611d0957611d09338261237f565b505b8215611f815781546040516370a0823160e01b81526001600160a01b039091169060009082906370a0823190611d45903090600401612b7b565b60206040518083038186803b158015611d5d57600080fd5b505afa158015611d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d959190612a7b565b9050611dac6001600160a01b0383163330886126c3565b6040516370a0823160e01b815281906001600160a01b038416906370a0823190611dda903090600401612b7b565b60206040518083038186803b158015611df257600080fd5b505afa158015611e06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2a9190612a7b565b611e349190613312565b945060008511611e565760405162461bcd60e51b81526004016105f590612e2c565b50600483015461ffff1615611f5a57600483015460009061271090611e7f9061ffff16876132f3565b611e8991906132d3565b9050611ed97f0000000000000000000000000000000000000000000000000000000000000000612710611ebe846123286132f3565b611ec891906132d3565b6001600160a01b0385169190612597565b612710611ee8826103e86132f3565b611ef291906132d3565b60008781526002602052604081206001018054909190611f139084906132bb565b909155505082548190611f279087906132bb565b611f319190613312565b835560058401548190611f459087906132bb565b611f4f9190613312565b600585015550611f7f565b8154611f679085906132bb565b82556005830154611f799085906132bb565b60058401555b505b6003820154815464e8d4a5100091611f98916132f3565b611fa291906132d3565b6001820155604051849033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15906111069087906132a4565b60026001541415611ffe5760405162461bcd60e51b81526004016105f590613236565b600260015561200c8161270b565b604051632142170760e11b81527f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b038216906342842e0e9061205e90339030908790600401612b8f565b600060405180830381600087803b15801561207857600080fd5b505af115801561208c573d6000803e3d6000fd5b505050600083815260046020526040812080546001600160a01b03191633179055600580549250906120bd8361336c565b9091555050604051829033907fb2207c94fe68ae9ff67efed40ab40ef3083631e580a5cc4cdf5c8cb32211614590600090a3505060018055565b6002600154141561211a5760405162461bcd60e51b81526004016105f590613236565b60026001556000818152600460205260409020546001600160a01b031633146121555760405162461bcd60e51b81526004016105f590612df5565b600081815260046020526040902080546001600160a01b03191690556121796126e4565b60075460005b8181101561222e576000600782815481106121aa57634e487b7160e01b600052603260045260246000fd5b60009182526020808320858452600382526040808520898652835280852054878652600290935290932054600690920290920192506122019133916121ef9190613312565b83546001600160a01b03169190612597565b506000818152600360209081526040808320868452909152812055806122268161336c565b91505061217f565b50604051632142170760e11b81527f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b038216906342842e0e9061228190309033908890600401612b8f565b600060405180830381600087803b15801561229b57600080fd5b505af11580156122af573d6000803e3d6000fd5b5050600580549250905060006122c483613355565b9091555050604051839033907f96240986bbd1529d69d4ab20ce2fe2bc98a937e7cd49ad5086e6a47248a2c84790600090a350506001805550565b61230761237b565b6001600160a01b03166123186115c2565b6001600160a01b03161461233e5760405162461bcd60e51b81526004016105f59061307e565b6001600160a01b0381166123645760405162461bcd60e51b81526004016105f590612cf7565b610fe081612673565b6920d2911c36cdcae0000081565b3390565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906123ce903090600401612b7b565b60206040518083038186803b1580156123e657600080fd5b505afa1580156123fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241e9190612a7b565b90506000818311156124d15760405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906124789087908690600401612bb3565b602060405180830381600087803b15801561249257600080fd5b505af11580156124a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ca9190612a47565b9050612574565b60405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb9061251f9087908790600401612bb3565b602060405180830381600087803b15801561253957600080fd5b505af115801561254d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125719190612a47565b90505b806125915760405162461bcd60e51b81526004016105f590612f64565b50505050565b6126028363a9059cbb60e01b84846040516024016125b6929190612bb3565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152612733565b505050565b6000600554116126295760405162461bcd60e51b81526004016105f590612e63565b6000818152600260205260409020600181015480156126025760055461264f90826132d3565b82600001600082825461266291906132bb565b909155505060006001830155505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612591846323b872dd60e01b8585856040516024016125b693929190612b8f565b60075460005b818110156111c5576126fb81612607565b6127048161336c565b90506126ea565b60075460005b818110156126025761272381846127c2565b61272c8161336c565b9050612711565b6000612788826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128319092919063ffffffff16565b80519091501561260257808060200190518101906127a69190612a47565b6126025760405162461bcd60e51b81526004016105f5906131ec565b60008281526002602052604090206001810154815481158015906127e857506000600554115b1561280e576005546127fa90836132d3565b61280490826132bb565b8355600060018401555b600094855260036020908152604080872095875294905292909320919091555050565b6060612840848460008561284a565b90505b9392505050565b60608247101561286c5760405162461bcd60e51b81526004016105f590612e9a565b6128758561290a565b6128915760405162461bcd60e51b81526004016105f590613121565b600080866001600160a01b031685876040516128ad9190612b5f565b60006040518083038185875af1925050503d80600081146128ea576040519150601f19603f3d011682016040523d82523d6000602084013e6128ef565b606091505b50915091506128ff828286612910565b979650505050505050565b3b151590565b6060831561291f575081612843565b82511561292f5782518084602001fd5b8160405162461bcd60e51b81526004016105f59190612c48565b803561ffff8116811461169357600080fd5b60006020828403121561296c578081fd5b8135612843816133b3565b6000806000806080858703121561298c578283fd5b8435612997816133b3565b93506020858101356129a8816133b3565b935060408601359250606086013567ffffffffffffffff808211156129cb578384fd5b818801915088601f8301126129de578384fd5b8135818111156129f0576129f061339d565b604051601f8201601f1916810185018381118282101715612a1357612a1361339d565b60405281815283820185018b1015612a29578586fd5b81858501868301379081019093019390935250939692955090935050565b600060208284031215612a58578081fd5b8151612843816133c8565b600060208284031215612a74578081fd5b5035919050565b600060208284031215612a8c578081fd5b5051919050565b60008060408385031215612aa5578182fd5b823591506020830135612ab7816133b3565b809150509250929050565b60008060008060808587031215612ad7578384fd5b843593506020850135612ae9816133b3565b9250612af760408601612949565b91506060850135612b07816133c8565b939692955090935050565b60008060408385031215612b24578182fd5b50508035926020909101359150565b60008060008060808587031215612b48578384fd5b8435935060208501359250612af760408601612949565b60008251612b71818460208701613329565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03939093168352602083019190915261ffff16604082015260600190565b901515815260200190565b6001600160e01b031991909116815260200190565b6001600160a01b0396909616865260208601949094526040850192909252606084015261ffff16608083015260a082015260c00190565b6000602082528251806020840152612c67816040850160208701613329565b601f01601f19169190910160400192915050565b60208082526025908201527f6164643a20696e76616c6964206465706f7369742066656520626173697320706040820152646f696e747360d81b606082015260800190565b60208082526013908201527f53686f756c64206265204443415520706f6f6c00000000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252600e908201527f746f6f206d616e7920706f6f6c73000000000000000000000000000000000000604082015260600190565b60208082526019908201527f447261676f6e3a204e6f6e2d6578697374656e7420706f6f6c00000000000000604082015260600190565b6020808252602a908201527f656d697373696f6e7320746f6f2068696768206c696d6974656420746f2031206040820152691c195c881cd958dbdb9960b21b606082015260800190565b60208082526011908201527f447261676f6e3a20466f7262696464656e000000000000000000000000000000604082015260600190565b60208082526019908201527f5765206f6e6c792061636365707420616d6f756e74203e203000000000000000604082015260600190565b60208082526014908201527f4d757374206861766520737570706f7274657273000000000000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526021908201527f63616e6e6f74207365742073746172742074696d6520696e20746865207061736040820152601d60fa1b606082015260800190565b60208082526023908201527f456d697373696f6e2063616e206e6f7420626520656e6420696e207468652070604082015262185cdd60ea1b606082015260800190565b60208082526021908201527f73616665446361755472616e736665723a207472616e73666572206661696c656040820152601960fa1b606082015260800190565b6020808252601a908201527f417661696c61626c652066726f6d206f6e6c79206d61726b6574000000000000604082015260600190565b60208082526025908201527f7365743a20696e76616c6964206465706f7369742066656520626173697320706040820152646f696e747360d81b606082015260800190565b60208082526036908201527f63616e6e6f74206368616e67652073746172742074696d652069662073616c6560408201527f2068617320616c726561647920636f6d6d656e63656400000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526012908201527f57697468647261773a206e6f7420676f6f640000000000000000000000000000604082015260600190565b60208082526013908201527f706f6f6c20646f6573206e6f7420657869737400000000000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526019908201527f6e6f6e4475706c6963617465643a206475706c69636174656400000000000000604082015260600190565b60208082526031908201527f6e6f206368616e67696e6720737461727454696d6520616674657220706f6f6c60408201527f732068617665206265656e206164646564000000000000000000000000000000606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526014908201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604082015260600190565b90815260200190565b918252602082015260400190565b600082198211156132ce576132ce613387565b500190565b6000826132ee57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561330d5761330d613387565b500290565b60008282101561332457613324613387565b500390565b60005b8381101561334457818101518382015260200161332c565b838111156125915750506000910152565b60008161336457613364613387565b506000190190565b600060001982141561338057613380613387565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610fe057600080fd5b8015158114610fe057600080fdfea2646970667358221220be6625facec03d54e8fc3a8b50af7f17f794e09705fa5cbb02639a18311cdcbe64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027e5760003560e01c80638da5cb5b11610156578063c85dad77116100d3578063d963842211610097578063e804223211610071578063e80422321461050c578063f2fde38b1461051f578063f648345f146105325761027e565b8063d9638422146104d3578063e2bbb158146104e6578063e63a6026146104f95761027e565b8063c85dad7714610488578063c9932dee1461049b578063cbd258b5146104a3578063ccbe3c5b146104c3578063d60336c5146104cb5761027e565b8063ad8913c61161011a578063ad8913c61461043f578063ae6b40ba14610447578063b105bf5b1461045a578063b27768d914610462578063bf2695e2146104755761027e565b80638da5cb5b146103e85780638dbb1e3a146103f057806393f1a40b1461040357806396501e6a14610424578063a7174aa61461042c5761027e565b806351eb05a6116101ff5780635b0eacb3116101c3578063715018a61161019d578063715018a6146103c557806378e97925146103cd57806384e82a33146103d55761027e565b80635b0eacb314610397578063630b5ba1146103aa5780636383fd70146103b25761027e565b806351eb05a6146103595780635312ea8e1461036c57806356209b891461037f5780635653df99146103875780635705799e1461038f5761027e565b8063312fc8a011610246578063312fc8a0146103035780633e0a322d1461031657806341a73c421461032b578063436cc3d61461033e578063441a3e70146103465761027e565b8063081e3eda14610283578063150b7a02146102a15780631526fe27146102c157806317caf6f1146102e65780632e51e1bb146102ee575b600080fd5b61028b61053a565b60405161029891906132a4565b60405180910390f35b6102b46102af366004612977565b610540565b6040516102989190612bfc565b6102d46102cf366004612a63565b610550565b60405161029896959493929190612c11565b61028b6105a7565b6102f66105ad565b6040516102989190612b7b565b61028b610311366004612a93565b6105d1565b610329610324366004612a63565b610842565b005b61028b610339366004612b12565b610921565b61028b61093e565b610329610354366004612b12565b61094a565b610329610367366004612a63565b610afd565b61032961037a366004612a63565b610fe3565b61028b611118565b6102f661111e565b6102f6611142565b6103296103a5366004612a63565b611166565b61032961119e565b61028b6103c0366004612b12565b6111c9565b61032961123a565b61028b611285565b6103296103e3366004612ac2565b61128b565b6102f66115c2565b61028b6103fe366004612b12565b6115d1565b610416610411366004612a93565b61160e565b6040516102989291906132ad565b6102f6611632565b6102f661043a366004612a63565b611656565b61028b611698565b610416610455366004612a63565b61169e565b61028b6116b7565b610329610470366004612b12565b6116bd565b610329610483366004612a63565b61186f565b610329610496366004612a63565b611902565b6103296119a6565b6104b66104b136600461295b565b6119dc565b6040516102989190612bf1565b6102f66119f1565b6102f6611a15565b6103296104e1366004612b33565b611a39565b6103296104f4366004612b12565b611c1e565b610329610507366004612a63565b611fdb565b61032961051a366004612a63565b6120f7565b61032961052d36600461295b565b6122ff565b61028b61236d565b60075490565b630a85bd0160e11b949350505050565b6007818154811061056057600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b0390941695509193909261ffff9091169086565b60095481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60075460009083106105fe5760405162461bcd60e51b81526004016105f590612d74565b60405180910390fd5b60006007848154811061062157634e487b7160e01b600052603260045260246000fd5b600091825260208083208784526008825260408085206001600160a01b038916865290925292206003600690920290920190810154600282015491935090421180156106705750600583015415155b801561067e57506000600954115b156108095760006106938460020154426115d1565b905060006009548560010154600654846106ad91906132f3565b6106b791906132f3565b6106c191906132d3565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561071e57600080fd5b505afa158015610732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107569190612a7b565b90506000610765600f846132d3565b90506920d2911c36cdcae00000821061078157600092506107da565b6920d2911c36cdcae000008161079785856132bb565b6107a191906132bb565b11156107da5760006107bd836920d2911c36cdcae00000613312565b905060106107cc82600f6132f3565b6107d691906132d3565b9350505b60058701546107ee8464e8d4a510006132f3565b6107f891906132d3565b61080290866132bb565b9450505050505b6001820154825464e8d4a51000906108229084906132f3565b61082c91906132d3565b6108369190613312565b93505050505b92915050565b61084a61237b565b6001600160a01b031661085b6115c2565b6001600160a01b0316146108815760405162461bcd60e51b81526004016105f59061307e565b600754156108a15760405162461bcd60e51b81526004016105f59061318f565b600a5442106108c25760405162461bcd60e51b81526004016105f590613021565b8042106108e15760405162461bcd60e51b81526004016105f590612ee0565b600a8190556040517f1ff2238e284780b094bb341b41af7e6ce294dee1da3799ae49cd0e29fbe12709906109169083906132a4565b60405180910390a150565b600360209081526000928352604080842090915290825290205481565b670de0b6b3a764000081565b6002600154141561096d5760405162461bcd60e51b81526004016105f590613236565b600260015560075482106109935760405162461bcd60e51b81526004016105f590612d74565b6000600783815481106109b657634e487b7160e01b600052603260045260246000fd5b6000918252602080832086845260088252604080852033865290925292208054600690920290920192508311156109ff5760405162461bcd60e51b81526004016105f5906130b3565b610a0884610afd565b6000816001015464e8d4a5100084600301548460000154610a2991906132f3565b610a3391906132d3565b610a3d9190613312565b90508015610a4f57610a4f338261237f565b8315610a90578154610a62908590613312565b82558254610a7a906001600160a01b03163386612597565b838360050154610a8a9190613312565b60058401555b6003830154825464e8d4a5100091610aa7916132f3565b610ab191906132d3565b6001830155604051859033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56890610aea9088906132a4565b60405180910390a3505060018055505050565b6007548110610b1e5760405162461bcd60e51b81526004016105f590612d74565b600060078281548110610b4157634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201905080600201544211610b625750610fe0565b60058101541580610b7557506001810154155b15610b865742600290910155610fe0565b6000610b968260020154426115d1565b90506000600954836001015460065484610bb091906132f3565b610bba91906132f3565b610bc491906132d3565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2157600080fd5b505afa158015610c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c599190612a7b565b90506000610c68600f846132d3565b90506920d2911c36cdcae000008210610c8657506000915081610ceb565b6920d2911c36cdcae0000081610c9c85856132bb565b610ca691906132bb565b1115610ceb576000610cc2836920d2911c36cdcae00000613312565b90506010610cd182600f6132f3565b610cdb91906132d3565b9350610ce78482613312565b9150505b8215610d72576040516340c10f1960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990610d3f9030908790600401612bb3565b600060405180830381600087803b158015610d5957600080fd5b505af1158015610d6d573d6000803e3d6000fd5b505050505b8015610ee55760006003610d878360016132f3565b610d9191906132d3565b90506000610d9f8284613312565b6040516340c10f1960e01b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990610e10907f0000000000000000000000000000000000000000000000000000000000000000908690600401612bb3565b600060405180830381600087803b158015610e2a57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b50506040516340c10f1960e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692506340c10f199150610eb0907f0000000000000000000000000000000000000000000000000000000000000000908590600401612bb3565b600060405180830381600087803b158015610eca57600080fd5b505af1158015610ede573d6000803e3d6000fd5b5050505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3e57600080fd5b505afa158015610f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f769190612a7b565b91506920d2911c36cdcae000008210158015610f955750600019600b54145b15610f9f5742600b555b6005850154610fb38464e8d4a510006132f3565b610fbd91906132d3565b8560030154610fcc91906132bb565b600386015550504260029093019290925550505b50565b600260015414156110065760405162461bcd60e51b81526004016105f590613236565b6002600155600754811061102c5760405162461bcd60e51b81526004016105f590612d74565b60006007828154811061104f57634e487b7160e01b600052603260045260246000fd5b60009182526020808320858452600882526040808520338087529352842080548582556001820195909555600690930201805490945091929161109f916001600160a01b03919091169083612597565b808360050154106110c4578083600501546110ba9190613312565b60058401556110cc565b600060058401555b83336001600160a01b03167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05958360405161110691906132a4565b60405180910390a35050600180555050565b60055481565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260015414156111895760405162461bcd60e51b81526004016105f590613236565b600260015561119781612607565b5060018055565b60075460005b818110156111c5576111b581610afd565b6111be8161336c565b90506111a4565b5050565b60008281526002602052604081206001810154600554839015611206576005546111f390836132d3565b83546111ff91906132bb565b9050611216565b82546112139083906132bb565b90505b60008681526003602090815260408083208884529091529020546108369082613312565b61124261237b565b6001600160a01b03166112536115c2565b6001600160a01b0316146112795760405162461bcd60e51b81526004016105f59061307e565b6112836000612673565b565b600a5481565b61129361237b565b6001600160a01b03166112a46115c2565b6001600160a01b0316146112ca5760405162461bcd60e51b81526004016105f59061307e565b6001600160a01b0383166000908152600c6020526040902054839060ff16156113055760405162461bcd60e51b81526004016105f590613158565b6007546014116113275760405162461bcd60e51b81526004016105f590612d3d565b6040516370a0823160e01b81526001600160a01b038516906370a0823190611353903090600401612b7b565b60206040518083038186803b15801561136b57600080fd5b505afa15801561137f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a39190612a7b565b506101918361ffff1611156113ca5760405162461bcd60e51b81526004016105f590612c7b565b81156113d8576113d861119e565b6000600a5442116113eb57600a546113ed565b425b9050856009546113fd91906132bb565b6009556001600160a01b038581166000818152600c602090815260408083208054600160ff199091168117909155815160c0810183529485529184018b81529084018681526060850184815261ffff8b81166080880190815260a088018781526007805480890182559881905298517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688600690990298890180546001600160a01b03191691909b161790995593517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68987015591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a860155517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b85015590517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68c8401805461ffff19169190921617905592517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68d909101555461157f9190613312565b7fa69d86e67bfa14ad558a2599f0df3af0dff00c36be738f9118440420f1c270678688876040516115b293929190612bcc565b60405180910390a2505050505050565b6000546001600160a01b031690565b6000600b548311156115e55750600061083c565b600b548211156116045782600b546115fd9190613312565b905061083c565b6115fd8383613312565b60086020908152600092835260408084209091529082529020805460019091015482565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060198211156116795760405162461bcd60e51b81526004016105f59061326d565b506000818152600460205260409020546001600160a01b03165b919050565b600b5481565b6002602052600090815260409020805460019091015482565b60065481565b600260015414156116e05760405162461bcd60e51b81526004016105f590613236565b600260015560075482106117065760405162461bcd60e51b81526004016105f5906130ea565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166007838154811061175157634e487b7160e01b600052603260045260246000fd5b60009182526020909120600690910201546001600160a01b0316146117885760405162461bcd60e51b81526004016105f590612cc0565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146117d05760405162461bcd60e51b81526004016105f590612fa5565b6118056001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330846126c3565b600082815260026020526040812060010180548392906118269084906132bb565b9091555050604051829033907ffb34cb7cc8899e2bac8b63f7a320fa01229cc33929c97ada0e5a61aa0e96275b9061185f9085906132a4565b60405180910390a3505060018055565b61187761237b565b6001600160a01b03166118886115c2565b6001600160a01b0316146118ae5760405162461bcd60e51b81526004016105f59061307e565b4281116118cd5760405162461bcd60e51b81526004016105f590612f21565b600b8190556040517fa10b761a678a8dae9101bf9e96bfa7261fc033eeb4eab101834145e002501b83906109169083906132a4565b61190a61237b565b6001600160a01b031661191b6115c2565b6001600160a01b0316146119415760405162461bcd60e51b81526004016105f59061307e565b670de0b6b3a76400008111156119695760405162461bcd60e51b81526004016105f590612dab565b61197161119e565b60068190556040517f4820a0ec9a3a52f9c9cabd7f18abf7ab028aa95a47535abc448aecea4b9e1edb906109169083906132a4565b600260015414156119c95760405162461bcd60e51b81526004016105f590613236565b60026001556119d66126e4565b60018055565b600c6020526000908152604090205460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b611a4161237b565b6001600160a01b0316611a526115c2565b6001600160a01b031614611a785760405162461bcd60e51b81526004016105f59061307e565b6101918261ffff161115611a9e5760405162461bcd60e51b81526004016105f590612fdc565b6007548410611abf5760405162461bcd60e51b81526004016105f590612d74565b8015611acd57611acd61119e565b8260078581548110611aef57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160010154600954611b0e9190613312565b611b1891906132bb565b6009819055508260078581548110611b4057634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600101819055508160078581548110611b7757634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160040160006101000a81548161ffff021916908361ffff160217905550837f22d010b39cce830b2f23926bfb7551a230dbe713d1f6085480fef4a6ad7a4aaa60078681548110611be557634e487b7160e01b600052603260045260246000fd5b6000918252602090912060069091020154604051611c10916001600160a01b03169087908790612bcc565b60405180910390a250505050565b60026001541415611c415760405162461bcd60e51b81526004016105f590613236565b60026001556007548210611c675760405162461bcd60e51b81526004016105f590612d74565b600060078381548110611c8a57634e487b7160e01b600052603260045260246000fd5b60009182526020808320868452600882526040808520338652909252922060069091029091019150611cbb84610afd565b805415611d0b576000816001015464e8d4a5100084600301548460000154611ce391906132f3565b611ced91906132d3565b611cf79190613312565b90508015611d0957611d09338261237f565b505b8215611f815781546040516370a0823160e01b81526001600160a01b039091169060009082906370a0823190611d45903090600401612b7b565b60206040518083038186803b158015611d5d57600080fd5b505afa158015611d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d959190612a7b565b9050611dac6001600160a01b0383163330886126c3565b6040516370a0823160e01b815281906001600160a01b038416906370a0823190611dda903090600401612b7b565b60206040518083038186803b158015611df257600080fd5b505afa158015611e06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2a9190612a7b565b611e349190613312565b945060008511611e565760405162461bcd60e51b81526004016105f590612e2c565b50600483015461ffff1615611f5a57600483015460009061271090611e7f9061ffff16876132f3565b611e8991906132d3565b9050611ed97f0000000000000000000000000000000000000000000000000000000000000000612710611ebe846123286132f3565b611ec891906132d3565b6001600160a01b0385169190612597565b612710611ee8826103e86132f3565b611ef291906132d3565b60008781526002602052604081206001018054909190611f139084906132bb565b909155505082548190611f279087906132bb565b611f319190613312565b835560058401548190611f459087906132bb565b611f4f9190613312565b600585015550611f7f565b8154611f679085906132bb565b82556005830154611f799085906132bb565b60058401555b505b6003820154815464e8d4a5100091611f98916132f3565b611fa291906132d3565b6001820155604051849033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15906111069087906132a4565b60026001541415611ffe5760405162461bcd60e51b81526004016105f590613236565b600260015561200c8161270b565b604051632142170760e11b81527f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b038216906342842e0e9061205e90339030908790600401612b8f565b600060405180830381600087803b15801561207857600080fd5b505af115801561208c573d6000803e3d6000fd5b505050600083815260046020526040812080546001600160a01b03191633179055600580549250906120bd8361336c565b9091555050604051829033907fb2207c94fe68ae9ff67efed40ab40ef3083631e580a5cc4cdf5c8cb32211614590600090a3505060018055565b6002600154141561211a5760405162461bcd60e51b81526004016105f590613236565b60026001556000818152600460205260409020546001600160a01b031633146121555760405162461bcd60e51b81526004016105f590612df5565b600081815260046020526040902080546001600160a01b03191690556121796126e4565b60075460005b8181101561222e576000600782815481106121aa57634e487b7160e01b600052603260045260246000fd5b60009182526020808320858452600382526040808520898652835280852054878652600290935290932054600690920290920192506122019133916121ef9190613312565b83546001600160a01b03169190612597565b506000818152600360209081526040808320868452909152812055806122268161336c565b91505061217f565b50604051632142170760e11b81527f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b038216906342842e0e9061228190309033908890600401612b8f565b600060405180830381600087803b15801561229b57600080fd5b505af11580156122af573d6000803e3d6000fd5b5050600580549250905060006122c483613355565b9091555050604051839033907f96240986bbd1529d69d4ab20ce2fe2bc98a937e7cd49ad5086e6a47248a2c84790600090a350506001805550565b61230761237b565b6001600160a01b03166123186115c2565b6001600160a01b03161461233e5760405162461bcd60e51b81526004016105f59061307e565b6001600160a01b0381166123645760405162461bcd60e51b81526004016105f590612cf7565b610fe081612673565b6920d2911c36cdcae0000081565b3390565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906123ce903090600401612b7b565b60206040518083038186803b1580156123e657600080fd5b505afa1580156123fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241e9190612a7b565b90506000818311156124d15760405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906124789087908690600401612bb3565b602060405180830381600087803b15801561249257600080fd5b505af11580156124a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ca9190612a47565b9050612574565b60405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb9061251f9087908790600401612bb3565b602060405180830381600087803b15801561253957600080fd5b505af115801561254d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125719190612a47565b90505b806125915760405162461bcd60e51b81526004016105f590612f64565b50505050565b6126028363a9059cbb60e01b84846040516024016125b6929190612bb3565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152612733565b505050565b6000600554116126295760405162461bcd60e51b81526004016105f590612e63565b6000818152600260205260409020600181015480156126025760055461264f90826132d3565b82600001600082825461266291906132bb565b909155505060006001830155505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612591846323b872dd60e01b8585856040516024016125b693929190612b8f565b60075460005b818110156111c5576126fb81612607565b6127048161336c565b90506126ea565b60075460005b818110156126025761272381846127c2565b61272c8161336c565b9050612711565b6000612788826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128319092919063ffffffff16565b80519091501561260257808060200190518101906127a69190612a47565b6126025760405162461bcd60e51b81526004016105f5906131ec565b60008281526002602052604090206001810154815481158015906127e857506000600554115b1561280e576005546127fa90836132d3565b61280490826132bb565b8355600060018401555b600094855260036020908152604080872095875294905292909320919091555050565b6060612840848460008561284a565b90505b9392505050565b60608247101561286c5760405162461bcd60e51b81526004016105f590612e9a565b6128758561290a565b6128915760405162461bcd60e51b81526004016105f590613121565b600080866001600160a01b031685876040516128ad9190612b5f565b60006040518083038185875af1925050503d80600081146128ea576040519150601f19603f3d011682016040523d82523d6000602084013e6128ef565b606091505b50915091506128ff828286612910565b979650505050505050565b3b151590565b6060831561291f575081612843565b82511561292f5782518084602001fd5b8160405162461bcd60e51b81526004016105f59190612c48565b803561ffff8116811461169357600080fd5b60006020828403121561296c578081fd5b8135612843816133b3565b6000806000806080858703121561298c578283fd5b8435612997816133b3565b93506020858101356129a8816133b3565b935060408601359250606086013567ffffffffffffffff808211156129cb578384fd5b818801915088601f8301126129de578384fd5b8135818111156129f0576129f061339d565b604051601f8201601f1916810185018381118282101715612a1357612a1361339d565b60405281815283820185018b1015612a29578586fd5b81858501868301379081019093019390935250939692955090935050565b600060208284031215612a58578081fd5b8151612843816133c8565b600060208284031215612a74578081fd5b5035919050565b600060208284031215612a8c578081fd5b5051919050565b60008060408385031215612aa5578182fd5b823591506020830135612ab7816133b3565b809150509250929050565b60008060008060808587031215612ad7578384fd5b843593506020850135612ae9816133b3565b9250612af760408601612949565b91506060850135612b07816133c8565b939692955090935050565b60008060408385031215612b24578182fd5b50508035926020909101359150565b60008060008060808587031215612b48578384fd5b8435935060208501359250612af760408601612949565b60008251612b71818460208701613329565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03939093168352602083019190915261ffff16604082015260600190565b901515815260200190565b6001600160e01b031991909116815260200190565b6001600160a01b0396909616865260208601949094526040850192909252606084015261ffff16608083015260a082015260c00190565b6000602082528251806020840152612c67816040850160208701613329565b601f01601f19169190910160400192915050565b60208082526025908201527f6164643a20696e76616c6964206465706f7369742066656520626173697320706040820152646f696e747360d81b606082015260800190565b60208082526013908201527f53686f756c64206265204443415520706f6f6c00000000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252600e908201527f746f6f206d616e7920706f6f6c73000000000000000000000000000000000000604082015260600190565b60208082526019908201527f447261676f6e3a204e6f6e2d6578697374656e7420706f6f6c00000000000000604082015260600190565b6020808252602a908201527f656d697373696f6e7320746f6f2068696768206c696d6974656420746f2031206040820152691c195c881cd958dbdb9960b21b606082015260800190565b60208082526011908201527f447261676f6e3a20466f7262696464656e000000000000000000000000000000604082015260600190565b60208082526019908201527f5765206f6e6c792061636365707420616d6f756e74203e203000000000000000604082015260600190565b60208082526014908201527f4d757374206861766520737570706f7274657273000000000000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526021908201527f63616e6e6f74207365742073746172742074696d6520696e20746865207061736040820152601d60fa1b606082015260800190565b60208082526023908201527f456d697373696f6e2063616e206e6f7420626520656e6420696e207468652070604082015262185cdd60ea1b606082015260800190565b60208082526021908201527f73616665446361755472616e736665723a207472616e73666572206661696c656040820152601960fa1b606082015260800190565b6020808252601a908201527f417661696c61626c652066726f6d206f6e6c79206d61726b6574000000000000604082015260600190565b60208082526025908201527f7365743a20696e76616c6964206465706f7369742066656520626173697320706040820152646f696e747360d81b606082015260800190565b60208082526036908201527f63616e6e6f74206368616e67652073746172742074696d652069662073616c6560408201527f2068617320616c726561647920636f6d6d656e63656400000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526012908201527f57697468647261773a206e6f7420676f6f640000000000000000000000000000604082015260600190565b60208082526013908201527f706f6f6c20646f6573206e6f7420657869737400000000000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526019908201527f6e6f6e4475706c6963617465643a206475706c69636174656400000000000000604082015260600190565b60208082526031908201527f6e6f206368616e67696e6720737461727454696d6520616674657220706f6f6c60408201527f732068617665206265656e206164646564000000000000000000000000000000606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526014908201527f746f6b656e20646f6573206e6f74206578697374000000000000000000000000604082015260600190565b90815260200190565b918252602082015260400190565b600082198211156132ce576132ce613387565b500190565b6000826132ee57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561330d5761330d613387565b500290565b60008282101561332457613324613387565b500390565b60005b8381101561334457818101518382015260200161332c565b838111156125915750506000910152565b60008161336457613364613387565b506000190190565b600060001982141561338057613380613387565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610fe057600080fd5b8015158114610fe057600080fdfea2646970667358221220be6625facec03d54e8fc3a8b50af7f17f794e09705fa5cbb02639a18311cdcbe64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositMarketFee(uint256,uint256)": {
        "details": "This function is used for depositing DCAU from market"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 206,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6983,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "poolDragonNestInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(PoolDragonNestInfo)6978_storage)"
      },
      {
        "astId": 6989,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "dragonNestInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6993,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "nestSupporters",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6995,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "nestSupportersLength",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7015,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "dcauPerSecond",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7027,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "poolInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(PoolInfo)6973_storage)dyn_storage"
      },
      {
        "astId": 7034,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "userInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)6959_storage))"
      },
      {
        "astId": 7037,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 7039,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "startTime",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 7046,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "emissionEndTime",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 7189,
        "contract": "contracts/MasterChef.sol:MasterChef",
        "label": "poolExistence",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_contract(IERC20)2203,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)6973_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)6973_storage",
        "encoding": "dynamic_array",
        "label": "struct MasterChef.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2203": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)6959_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MasterChef.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)6959_storage"
      },
      "t_mapping(t_contract(IERC20)2203,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)2203",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)6959_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)6959_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(PoolDragonNestInfo)6978_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MasterChef.PoolDragonNestInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolDragonNestInfo)6978_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PoolDragonNestInfo)6978_storage": {
        "encoding": "inplace",
        "label": "struct MasterChef.PoolDragonNestInfo",
        "members": [
          {
            "astId": 6975,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "accDepFeePerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6977,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "pendingDepFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfo)6973_storage": {
        "encoding": "inplace",
        "label": "struct MasterChef.PoolInfo",
        "members": [
          {
            "astId": 6962,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)2203"
          },
          {
            "astId": 6964,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6966,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6968,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "accDCAUPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6970,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "depositFeeBP",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 6972,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "lpSupply",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UserInfo)6959_storage": {
        "encoding": "inplace",
        "label": "struct MasterChef.UserInfo",
        "members": [
          {
            "astId": 6956,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6958,
            "contract": "contracts/MasterChef.sol:MasterChef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}