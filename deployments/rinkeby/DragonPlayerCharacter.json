{
  "address": "0x51be15021045716e9945A24D70A6C90C73Cda88A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_DRAGON_EQUIPMENT",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uriUrl_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_experience",
          "type": "uint256"
        }
      ],
      "name": "AddExperience",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_utility",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "AddUtility",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "Heal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newLevel",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_levelUp",
          "type": "uint256"
        }
      ],
      "name": "LevelUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "attack",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "defense",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "speed",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endurance",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "luck",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "experience",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "crafting",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "gathering",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "magic",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "level",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "currentHealth",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "totalHealth",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "statPointsToSpend",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "created",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isAlive",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct DragonPlayerCharacter.CharacterStats",
          "name": "_stats",
          "type": "tuple"
        }
      ],
      "name": "MintPlayerCharacter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "Resurrect",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_EXP_TO_LEVEL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DRAGON_EQUIPMENT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HEALTH_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "START_EXP",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "START_LEVEL",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "START_STAT_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAT_POINTS_PER_LEVEL",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toAdd",
          "type": "address"
        }
      ],
      "name": "addAuthorized",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "experienceAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "levelIncreased",
          "type": "uint256"
        }
      ],
      "name": "addExperience",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "utilityAddress",
          "type": "address"
        }
      ],
      "name": "addUtility",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "playerId",
          "type": "uint256"
        }
      ],
      "name": "heal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "attack",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defense",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endurance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "crafting",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gathering",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "magic",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rank",
          "type": "uint256"
        }
      ],
      "name": "mintCharacter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toRemove",
          "type": "address"
        }
      ],
      "name": "removeAuthorized",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "playerId",
          "type": "uint256"
        }
      ],
      "name": "resurrect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_equipments",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_utilityAddress",
          "type": "address"
        }
      ],
      "name": "updateEquipment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "playerId",
          "type": "uint256"
        }
      ],
      "name": "viewPlayerEquipment",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "body",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "firstHand",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "secondHand",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "twoHanded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leftRing",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rightRing",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "head",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "neck",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "back",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shoulders",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "arms",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gloves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "legs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "waist",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "utility",
              "type": "uint256"
            }
          ],
          "internalType": "struct DragonPlayerCharacter.CharacterEquipment",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "playerId",
          "type": "uint256"
        }
      ],
      "name": "viewPlayerStats",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "attack",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "defense",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "speed",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endurance",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "luck",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "experience",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "crafting",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "gathering",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "magic",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "level",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "currentHealth",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "totalHealth",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "statPointsToSpend",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "created",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isAlive",
              "type": "bool"
            }
          ],
          "internalType": "struct DragonPlayerCharacter.CharacterStats",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x58693b5a3e5c4cfeaa523073b89f48a4374f7c0e17fe9874dbc8aa0d38c87c5b",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0x51be15021045716e9945A24D70A6C90C73Cda88A",
    "transactionIndex": 0,
    "gasUsed": "5138576",
    "logsBloom": "0x
    "blockHash": "0x3e01efeffcf3c7e990f4f5b783cdcaff9144c5dc82f17c3efb80130fcdf693fa",
    "transactionHash": "0x58693b5a3e5c4cfeaa523073b89f48a4374f7c0e17fe9874dbc8aa0d38c87c5b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9782390,
        "transactionHash": "0x58693b5a3e5c4cfeaa523073b89f48a4374f7c0e17fe9874dbc8aa0d38c87c5b",
        "address": "0x51be15021045716e9945A24D70A6C90C73Cda88A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3e01efeffcf3c7e990f4f5b783cdcaff9144c5dc82f17c3efb80130fcdf693fa"
      }
    ],
    "blockNumber": 9782390,
    "cumulativeGasUsed": "5138576",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA9bf9e879524FDDaB92ccf5D1b85038931dd0Fc0",
    "https://raw.githubusercontent.com/snowwhitedev/dragon-assets/master/character/"
  ],
  "solcInputHash": "e88d7966fa21b1a4dfbac904259f51ae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DRAGON_EQUIPMENT\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uriUrl_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_experience\",\"type\":\"uint256\"}],\"name\":\"AddExperience\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_utility\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddUtility\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"Heal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_levelUp\",\"type\":\"uint256\"}],\"name\":\"LevelUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"attack\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"defense\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"speed\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endurance\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"luck\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"experience\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"crafting\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"gathering\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"magic\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"level\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentHealth\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"totalHealth\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"statPointsToSpend\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAlive\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct DragonPlayerCharacter.CharacterStats\",\"name\":\"_stats\",\"type\":\"tuple\"}],\"name\":\"MintPlayerCharacter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"Resurrect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_EXP_TO_LEVEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DRAGON_EQUIPMENT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEALTH_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_EXP\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_LEVEL\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_STAT_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAT_POINTS_PER_LEVEL\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAdd\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"experienceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelIncreased\",\"type\":\"uint256\"}],\"name\":\"addExperience\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"utilityAddress\",\"type\":\"address\"}],\"name\":\"addUtility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"playerId\",\"type\":\"uint256\"}],\"name\":\"heal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"attack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defense\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endurance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crafting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gathering\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"magic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"}],\"name\":\"mintCharacter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toRemove\",\"type\":\"address\"}],\"name\":\"removeAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"playerId\",\"type\":\"uint256\"}],\"name\":\"resurrect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_equipments\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_utilityAddress\",\"type\":\"address\"}],\"name\":\"updateEquipment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"playerId\",\"type\":\"uint256\"}],\"name\":\"viewPlayerEquipment\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"body\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstHand\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondHand\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"twoHanded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leftRing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rightRing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"neck\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"back\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shoulders\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arms\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gloves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"legs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utility\",\"type\":\"uint256\"}],\"internalType\":\"struct DragonPlayerCharacter.CharacterEquipment\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"playerId\",\"type\":\"uint256\"}],\"name\":\"viewPlayerStats\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"attack\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"defense\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"speed\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endurance\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"luck\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"experience\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"crafting\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"gathering\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"magic\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"level\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentHealth\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"totalHealth\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"statPointsToSpend\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAlive\",\"type\":\"bool\"}],\"internalType\":\"struct DragonPlayerCharacter.CharacterStats\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dragon/DragonPlayerCharacter.sol\":\"DragonPlayerCharacter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/dragon/DragonPlayerCharacter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"../libraries/Authorizable.sol\\\";\\nimport \\\"./interfaces/IDragonEquipment.sol\\\";\\nimport \\\"./interfaces/IDragonEquipmentType.sol\\\";\\n\\ncontract DragonPlayerCharacter is ERC721, Authorizable, ReentrancyGuard, ERC721Holder {\\n    using Counters for Counters.Counter;\\n    Counters.Counter public tokenIds;\\n\\n    uint256 public constant START_STAT_POINTS = 15;\\n    uint256 public constant HEALTH_MULTIPLIER = 100;\\n    uint64 public constant START_LEVEL = 1;\\n    uint64 public constant START_EXP = 0;\\n    uint256 public constant BASE_EXP_TO_LEVEL = 2500;\\n    uint64 public constant STAT_POINTS_PER_LEVEL = 4;\\n\\n    address public immutable DRAGON_EQUIPMENT;\\n    string private _uriUrl;\\n\\n    /**\\n     * Dragon stats\\n     * @dev We think uint64 is enough for displaying stats\\n     */\\n    struct CharacterStats {\\n        uint64 attack;\\n        uint64 defense;\\n        uint64 speed;\\n        uint64 endurance;\\n        uint64 luck;\\n        uint64 experience;\\n        uint64 crafting;\\n        uint64 gathering;\\n        uint64 magic;\\n        uint64 level;\\n        uint64 currentHealth;\\n        uint64 totalHealth;\\n        uint64 statPointsToSpend;\\n        uint256 created;\\n        bool isAlive;\\n    }\\n\\n    // uint8 public override EQUIPMENT_BODY = 1;\\n    // uint8 public override EQUIPMENT_FIRST_HAND = 2;\\n    // uint8 public override EQUIPMENT_SECOND_HAND = 3;\\n    // uint8 public override EQUIPMENT_TWO_HANDS = 4;\\n    // uint8 public override EQUIPMENT_LEFT_RING = 5;\\n    // uint8 public override EQUIPMENT_RIGHT_RING = 6;\\n    // uint8 public override EQUIPMENT_HEAD = 7;\\n    // uint8 public override EQUIPMENT_NECK = 8;\\n    // uint8 public override EQUIPMENT_BACK = 9;\\n    // uint8 public override EQUIPMENT_SHOULDERS = 10;\\n    // uint8 public override EQUIPMENT_ARMS = 11;\\n    // uint8 public override EQUIPMENT_GLOVES = 12;\\n    // uint8 public override EQUIPMENT_LEGS = 13;\\n    // uint8 public override EQUIPMENT_FEET = 14;\\n    // uint8 public override EQUIPMENT_WAIST = 15;\\n    // uint8 public override EQUIPMENT_UTILITY = 16;\\n\\n    struct CharacterEquipment {\\n        uint256 body; // Equipment token ID, should be body type\\n        uint256 firstHand; // Equipment token ID, should be hand1 type\\n        uint256 secondHand; // Equipment token ID, should be hand2 type\\n        uint256 twoHanded; // Equipment token ID, should be both hand type\\n        uint256 leftRing;\\n        uint256 rightRing;\\n        uint256 head;\\n        uint256 neck;\\n        uint256 back;\\n        uint256 shoulders;\\n        uint256 arms;\\n        uint256 gloves;\\n        uint256 legs;\\n        uint256 feet;\\n        uint256 waist;\\n        uint256 utility;\\n    }\\n\\n    mapping(uint256 => CharacterStats) private playerStats; // characterId => Dragon\\n    mapping(uint256 => mapping(uint8 => uint256)) private equippedEquipment; // character => type => equipmentNFT id\\n    mapping(address => bool) private allowedUtilities;\\n\\n    event MintPlayerCharacter(address indexed _creator, uint256 indexed _tokenId, CharacterStats _stats);\\n    event AddUtility(address _utility, address _user);\\n    event Heal(uint256 indexed _tokenId, address _user);\\n    event Resurrect(uint256 indexed _tokenId, address _user);\\n    event AddExperience(uint256 indexed _tokenId, uint256 _experience);\\n    event LevelUp(uint256 indexed _tokenId, uint256 _newLevel, uint256 _levelUp);\\n\\n    constructor(address _DRAGON_EQUIPMENT, string memory uriUrl_) ERC721(\\\"Dragon Player Character\\\", \\\"DPC\\\") {\\n        require(_DRAGON_EQUIPMENT != address(0), \\\"Dragon: ZERO_ADDRESS\\\");\\n        DRAGON_EQUIPMENT = _DRAGON_EQUIPMENT;\\n        _uriUrl = uriUrl_;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return _uriUrl;\\n    }\\n\\n    function mintCharacter(\\n        uint256 attack,\\n        uint256 defense,\\n        uint256 speed,\\n        uint256 endurance,\\n        uint256 crafting,\\n        uint256 gathering,\\n        uint256 magic,\\n        uint256 rank\\n    ) external onlyOwner nonReentrant returns (uint256) {\\n        require(\\n            attack + defense + speed + endurance + crafting + gathering + magic == START_STAT_POINTS,\\n            \\\"Dragon: Invalid stats\\\"\\n        );\\n\\n        uint64 startHealth = uint64(endurance * HEALTH_MULTIPLIER);\\n\\n        uint256 newItemId = tokenIds.current();\\n\\n        playerStats[newItemId] = CharacterStats({\\n            attack: uint64(attack * rank),\\n            defense: uint64(defense * rank),\\n            speed: uint64(speed * rank),\\n            endurance: uint64(endurance * rank),\\n            luck: 0,\\n            experience: START_EXP,\\n            level: START_LEVEL,\\n            totalHealth: startHealth,\\n            currentHealth: startHealth,\\n            statPointsToSpend: 0,\\n            crafting: uint64(crafting * rank),\\n            gathering: uint64(gathering * rank),\\n            magic: uint64(magic * rank),\\n            created: block.timestamp,\\n            isAlive: true\\n        });\\n\\n        _mint(msg.sender, newItemId);\\n        tokenIds.increment();\\n\\n        emit MintPlayerCharacter(msg.sender, newItemId, playerStats[newItemId]);\\n        return newItemId;\\n    }\\n\\n    function addUtility(address utilityAddress) public onlyOwner {\\n        allowedUtilities[utilityAddress] = true;\\n\\n        emit AddUtility(utilityAddress, msg.sender);\\n    }\\n\\n    function heal(uint256 playerId) public onlyAuthorized {\\n        playerStats[playerId].currentHealth = playerStats[playerId].totalHealth;\\n\\n        emit Heal(playerId, msg.sender);\\n    }\\n\\n    function resurrect(uint256 playerId) public onlyAuthorized {\\n        heal(playerId);\\n        playerStats[playerId].isAlive = true;\\n\\n        emit Resurrect(playerId, msg.sender);\\n    }\\n\\n    function viewPlayerStats(uint256 playerId) external view returns (CharacterStats memory) {\\n        return playerStats[playerId];\\n    }\\n\\n    function viewPlayerEquipment(uint256 playerId) external view returns (CharacterEquipment memory) {\\n        IDragonEquipmentType _dgEquipType = IDragonEquipmentType(DRAGON_EQUIPMENT);\\n\\n        return\\n            CharacterEquipment({\\n                body: equippedEquipment[playerId][_dgEquipType.EQUIPMENT_BODY()],\\n                firstHand: equippedEquipment[playerId][_dgEquipType.EQUIPMENT_FIRST_HAND()],\\n                secondHand: equippedEquipment[playerId][_dgEquipType.EQUIPMENT_SECOND_HAND()],\\n                twoHanded: equippedEquipment[playerId][_dgEquipType.EQUIPMENT_TWO_HANDS()],\\n                leftRing: equippedEquipment[playerId][_dgEquipType.EQUIPMENT_LEFT_RING()],\\n                rightRing: equippedEquipment[playerId][_dgEquipType.EQUIPMENT_RIGHT_RING()],\\n                head: equippedEquipment[playerId][_dgEquipType.EQUIPMENT_HEAD()],\\n                neck: equippedEquipment[playerId][_dgEquipType.EQUIPMENT_NECK()],\\n                back: equippedEquipment[playerId][_dgEquipType.EQUIPMENT_BACK()],\\n                shoulders: equippedEquipment[playerId][_dgEquipType.EQUIPMENT_SHOULDERS()],\\n                arms: equippedEquipment[playerId][_dgEquipType.EQUIPMENT_ARMS()],\\n                gloves: equippedEquipment[playerId][_dgEquipType.EQUIPMENT_GLOVES()],\\n                legs: equippedEquipment[playerId][_dgEquipType.EQUIPMENT_LEGS()],\\n                feet: equippedEquipment[playerId][_dgEquipType.EQUIPMENT_FEET()],\\n                waist: equippedEquipment[playerId][_dgEquipType.EQUIPMENT_WAIST()],\\n                utility: equippedEquipment[playerId][_dgEquipType.EQUIPMENT_UTILITY()]\\n            });\\n    }\\n\\n    function addExperience(\\n        uint256 characterId,\\n        uint256 experienceAmount,\\n        uint256 levelIncreased\\n    ) public onlyAuthorized {\\n        CharacterStats storage character = playerStats[characterId];\\n\\n        uint256 experienceToNextLevel = character.level * BASE_EXP_TO_LEVEL;\\n        uint256 newExperience = character.experience + experienceAmount;\\n\\n        if (newExperience >= experienceToNextLevel) {\\n            // lev_cur * BASE_EXP_TO_LEVEL + (lev_cur + 1) * BASE_EXP_TO_LEVEL + ... + (lev_cur + levelIncreased) * BASE_EXP_TO_LEVEL <= newExperience\\n            // <=> BASE_EXP_TO_LEVEL * (levelIncreased + 1) * (2 * lev_cur + levelIncreased) <= 2 * newExperience\\n            // lev_cur * BASE_EXP_TO_LEVEL + (lev_cur + 1) * BASE_EXP_TO_LEVEL + ... + (lev_cur + levelIncreased + 1) * BASE_EXP_TO_LEVEL > newExperience\\n            // <=> BASE_EXP_TO_LEVEL * (levelIncreased + 2) * (2 * lev_cur + levelIncreased + 1) > 2 * newExperience\\n            require(validateLevelUp(character.level, newExperience, levelIncreased), \\\"Dragon: invalid level up\\\");\\n\\n            uint64 experienceLeftOver = uint64(newExperience - experienceToNextLevel);\\n            character.experience = experienceLeftOver;\\n            character.level += uint64(levelIncreased + 1);\\n            character.statPointsToSpend += uint64((levelIncreased + 1) * STAT_POINTS_PER_LEVEL);\\n\\n            emit LevelUp(characterId, character.level, levelIncreased + 1);\\n        } else {\\n            character.experience = uint64(newExperience);\\n        }\\n\\n        emit AddExperience(characterId, experienceAmount);\\n    }\\n\\n    function validateLevelUp(\\n        uint256 _currentLevel,\\n        uint256 _experience,\\n        uint256 _levelIncreased\\n    ) private pure returns (bool) {\\n        uint256 rightSide = 2 * _experience;\\n        uint256 leftSide = BASE_EXP_TO_LEVEL * (_levelIncreased + 1) * (2 * _currentLevel + _levelIncreased);\\n        if (leftSide > rightSide) {\\n            return false;\\n        }\\n        leftSide = BASE_EXP_TO_LEVEL * (_levelIncreased + 2) * (2 * _currentLevel + _levelIncreased + 1);\\n        if (leftSide <= rightSide) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev this function is called only in addEquipment function\\n     */\\n    function equipSlot(\\n        uint256 playerId,\\n        uint256 equippingId,\\n        uint8 slot\\n    ) internal {\\n        // change or add equipment into slot\\n        if (equippingId > 0 && equippingId != equippedEquipment[playerId][slot]) {\\n            if (equippedEquipment[playerId][slot] > 0) {\\n                IERC721(DRAGON_EQUIPMENT).transferFrom(address(this), msg.sender, equippedEquipment[playerId][slot]);\\n            }\\n\\n            IERC721(DRAGON_EQUIPMENT).transferFrom(msg.sender, address(this), equippingId);\\n\\n            equippedEquipment[playerId][slot] = equippingId;\\n            // remove equipment in the slot\\n        } else if (equippedEquipment[playerId][slot] > 0) {\\n            IERC721(DRAGON_EQUIPMENT).transferFrom(address(this), msg.sender, equippedEquipment[playerId][slot]);\\n            equippedEquipment[playerId][slot] = 0;\\n        }\\n    }\\n\\n    function updateEquipment(\\n        uint256 _playerId,\\n        uint256[] calldata _equipments, // should be length 16\\n        address _utilityAddress\\n    ) external nonReentrant {\\n        require(ownerOf(_playerId) == msg.sender, \\\"Dragon: Forbidden\\\");\\n        require(_equipments.length == 16, \\\"Dragon: Equipments should be 16\\\");\\n        require(_validateEquipment(_equipments, _utilityAddress), \\\"Dragon: Invalid item combination\\\");\\n\\n        IDragonEquipmentType _dgEquipType = IDragonEquipmentType(DRAGON_EQUIPMENT);\\n\\n        equipSlot(_playerId, _equipments[0], _dgEquipType.EQUIPMENT_BODY());\\n        equipSlot(_playerId, _equipments[1], _dgEquipType.EQUIPMENT_FIRST_HAND());\\n        equipSlot(_playerId, _equipments[2], _dgEquipType.EQUIPMENT_SECOND_HAND());\\n        equipSlot(_playerId, _equipments[3], _dgEquipType.EQUIPMENT_TWO_HANDS());\\n        equipSlot(_playerId, _equipments[4], _dgEquipType.EQUIPMENT_LEFT_RING());\\n        equipSlot(_playerId, _equipments[5], _dgEquipType.EQUIPMENT_RIGHT_RING());\\n        equipSlot(_playerId, _equipments[6], _dgEquipType.EQUIPMENT_HEAD());\\n        equipSlot(_playerId, _equipments[7], _dgEquipType.EQUIPMENT_NECK());\\n        equipSlot(_playerId, _equipments[8], _dgEquipType.EQUIPMENT_BACK());\\n        equipSlot(_playerId, _equipments[9], _dgEquipType.EQUIPMENT_SHOULDERS());\\n        equipSlot(_playerId, _equipments[10], _dgEquipType.EQUIPMENT_ARMS());\\n        equipSlot(_playerId, _equipments[11], _dgEquipType.EQUIPMENT_GLOVES());\\n        equipSlot(_playerId, _equipments[12], _dgEquipType.EQUIPMENT_LEGS());\\n        equipSlot(_playerId, _equipments[13], _dgEquipType.EQUIPMENT_FEET());\\n        equipSlot(_playerId, _equipments[14], _dgEquipType.EQUIPMENT_WAIST());\\n\\n        // TODO check this logic\\n        if (_equipments[15] > 0 && _equipments[15] != equippedEquipment[_playerId][_dgEquipType.EQUIPMENT_UTILITY()]) {\\n            if (equippedEquipment[_playerId][_dgEquipType.EQUIPMENT_UTILITY()] > 0) {\\n                IERC721(_utilityAddress).transferFrom(\\n                    address(this),\\n                    msg.sender,\\n                    equippedEquipment[_playerId][_dgEquipType.EQUIPMENT_UTILITY()]\\n                );\\n            }\\n\\n            IERC721(_utilityAddress).transferFrom(msg.sender, address(this), _equipments[15]);\\n\\n            equippedEquipment[_playerId][_dgEquipType.EQUIPMENT_UTILITY()] = _equipments[15];\\n        } else if (equippedEquipment[_playerId][_dgEquipType.EQUIPMENT_UTILITY()] > 0) {\\n            IERC721(_utilityAddress).transferFrom(\\n                address(this),\\n                msg.sender,\\n                equippedEquipment[_playerId][_dgEquipType.EQUIPMENT_UTILITY()]\\n            );\\n            equippedEquipment[_playerId][_dgEquipType.EQUIPMENT_UTILITY()] = 0;\\n        }\\n    }\\n\\n    function _validateEquipment(uint256[] calldata _equipments, address _utilityAddress) private view returns (bool) {\\n        IDragonEquipment _dgEquip = IDragonEquipment(DRAGON_EQUIPMENT);\\n        IDragonEquipmentType _dgEquipType = IDragonEquipmentType(DRAGON_EQUIPMENT);\\n\\n        // TODO we should check the case when player hold first handed item in second hand\\n        // Is there item in first hand, too?\\n        // Can item in the first hand be the same to the item in the second hand?\\n        if (\\n            _dgEquip.typeOfItem(_equipments[0]) != _dgEquipType.EQUIPMENT_BODY() ||\\n            _dgEquip.typeOfItem(_equipments[1]) != _dgEquipType.EQUIPMENT_FIRST_HAND() ||\\n            (_dgEquip.typeOfItem(_equipments[2]) != _dgEquipType.EQUIPMENT_FIRST_HAND() &&\\n                _dgEquip.typeOfItem(_equipments[2]) != _dgEquipType.EQUIPMENT_SECOND_HAND()) ||\\n            _dgEquip.typeOfItem(_equipments[3]) != _dgEquipType.EQUIPMENT_TWO_HANDS() ||\\n            _dgEquip.typeOfItem(_equipments[4]) != _dgEquipType.EQUIPMENT_LEFT_RING() ||\\n            _dgEquip.typeOfItem(_equipments[5]) != _dgEquipType.EQUIPMENT_RIGHT_RING() ||\\n            _dgEquip.typeOfItem(_equipments[6]) != _dgEquipType.EQUIPMENT_HEAD() ||\\n            _dgEquip.typeOfItem(_equipments[7]) != _dgEquipType.EQUIPMENT_NECK() ||\\n            _dgEquip.typeOfItem(_equipments[8]) != _dgEquipType.EQUIPMENT_BACK() ||\\n            _dgEquip.typeOfItem(_equipments[9]) != _dgEquipType.EQUIPMENT_SHOULDERS() ||\\n            _dgEquip.typeOfItem(_equipments[10]) != _dgEquipType.EQUIPMENT_ARMS() ||\\n            _dgEquip.typeOfItem(_equipments[11]) != _dgEquipType.EQUIPMENT_GLOVES() ||\\n            _dgEquip.typeOfItem(_equipments[12]) != _dgEquipType.EQUIPMENT_LEGS() ||\\n            _dgEquip.typeOfItem(_equipments[13]) != _dgEquipType.EQUIPMENT_FEET() ||\\n            _dgEquip.typeOfItem(_equipments[14]) != _dgEquipType.EQUIPMENT_WAIST()\\n        ) {\\n            return false;\\n        }\\n\\n        // Both handed item can not be equiped with any one handed weapon\\n        if ((_equipments[1] != 0 || _equipments[2] != 0) && _equipments[3] != 0) {\\n            return false;\\n        }\\n\\n        if (!allowedUtilities[_utilityAddress]) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x3cd38db51b2fb1f500346605291b7559f1b0bbab020963731fa6a30e308ca818\",\"license\":\"MIT\"},\"contracts/dragon/interfaces/IDragonEquipment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of DragonEquipmentType.\\n */\\ninterface IDragonEquipment {\\n    function typeOfItem(uint256 _tokenId) external view returns (uint8);\\n\\n    function damage(uint256 _tokenId, uint256 _damageAmount) external returns (bool);\\n}\\n\",\"keccak256\":\"0xebb072a5dbb769a378fabbe0efbdd45b1c02324fb768131b29878b69f1803a41\",\"license\":\"MIT\"},\"contracts/dragon/interfaces/IDragonEquipmentType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of DragonEquipmentType.\\n */\\ninterface IDragonEquipmentType {\\n    function EQUIPMENT_BODY() external view returns (uint8);\\n\\n    function EQUIPMENT_FIRST_HAND() external view returns (uint8);\\n\\n    function EQUIPMENT_SECOND_HAND() external view returns (uint8);\\n\\n    function EQUIPMENT_TWO_HANDS() external view returns (uint8);\\n\\n    function EQUIPMENT_LEFT_RING() external view returns (uint8);\\n\\n    function EQUIPMENT_RIGHT_RING() external view returns (uint8);\\n\\n    function EQUIPMENT_HEAD() external view returns (uint8);\\n\\n    function EQUIPMENT_NECK() external view returns (uint8);\\n\\n    function EQUIPMENT_BACK() external view returns (uint8);\\n\\n    function EQUIPMENT_SHOULDERS() external view returns (uint8);\\n\\n    function EQUIPMENT_ARMS() external view returns (uint8);\\n\\n    function EQUIPMENT_GLOVES() external view returns (uint8);\\n\\n    function EQUIPMENT_LEGS() external view returns (uint8);\\n\\n    function EQUIPMENT_FEET() external view returns (uint8);\\n\\n    function EQUIPMENT_WAIST() external view returns (uint8);\\n\\n    function EQUIPMENT_UTILITY() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6f6426ce03bafb519eb88cd2db4fdd55f608340123b871dac6d8bddec1d32a63\",\"license\":\"MIT\"},\"contracts/libraries/Authorizable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Authorizable is Ownable {\\n    mapping(address => bool) public authorized;\\n\\n    modifier onlyAuthorized() {\\n        require(authorized[msg.sender] || owner() == msg.sender);\\n        _;\\n    }\\n\\n    function addAuthorized(address toAdd) public onlyOwner {\\n        authorized[toAdd] = true;\\n    }\\n\\n    function removeAuthorized(address toRemove) public onlyOwner {\\n        require(toRemove != msg.sender);\\n        authorized[toRemove] = false;\\n    }\\n}\\n\",\"keccak256\":\"0xb729da05b364f2ccadc2d585250fe1458a08a9579956b747214869fff4d83efc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162005c7538038062005c7583398101604081905262000034916200022a565b604080518082018252601781527f447261676f6e20506c617965722043686172616374657200000000000000000060208083019182528351808501909452600384526244504360e81b908401528151919291620000949160009162000184565b508051620000aa90600190602084019062000184565b505050620000c7620000c16200012e60201b60201c565b62000132565b60016008556001600160a01b038216620000fe5760405162461bcd60e51b8152600401620000f5906200031c565b60405180910390fd5b6001600160601b0319606083901b1660805280516200012590600a90602084019062000184565b505050620003a6565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001929062000353565b90600052602060002090601f016020900481019282620001b6576000855562000201565b82601f10620001d157805160ff191683800117855562000201565b8280016001018555821562000201579182015b8281111562000201578251825591602001919060010190620001e4565b506200020f92915062000213565b5090565b5b808211156200020f576000815560010162000214565b600080604083850312156200023d578182fd5b82516001600160a01b038116811462000254578283fd5b602084810151919350906001600160401b038082111562000273578384fd5b818601915086601f83011262000287578384fd5b8151818111156200029c576200029c62000390565b604051601f8201601f1916810185018381118282101715620002c257620002c262000390565b6040528181528382018501891015620002d9578586fd5b8592505b81831015620002fc5783830185015181840186015291840191620002dd565b818311156200030d57858583830101525b80955050505050509250929050565b60208082526014908201527f447261676f6e3a205a45524f5f41444452455353000000000000000000000000604082015260600190565b6002810460018216806200036857607f821691505b602082108114156200038a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160601c61587f620003f66000396000818161068d015281816109930152818161195d01528181612f9b01528181612fc001528181614370015281816143f201526144d8015261587f6000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80636352211e11610125578063b88d4fde116100ad578063cfda93b51161007c578063cfda93b51461045b578063e51692071461047b578063e985e9c514610483578063f2fde38b14610496578063f37ac61c146104a95761021c565b8063b88d4fde1461040f578063b918161114610422578063c87b56dd14610435578063cf1c316a146104485761021c565b8063811c2bab116100f4578063811c2bab146103d15780638cacd7a3146103e45780638da5cb5b146103ec57806395d89b41146103f4578063a22cb465146103fc5761021c565b80636352211e1461039b57806370a08231146103ae578063714cff56146103c1578063715018a6146103c95761021c565b80632a655215116101a857806347c8e7b21161017757806347c8e7b214610347578063485d7d941461035a578063504883611461036d57806358a3e5e41461037557806360bd9b5f146103885761021c565b80632a655215146102f75780633c31fbff1461030c5780633d9323081461032c57806342842e0e146103345761021c565b8063150b7a02116101ef578063150b7a02146102945780631a045a6a146102b457806321b8dc19146102bc57806323b872dd146102d157806327cba502146102e45761021c565b806301ffc9a71461022157806306fdde031461024a578063081812fc1461025f578063095ea7b31461027f575b600080fd5b61023461022f366004614b0d565b6104bc565b6040516102419190614d82565b60405180910390f35b610252610504565b6040516102419190614da2565b61027261026d366004614b45565b610596565b6040516102419190614cf4565b61029261028d366004614ae4565b6105e2565b005b6102a76102a23660046149df565b61067a565b6040516102419190614d8d565b61027261068b565b6102c46106af565b604051610241919061568f565b6102926102df3660046149a4565b6106b4565b6102926102f2366004614be6565b6106ec565b6102ff610982565b6040516102419190615698565b61031f61031a366004614b45565b610987565b6040516102419190615388565b6102c46113c3565b6102926103423660046149a4565b6113c8565b6102c4610355366004614c11565b6113e3565b610292610368366004614958565b6117a1565b6102c4611817565b610292610383366004614958565b61181d565b610292610396366004614b5d565b6118bc565b6102726103a9366004614b45565b6125d7565b6102c46103bc366004614958565b61260c565b6102c4612650565b610292612656565b6102926103df366004614b45565b6126a1565b6102ff612739565b61027261273e565b61025261274d565b61029261040a366004614aaa565b61275c565b61029261041d3660046149df565b61282a565b610234610430366004614958565b612869565b610252610443366004614b45565b61287e565b610292610456366004614958565b612901565b61046e610469366004614b45565b612964565b6040516102419190615434565b6102ff612a50565b610234610491366004614972565b612a55565b6102926104a4366004614958565b612a83565b6102926104b7366004614b45565b612af4565b60006001600160e01b031982166380ac58cd60e01b14806104ed57506001600160e01b03198216635b5e139f60e01b145b806104fc57506104fc82612b98565b90505b919050565b60606000805461051390615781565b80601f016020809104026020016040519081016040528092919081815260200182805461053f90615781565b801561058c5780601f106105615761010080835404028352916020019161058c565b820191906000526020600020905b81548152906001019060200180831161056f57829003601f168201915b5050505050905090565b60006105a182612bb1565b6105c65760405162461bcd60e51b81526004016105bd906150e9565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006105ed826125d7565b9050806001600160a01b0316836001600160a01b031614156106215760405162461bcd60e51b81526004016105bd90615210565b806001600160a01b0316610633612bce565b6001600160a01b0316148061064f575061064f81610491612bce565b61066b5760405162461bcd60e51b81526004016105bd90614fc4565b6106758383612bd2565b505050565b630a85bd0160e11b5b949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600f81565b6106c56106bf612bce565b82612c40565b6106e15760405162461bcd60e51b81526004016105bd90615251565b610675838383612cbd565b3360009081526007602052604090205460ff168061071957503361070e61273e565b6001600160a01b0316145b61072257600080fd5b6000838152600b602052604081206002810154909190610755906109c490600160401b90046001600160401b0316615713565b600183015490915060009061077b908690600160401b90046001600160401b03166156c5565b90508181106109155760028301546107a490600160401b90046001600160401b03168286612dea565b6107c05760405162461bcd60e51b81526004016105bd906152ae565b60006107cc8383615732565b600185810180546fffffffffffffffff00000000000000001916600160401b6001600160401b038516021790559091506108079086906156c5565b60028501805460089061082b908490600160401b90046001600160401b03166156dd565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555060046001600160401b031685600161086791906156c5565b6108719190615713565b60038501805460009061088e9084906001600160401b03166156dd565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550867f66833f6d7d7a01eaed9fb21eb9cc54f0fb9497fa9251a6c0773372c8d3e0aa0c8560020160089054906101000a90046001600160401b03168760016108f991906156c5565b6040516109079291906156ac565b60405180910390a250610942565b6001830180546fffffffffffffffff00000000000000001916600160401b6001600160401b038416021790555b857f948a480723fa62be48bb9c30d90b832e0831dda14afa5e7fd94362f894dd0e0086604051610972919061568f565b60405180910390a2505050505050565b600481565b61098f614848565b60007f00000000000000000000000000000000000000000000000000000000000000009050604051806102000160405280600c60008681526020019081526020016000206000846001600160a01b031663168283056040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0e57600080fd5b505afa158015610a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a469190614c65565b60ff1660ff168152602001908152602001600020548152602001600c60008681526020019081526020016000206000846001600160a01b03166327512c656040518163ffffffff1660e01b815260040160206040518083038186803b158015610aae57600080fd5b505afa158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae69190614c65565b60ff1660ff168152602001908152602001600020548152602001600c60008681526020019081526020016000206000846001600160a01b03166396b089ff6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b4e57600080fd5b505afa158015610b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b869190614c65565b60ff1660ff168152602001908152602001600020548152602001600c60008681526020019081526020016000206000846001600160a01b03166361e095b16040518163ffffffff1660e01b815260040160206040518083038186803b158015610bee57600080fd5b505afa158015610c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c269190614c65565b60ff1660ff168152602001908152602001600020548152602001600c60008681526020019081526020016000206000846001600160a01b031663b46886da6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8e57600080fd5b505afa158015610ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc69190614c65565b60ff1660ff168152602001908152602001600020548152602001600c60008681526020019081526020016000206000846001600160a01b03166354b9e50e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2e57600080fd5b505afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d669190614c65565b60ff1660ff168152602001908152602001600020548152602001600c60008681526020019081526020016000206000846001600160a01b0316639614a1ef6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dce57600080fd5b505afa158015610de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e069190614c65565b60ff1660ff168152602001908152602001600020548152602001600c60008681526020019081526020016000206000846001600160a01b03166309a8b0606040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6e57600080fd5b505afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea69190614c65565b60ff1660ff168152602001908152602001600020548152602001600c60008681526020019081526020016000206000846001600160a01b031663ebc8a1826040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0e57600080fd5b505afa158015610f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f469190614c65565b60ff1660ff168152602001908152602001600020548152602001600c60008681526020019081526020016000206000846001600160a01b0316635a4cd56b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fae57600080fd5b505afa158015610fc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe69190614c65565b60ff1660ff168152602001908152602001600020548152602001600c60008681526020019081526020016000206000846001600160a01b031663c365088a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561104e57600080fd5b505afa158015611062573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110869190614c65565b60ff1660ff168152602001908152602001600020548152602001600c60008681526020019081526020016000206000846001600160a01b0316630e9842566040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ee57600080fd5b505afa158015611102573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111269190614c65565b60ff1660ff168152602001908152602001600020548152602001600c60008681526020019081526020016000206000846001600160a01b0316634498e6f16040518163ffffffff1660e01b815260040160206040518083038186803b15801561118e57600080fd5b505afa1580156111a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c69190614c65565b60ff1660ff168152602001908152602001600020548152602001600c60008681526020019081526020016000206000846001600160a01b0316634c3decd16040518163ffffffff1660e01b815260040160206040518083038186803b15801561122e57600080fd5b505afa158015611242573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112669190614c65565b60ff1660ff168152602001908152602001600020548152602001600c60008681526020019081526020016000206000846001600160a01b031663fa80555f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112ce57600080fd5b505afa1580156112e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113069190614c65565b60ff1660ff168152602001908152602001600020548152602001600c60008681526020019081526020016000206000846001600160a01b031663962b5dab6040518163ffffffff1660e01b815260040160206040518083038186803b15801561136e57600080fd5b505afa158015611382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a69190614c65565b60ff16815260208101919091526040016000205490529392505050565b606481565b6106758383836040518060200160405280600081525061282a565b60006113ed612bce565b6001600160a01b03166113fe61273e565b6001600160a01b0316146114245760405162461bcd60e51b81526004016105bd90615135565b600260085414156114475760405162461bcd60e51b81526004016105bd90615351565b6002600881905550600f838587898b8d8f61146291906156c5565b61146c91906156c5565b61147691906156c5565b61148091906156c5565b61148a91906156c5565b61149491906156c5565b146114b15760405162461bcd60e51b81526004016105bd9061531a565b60006114be606488615713565b905060006114cc6009612eaa565b9050604051806101e00160405280858d6114e69190615713565b6001600160401b031681526020016114fe868d615713565b6001600160401b03168152602001611516868c615713565b6001600160401b0316815260200161152e868b615713565b6001600160401b031681526000602082018190526040820152606001611554868a615713565b6001600160401b0316815260200161156c8689615713565b6001600160401b031681526020016115848688615713565b6001600160401b039081168252600160208084018290528683166040808601829052606080870192909252600060808088018290524260a0808a019190915260c09889018790528a8352600b86529183902089518154968b0151948b0151958b01518916600160c01b90810277ffffffffffffffffffffffffffffffffffffffffffffffff978b16600160801b90810267ffffffffffffffff60801b19988d16600160401b9081026fffffffffffffffff000000000000000019968f1667ffffffffffffffff199d8e16178716178a16919091178a16929092178555948d01519984018054968e01519c8e015160e08f01518d168402908d1687029d8d1683029b8d16978b169790971784169a909a1787169b909b178716949094179097556101008a01516002820180546101208d01516101408e01516101608f01518d16909702968c16909502948b16909b02918a169a88169a909a179097169690961790921691909117909116179093556101808401516003820180549190931693169290921790556101a082015160048201556101c0909101516005909101805491151560ff1990921691909117905561173b3382612eae565b6117456009612f8d565b6000818152600b6020526040908190209051829133917fc365c20c64a21d6f45de677c2f5bbb12b4fb8eb9e556ae11f356a005bfd9f29d916117869161555c565b60405180910390a360016008559a9950505050505050505050565b6117a9612bce565b6001600160a01b03166117ba61273e565b6001600160a01b0316146117e05760405162461bcd60e51b81526004016105bd90615135565b6001600160a01b0381163314156117f657600080fd5b6001600160a01b03166000908152600760205260409020805460ff19169055565b6109c481565b611825612bce565b6001600160a01b031661183661273e565b6001600160a01b03161461185c5760405162461bcd60e51b81526004016105bd90615135565b6001600160a01b0381166000908152600d602052604090819020805460ff19166001179055517fdcbf03e9538607ebdece509168b393c902176d713a044db7798d8bed9704f523906118b19083903390614d08565b60405180910390a150565b600260085414156118df5760405162461bcd60e51b81526004016105bd90615351565b6002600855336118ee856125d7565b6001600160a01b0316146119145760405162461bcd60e51b81526004016105bd90614f41565b601082146119345760405162461bcd60e51b81526004016105bd90614db5565b61193f838383612f96565b61195b5760405162461bcd60e51b81526004016105bd906152e5565b7f0000000000000000000000000000000000000000000000000000000000000000611a1c85858560008161199f57634e487b7160e01b600052603260045260246000fd5b90506020020135836001600160a01b031663168283056040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b505afa1580156119f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a179190614c65565b6142e8565b611a818585856001818110611a4157634e487b7160e01b600052603260045260246000fd5b90506020020135836001600160a01b03166327512c656040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b611ae68585856002818110611aa657634e487b7160e01b600052603260045260246000fd5b90506020020135836001600160a01b03166396b089ff6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b611b4b8585856003818110611b0b57634e487b7160e01b600052603260045260246000fd5b90506020020135836001600160a01b03166361e095b16040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b611bb08585856004818110611b7057634e487b7160e01b600052603260045260246000fd5b90506020020135836001600160a01b031663b46886da6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b611c158585856005818110611bd557634e487b7160e01b600052603260045260246000fd5b90506020020135836001600160a01b03166354b9e50e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b611c7a8585856006818110611c3a57634e487b7160e01b600052603260045260246000fd5b90506020020135836001600160a01b0316639614a1ef6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b611cdf8585856007818110611c9f57634e487b7160e01b600052603260045260246000fd5b90506020020135836001600160a01b03166309a8b0606040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b611d448585856008818110611d0457634e487b7160e01b600052603260045260246000fd5b90506020020135836001600160a01b031663ebc8a1826040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b611da98585856009818110611d6957634e487b7160e01b600052603260045260246000fd5b90506020020135836001600160a01b0316635a4cd56b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b611e0e858585600a818110611dce57634e487b7160e01b600052603260045260246000fd5b90506020020135836001600160a01b031663c365088a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b611e73858585600b818110611e3357634e487b7160e01b600052603260045260246000fd5b90506020020135836001600160a01b0316630e9842566040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b611ed8858585600c818110611e9857634e487b7160e01b600052603260045260246000fd5b90506020020135836001600160a01b0316634498e6f16040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b611f3d858585600d818110611efd57634e487b7160e01b600052603260045260246000fd5b90506020020135836001600160a01b0316634c3decd16040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b611fa2858585600e818110611f6257634e487b7160e01b600052603260045260246000fd5b90506020020135836001600160a01b031663fa80555f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b60008484600f818110611fc557634e487b7160e01b600052603260045260246000fd5b9050602002013511801561209a5750600c60008681526020019081526020016000206000826001600160a01b031663962b5dab6040518163ffffffff1660e01b815260040160206040518083038186803b15801561202257600080fd5b505afa158015612036573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205a9190614c65565b60ff1660ff168152602001908152602001600020548484600f81811061209057634e487b7160e01b600052603260045260246000fd5b9050602002013514155b1561238f576000600c60008781526020019081526020016000206000836001600160a01b031663962b5dab6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120ef57600080fd5b505afa158015612103573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121279190614c65565b60ff1660ff16815260200190815260200160002054111561223f57816001600160a01b03166323b872dd3033600c60008a81526020019081526020016000206000866001600160a01b031663962b5dab6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121a157600080fd5b505afa1580156121b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d99190614c65565b60ff1660ff168152602001908152602001600020546040518463ffffffff1660e01b815260040161220c93929190614d22565b600060405180830381600087803b15801561222657600080fd5b505af115801561223a573d6000803e3d6000fd5b505050505b816001600160a01b03166323b872dd33308787600f81811061227157634e487b7160e01b600052603260045260246000fd5b905060200201356040518463ffffffff1660e01b815260040161229693929190614d22565b600060405180830381600087803b1580156122b057600080fd5b505af11580156122c4573d6000803e3d6000fd5b505050508383600f8181106122e957634e487b7160e01b600052603260045260246000fd5b90506020020135600c60008781526020019081526020016000206000836001600160a01b031663962b5dab6040518163ffffffff1660e01b815260040160206040518083038186803b15801561233e57600080fd5b505afa158015612352573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123769190614c65565b60ff1681526020810191909152604001600020556125cb565b6000600c60008781526020019081526020016000206000836001600160a01b031663962b5dab6040518163ffffffff1660e01b815260040160206040518083038186803b1580156123df57600080fd5b505afa1580156123f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124179190614c65565b60ff1660ff1681526020019081526020016000205411156125cb57816001600160a01b03166323b872dd3033600c60008a81526020019081526020016000206000866001600160a01b031663962b5dab6040518163ffffffff1660e01b815260040160206040518083038186803b15801561249157600080fd5b505afa1580156124a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c99190614c65565b60ff1660ff168152602001908152602001600020546040518463ffffffff1660e01b81526004016124fc93929190614d22565b600060405180830381600087803b15801561251657600080fd5b505af115801561252a573d6000803e3d6000fd5b505050506000600c60008781526020019081526020016000206000836001600160a01b031663962b5dab6040518163ffffffff1660e01b815260040160206040518083038186803b15801561257e57600080fd5b505afa158015612592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b69190614c65565b60ff1681526020810191909152604001600020555b50506001600855505050565b6000818152600260205260408120546001600160a01b0316806104fc5760405162461bcd60e51b81526004016105bd9061506b565b60006001600160a01b0382166126345760405162461bcd60e51b81526004016105bd90615021565b506001600160a01b031660009081526003602052604090205490565b60095481565b61265e612bce565b6001600160a01b031661266f61273e565b6001600160a01b0316146126955760405162461bcd60e51b81526004016105bd90615135565b61269f6000614564565b565b3360009081526007602052604090205460ff16806126ce5750336126c361273e565b6001600160a01b0316145b6126d757600080fd5b6126e081612af4565b6000818152600b602052604090819020600501805460ff191660011790555181907fbcd5b3e9d5cb283f2070b3d22a09e0b6099b78b42026d22ee450768fb87811929061272e903390614cf4565b60405180910390a250565b600181565b6006546001600160a01b031690565b60606001805461051390615781565b612764612bce565b6001600160a01b0316826001600160a01b031614156127955760405162461bcd60e51b81526004016105bd90614f0a565b80600560006127a2612bce565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556127e6612bce565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161281e9190614d82565b60405180910390a35050565b61283b612835612bce565b83612c40565b6128575760405162461bcd60e51b81526004016105bd90615251565b612863848484846145b6565b50505050565b60076020526000908152604090205460ff1681565b606061288982612bb1565b6128a55760405162461bcd60e51b81526004016105bd906151b3565b60006128af6145e9565b905060008151116128cf57604051806020016040528060008152506128fa565b806128d9846145f8565b6040516020016128ea929190614cc5565b6040516020818303038152906040525b9392505050565b612909612bce565b6001600160a01b031661291a61273e565b6001600160a01b0316146129405760405162461bcd60e51b81526004016105bd90615135565b6001600160a01b03166000908152600760205260409020805460ff19166001179055565b61296c6148c5565b506000908152600b602090815260409182902082516101e08101845281546001600160401b038082168352600160401b808304821695840195909552600160801b808304821696840196909652600160c01b918290048116606084015260018401548082166080850152858104821660a0850152868104821660c0850152829004811660e08401526002840154808216610100850152948504811661012084015294840485166101408301529092048316610160830152600381015490921661018082015260048201546101a082015260059091015460ff1615156101c082015290565b600081565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b612a8b612bce565b6001600160a01b0316612a9c61273e565b6001600160a01b031614612ac25760405162461bcd60e51b81526004016105bd90615135565b6001600160a01b038116612ae85760405162461bcd60e51b81526004016105bd90614e49565b612af181614564565b50565b3360009081526007602052604090205460ff1680612b21575033612b1661273e565b6001600160a01b0316145b612b2a57600080fd5b6000818152600b6020526040908190206002018054600160801b6001600160401b03600160c01b8304160267ffffffffffffffff60801b199091161790555181907f4693c2d11ec194a80bfc0dd946b2e0a341c6a027a7c846eb2e7e928cbc22c8689061272e903390614cf4565b6001600160e01b031981166301ffc9a760e01b14919050565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612c07826125d7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000612c4b82612bb1565b612c675760405162461bcd60e51b81526004016105bd90614f78565b6000612c72836125d7565b9050806001600160a01b0316846001600160a01b03161480612cad5750836001600160a01b0316612ca284610596565b6001600160a01b0316145b8061068357506106838185612a55565b826001600160a01b0316612cd0826125d7565b6001600160a01b031614612cf65760405162461bcd60e51b81526004016105bd9061516a565b6001600160a01b038216612d1c5760405162461bcd60e51b81526004016105bd90614ec6565b612d27838383610675565b612d32600082612bd2565b6001600160a01b0383166000908152600360205260408120805460019290612d5b908490615732565b90915550506001600160a01b0382166000908152600360205260408120805460019290612d899084906156c5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600080612df8846002615713565b9050600083612e08876002615713565b612e1291906156c5565b612e1d8560016156c5565b612e29906109c4615713565b612e339190615713565b905081811115612e48576000925050506128fa565b83612e54876002615713565b612e5e91906156c5565b612e699060016156c5565b612e748560026156c5565b612e80906109c4615713565b612e8a9190615713565b9050818111612e9e576000925050506128fa565b50600195945050505050565b5490565b6001600160a01b038216612ed45760405162461bcd60e51b81526004016105bd906150b4565b612edd81612bb1565b15612efa5760405162461bcd60e51b81526004016105bd90614e8f565b612f0660008383610675565b6001600160a01b0382166000908152600360205260408120805460019290612f2f9084906156c5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80546001019055565b6000807f0000000000000000000000000000000000000000000000000000000000000000905060007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b031663168283056040518163ffffffff1660e01b815260040160206040518083038186803b15801561301a57600080fd5b505afa15801561302e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130529190614c65565b60ff16826001600160a01b0316639c4d7ad88888600081811061308557634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b81526004016130a8919061568f565b60206040518083038186803b1580156130c057600080fd5b505afa1580156130d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f89190614c65565b60ff161415806132205750806001600160a01b03166327512c656040518163ffffffff1660e01b815260040160206040518083038186803b15801561313c57600080fd5b505afa158015613150573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131749190614c65565b60ff16826001600160a01b0316639c4d7ad8888860018181106131a757634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b81526004016131ca919061568f565b60206040518083038186803b1580156131e257600080fd5b505afa1580156131f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321a9190614c65565b60ff1614155b806134665750806001600160a01b03166327512c656040518163ffffffff1660e01b815260040160206040518083038186803b15801561325f57600080fd5b505afa158015613273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132979190614c65565b60ff16826001600160a01b0316639c4d7ad8888860028181106132ca57634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b81526004016132ed919061568f565b60206040518083038186803b15801561330557600080fd5b505afa158015613319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333d9190614c65565b60ff16141580156134665750806001600160a01b03166396b089ff6040518163ffffffff1660e01b815260040160206040518083038186803b15801561338257600080fd5b505afa158015613396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ba9190614c65565b60ff16826001600160a01b0316639c4d7ad8888860028181106133ed57634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401613410919061568f565b60206040518083038186803b15801561342857600080fd5b505afa15801561343c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134609190614c65565b60ff1614155b806135895750806001600160a01b03166361e095b16040518163ffffffff1660e01b815260040160206040518083038186803b1580156134a557600080fd5b505afa1580156134b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134dd9190614c65565b60ff16826001600160a01b0316639c4d7ad88888600381811061351057634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401613533919061568f565b60206040518083038186803b15801561354b57600080fd5b505afa15801561355f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135839190614c65565b60ff1614155b806136ac5750806001600160a01b031663b46886da6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135c857600080fd5b505afa1580156135dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136009190614c65565b60ff16826001600160a01b0316639c4d7ad88888600481811061363357634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401613656919061568f565b60206040518083038186803b15801561366e57600080fd5b505afa158015613682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136a69190614c65565b60ff1614155b806137cf5750806001600160a01b03166354b9e50e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156136eb57600080fd5b505afa1580156136ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137239190614c65565b60ff16826001600160a01b0316639c4d7ad88888600581811061375657634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401613779919061568f565b60206040518083038186803b15801561379157600080fd5b505afa1580156137a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c99190614c65565b60ff1614155b806138f25750806001600160a01b0316639614a1ef6040518163ffffffff1660e01b815260040160206040518083038186803b15801561380e57600080fd5b505afa158015613822573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138469190614c65565b60ff16826001600160a01b0316639c4d7ad88888600681811061387957634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b815260040161389c919061568f565b60206040518083038186803b1580156138b457600080fd5b505afa1580156138c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ec9190614c65565b60ff1614155b80613a155750806001600160a01b03166309a8b0606040518163ffffffff1660e01b815260040160206040518083038186803b15801561393157600080fd5b505afa158015613945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139699190614c65565b60ff16826001600160a01b0316639c4d7ad88888600781811061399c57634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b81526004016139bf919061568f565b60206040518083038186803b1580156139d757600080fd5b505afa1580156139eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a0f9190614c65565b60ff1614155b80613b385750806001600160a01b031663ebc8a1826040518163ffffffff1660e01b815260040160206040518083038186803b158015613a5457600080fd5b505afa158015613a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a8c9190614c65565b60ff16826001600160a01b0316639c4d7ad888886008818110613abf57634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401613ae2919061568f565b60206040518083038186803b158015613afa57600080fd5b505afa158015613b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b329190614c65565b60ff1614155b80613c5b5750806001600160a01b0316635a4cd56b6040518163ffffffff1660e01b815260040160206040518083038186803b158015613b7757600080fd5b505afa158015613b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613baf9190614c65565b60ff16826001600160a01b0316639c4d7ad888886009818110613be257634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401613c05919061568f565b60206040518083038186803b158015613c1d57600080fd5b505afa158015613c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c559190614c65565b60ff1614155b80613d7e5750806001600160a01b031663c365088a6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c9a57600080fd5b505afa158015613cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cd29190614c65565b60ff16826001600160a01b0316639c4d7ad88888600a818110613d0557634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401613d28919061568f565b60206040518083038186803b158015613d4057600080fd5b505afa158015613d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d789190614c65565b60ff1614155b80613ea15750806001600160a01b0316630e9842566040518163ffffffff1660e01b815260040160206040518083038186803b158015613dbd57600080fd5b505afa158015613dd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613df59190614c65565b60ff16826001600160a01b0316639c4d7ad88888600b818110613e2857634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401613e4b919061568f565b60206040518083038186803b158015613e6357600080fd5b505afa158015613e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e9b9190614c65565b60ff1614155b80613fc45750806001600160a01b0316634498e6f16040518163ffffffff1660e01b815260040160206040518083038186803b158015613ee057600080fd5b505afa158015613ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f189190614c65565b60ff16826001600160a01b0316639c4d7ad88888600c818110613f4b57634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401613f6e919061568f565b60206040518083038186803b158015613f8657600080fd5b505afa158015613f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fbe9190614c65565b60ff1614155b806140e75750806001600160a01b0316634c3decd16040518163ffffffff1660e01b815260040160206040518083038186803b15801561400357600080fd5b505afa158015614017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061403b9190614c65565b60ff16826001600160a01b0316639c4d7ad88888600d81811061406e57634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401614091919061568f565b60206040518083038186803b1580156140a957600080fd5b505afa1580156140bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140e19190614c65565b60ff1614155b8061420a5750806001600160a01b031663fa80555f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561412657600080fd5b505afa15801561413a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061415e9190614c65565b60ff16826001600160a01b0316639c4d7ad88888600e81811061419157634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b81526004016141b4919061568f565b60206040518083038186803b1580156141cc57600080fd5b505afa1580156141e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142049190614c65565b60ff1614155b1561421a576000925050506128fa565b8585600181811061423b57634e487b7160e01b600052603260045260246000fd5b90506020020135600014158061427957508585600281811061426d57634e487b7160e01b600052603260045260246000fd5b90506020020135600014155b80156142ad5750858560038181106142a157634e487b7160e01b600052603260045260246000fd5b90506020020135600014155b156142bd576000925050506128fa565b6001600160a01b0384166000908152600d602052604090205460ff16612e9e576000925050506128fa565b60008211801561431457506000838152600c6020908152604080832060ff851684529091529020548214155b15614481576000838152600c6020908152604080832060ff85168452909152902054156143db576000838152600c6020908152604080832060ff85168452909152908190205490516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd916143a8913091339190600401614d22565b600060405180830381600087803b1580156143c257600080fd5b505af11580156143d6573d6000803e3d6000fd5b505050505b6040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd9061442b90339030908790600401614d22565b600060405180830381600087803b15801561444557600080fd5b505af1158015614459573d6000803e3d6000fd5b5050506000848152600c6020908152604080832060ff86168452909152902083905550610675565b6000838152600c6020908152604080832060ff8516845290915290205415610675576000838152600c6020908152604080832060ff85168452909152908190205490516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd91614510913091339190600401614d22565b600060405180830381600087803b15801561452a57600080fd5b505af115801561453e573d6000803e3d6000fd5b5050506000848152600c6020908152604080832060ff8616845290915281205550505050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6145c1848484612cbd565b6145cd8484848461472a565b6128635760405162461bcd60e51b81526004016105bd90614dec565b6060600a805461051390615781565b60608161461d57506040805180820190915260018152600360fc1b60208201526104ff565b8160005b81156146475780614631816157c2565b91506146409050600a836156ff565b9150614621565b6000816001600160401b0381111561466f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015614699576020820181803683370190505b5090505b8415610683576146ae600183615732565b91506146bb600a866157dd565b6146c69060306156c5565b60f81b8183815181106146e957634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350614723600a866156ff565b945061469d565b600061473e846001600160a01b0316614842565b1561483a57836001600160a01b031663150b7a0261475a612bce565b8786866040518563ffffffff1660e01b815260040161477c9493929190614d46565b602060405180830381600087803b15801561479657600080fd5b505af19250505080156147c6575060408051601f3d908101601f191682019092526147c391810190614b29565b60015b614820573d8080156147f4576040519150601f19603f3d011682016040523d82523d6000602084013e6147f9565b606091505b5080516148185760405162461bcd60e51b81526004016105bd90614dec565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610683565b506001610683565b3b151590565b604051806102000160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516101e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081019190915290565b80356001600160a01b03811681146104ff57600080fd5b600060208284031215614969578081fd5b6128fa82614941565b60008060408385031215614984578081fd5b61498d83614941565b915061499b60208401614941565b90509250929050565b6000806000606084860312156149b8578081fd5b6149c184614941565b92506149cf60208501614941565b9150604084013590509250925092565b600080600080608085870312156149f4578081fd5b6149fd85614941565b93506020614a0c818701614941565b93506040860135925060608601356001600160401b0380821115614a2e578384fd5b818801915088601f830112614a41578384fd5b813581811115614a5357614a5361581d565b604051601f8201601f1916810185018381118282101715614a7657614a7661581d565b60405281815283820185018b1015614a8c578586fd5b81858501868301379081019093019390935250939692955090935050565b60008060408385031215614abc578182fd5b614ac583614941565b915060208301358015158114614ad9578182fd5b809150509250929050565b60008060408385031215614af6578182fd5b614aff83614941565b946020939093013593505050565b600060208284031215614b1e578081fd5b81356128fa81615833565b600060208284031215614b3a578081fd5b81516128fa81615833565b600060208284031215614b56578081fd5b5035919050565b60008060008060608587031215614b72578384fd5b8435935060208501356001600160401b0380821115614b8f578485fd5b818701915087601f830112614ba2578485fd5b813581811115614bb0578586fd5b8860208083028501011115614bc3578586fd5b602083019550809450505050614bdb60408601614941565b905092959194509250565b600080600060608486031215614bfa578283fd5b505081359360208301359350604090920135919050565b600080600080600080600080610100898b031215614c2d578384fd5b505086359860208801359850604088013597606081013597506080810135965060a0810135955060c0810135945060e0013592509050565b600060208284031215614c76578081fd5b815160ff811681146128fa578182fd5b15159052565b60008151808452614ca4816020860160208601615755565b601f01601f19169290920160200192915050565b6001600160401b03169052565b60008351614cd7818460208801615755565b835190830190614ceb818360208801615755565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614d786080830184614c8c565b9695505050505050565b901515815260200190565b6001600160e01b031991909116815260200190565b6000602082526128fa6020830184614c8c565b6020808252601f908201527f447261676f6e3a2045717569706d656e74732073686f756c6420626520313600604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527f63656976657220696d706c656d656e7465720000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b60208082526011908201527f447261676f6e3a20466f7262696464656e000000000000000000000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60408201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606082015260800190565b60208082526018908201527f447261676f6e3a20696e76616c6964206c6576656c2075700000000000000000604082015260600190565b6020808252818101527f447261676f6e3a20496e76616c6964206974656d20636f6d62696e6174696f6e604082015260600190565b60208082526015908201527f447261676f6e3a20496e76616c69642073746174730000000000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e08083015190820152610100808301519082015261012080830151908201526101408083015190820152610160808301519082015261018080830151908201526101a080830151908201526101c080830151908201526101e091820151918101919091526102000190565b60006101e082019050615448828451614cb8565b602083015161545a6020840182614cb8565b50604083015161546d6040840182614cb8565b5060608301516154806060840182614cb8565b5060808301516154936080840182614cb8565b5060a08301516154a660a0840182614cb8565b5060c08301516154b960c0840182614cb8565b5060e08301516154cc60e0840182614cb8565b50610100808401516154e082850182614cb8565b5050610120808401516154f582850182614cb8565b50506101408084015161550a82850182614cb8565b50506101608084015161551f82850182614cb8565b50506101808084015161553482850182614cb8565b50506101a083810151908301526101c08084015161555482850182614c86565b505092915050565b81546101e08201906001600160401b0361557884828416614cb8565b61558a60208501828460401c16614cb8565b61559c60408501828460801c16614cb8565b6155ac606085018360c01c614cb8565b600185015491506155c260808501828416614cb8565b6155d460a08501828460401c16614cb8565b6155e660c08501828460801c16614cb8565b6155f660e085018360c01c614cb8565b6002850154915061560d6101008501828416614cb8565b6156206101208501828460401c16614cb8565b6156336101408501828460801c16614cb8565b5061564561016084018260c01c614cb8565b506156536003840154615749565b615661610180840182614cb8565b5060048301546101a083015261567a60058401546157bc565b6156886101c0840182614c86565b5092915050565b90815260200190565b6001600160401b0391909116815260200190565b6001600160401b03929092168252602082015260400190565b600082198211156156d8576156d86157f1565b500190565b60006001600160401b03808316818516808303821115614ceb57614ceb6157f1565b60008261570e5761570e615807565b500490565b600081600019048311821515161561572d5761572d6157f1565b500290565b600082821015615744576157446157f1565b500390565b6001600160401b031690565b60005b83811015615770578181015183820152602001615758565b838111156128635750506000910152565b60028104600182168061579557607f821691505b602082108114156157b657634e487b7160e01b600052602260045260246000fd5b50919050565b60ff1690565b60006000198214156157d6576157d66157f1565b5060010190565b6000826157ec576157ec615807565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114612af157600080fdfea26469706673582212207844bb1726cb27ebf398938b545a3be885c32be6e08262f35f76e2c718ecba4264736f6c63430008000033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2478,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2480,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2484,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2488,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2492,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2498,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 11699,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "authorized",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 206,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_status",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 9622,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "tokenIds",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)3909_storage"
      },
      {
        "astId": 9644,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "_uriUrl",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 9713,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "playerStats",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(CharacterStats)9675_storage)"
      },
      {
        "astId": 9719,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "equippedEquipment",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 9723,
        "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
        "label": "allowedUtilities",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(CharacterStats)9675_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DragonPlayerCharacter.CharacterStats)",
        "numberOfBytes": "32",
        "value": "t_struct(CharacterStats)9675_storage"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CharacterStats)9675_storage": {
        "encoding": "inplace",
        "label": "struct DragonPlayerCharacter.CharacterStats",
        "members": [
          {
            "astId": 9646,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "attack",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 9648,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "defense",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 9650,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "speed",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 9652,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "endurance",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 9654,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "luck",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 9656,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "experience",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 9658,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "crafting",
            "offset": 16,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 9660,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "gathering",
            "offset": 24,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 9662,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "magic",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 9664,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "level",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 9666,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "currentHealth",
            "offset": 16,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 9668,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "totalHealth",
            "offset": 24,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 9670,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "statPointsToSpend",
            "offset": 0,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 9672,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "created",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9674,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "isAlive",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Counter)3909_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3908,
            "contract": "contracts/dragon/DragonPlayerCharacter.sol:DragonPlayerCharacter",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}