{
  "address": "0xD3067965605EE3F98D32860c3169FF6246F13826",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_character",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "attack",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "defense",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "speed",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "endurance",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "crafting",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "gathering",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "magic",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rank",
          "type": "uint256[]"
        }
      ],
      "name": "bulkMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_character",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "transferCharacterOwnerShip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc88231778518634139a8d0df28037a204bab5564817d73a39bc9d674e1e033e9",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0xD3067965605EE3F98D32860c3169FF6246F13826",
    "transactionIndex": 1,
    "gasUsed": "677783",
    "logsBloom": "0x
    "blockHash": "0x2b7a7e075b9071eacea26733c8948c6f4e0af9ce0debfd00441732d69110982e",
    "transactionHash": "0xc88231778518634139a8d0df28037a204bab5564817d73a39bc9d674e1e033e9",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 9750408,
        "transactionHash": "0xc88231778518634139a8d0df28037a204bab5564817d73a39bc9d674e1e033e9",
        "address": "0xD3067965605EE3F98D32860c3169FF6246F13826",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x2b7a7e075b9071eacea26733c8948c6f4e0af9ce0debfd00441732d69110982e"
      }
    ],
    "blockNumber": 9750408,
    "cumulativeGasUsed": "726812",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "45e2e59d5c6be8a4f1c89813c62c1e03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_character\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"attack\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"defense\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"speed\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endurance\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"crafting\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gathering\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"magic\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rank\",\"type\":\"uint256[]\"}],\"name\":\"bulkMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_character\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferCharacterOwnerShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bulkMint(address,uint256[],uint256[],uint256[],uint256[],uint256[],uint256[],uint256[],uint256[])\":{\"notice\":\"Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/DragonBulkMint.sol\":\"DragonBulkMint\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/mocks/DragonBulkMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n/**\\r\\n * @dev This smart contract is for easy bulk mint of DragonPlayerCharacter or something else\\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./IDragonPlayerCharacter.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\n\\r\\ncontract DragonBulkMint is Ownable, ERC721Holder {\\r\\n    constructor() {}\\r\\n\\r\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\r\\n    function bulkMint(\\r\\n        address _character,\\r\\n        uint256[] memory attack,\\r\\n        uint256[] memory defense,\\r\\n        uint256[] memory speed,\\r\\n        uint256[] memory endurance,\\r\\n        uint256[] memory crafting,\\r\\n        uint256[] memory gathering,\\r\\n        uint256[] memory magic,\\r\\n        uint256[] memory rank\\r\\n    ) public onlyOwner {\\r\\n        require(\\r\\n                attack.length == defense.length &&\\r\\n                attack.length == speed.length &&\\r\\n                attack.length == endurance.length &&\\r\\n                endurance.length == crafting.length &&\\r\\n                crafting.length == gathering.length &&\\r\\n                gathering.length == magic.length &&\\r\\n                magic.length == rank.length,\\r\\n            \\\"Not equal params length\\\"\\r\\n        );\\r\\n        uint256 ii;\\r\\n        uint256 len = attack.length;\\r\\n        for (ii = 0; ii < len; ii++) {\\r\\n            uint256 itemId = IDragonPlayerCharacter(_character).mintCharacter(\\r\\n                attack[ii],\\r\\n                defense[ii],\\r\\n                speed[ii],\\r\\n                endurance[ii],\\r\\n                crafting[ii],\\r\\n                gathering[ii],\\r\\n                magic[ii],\\r\\n                rank[ii]\\r\\n            );\\r\\n            IERC721(_character).transferFrom(address(this), msg.sender, itemId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferCharacterOwnerShip(address _character, address _to) external onlyOwner {\\r\\n        IDragonPlayerCharacter(_character).transferOwnership(_to);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9a35ee4416776ac9c4108c22716a8e5ce0b3a600ef855832b1f4097f191b70e3\",\"license\":\"MIT\"},\"contracts/mocks/IDragonPlayerCharacter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of DragonPlayerCharacter.\\r\\n */\\r\\ninterface IDragonPlayerCharacter {\\r\\n    function mintCharacter(\\r\\n        uint256 attack,\\r\\n        uint256 defense,\\r\\n        uint256 speed,\\r\\n        uint256 endurance,\\r\\n        uint256 crafting,\\r\\n        uint256 gathering,\\r\\n        uint256 magic,\\r\\n        uint256 rank\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function transferOwnership(address _to) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x87696253a97360106bb226f957dff220af377b8ff99c4ce9cdfe2cf70e0b22f1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002161001c610026565b61002a565b61007a565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610ad9806100896000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063715018a611610050578063715018a6146100c85780638da5cb5b146100d0578063f2fde38b146100e557610072565b806312431f1514610077578063150b7a021461008c578063404ae703146100b5575b600080fd5b61008a6100853660046106a5565b6100f8565b005b61009f61009a3660046106d7565b6101a2565b6040516100ac9190610927565b60405180910390f35b61008a6100c336600461078f565b6101b2565b61008a6104ba565b6100d8610505565b6040516100ac91906108ef565b61008a6100f3366004610684565b610514565b610100610585565b6001600160a01b0316610111610505565b6001600160a01b0316146101405760405162461bcd60e51b8152600401610137906109d1565b60405180910390fd5b60405163f2fde38b60e01b81526001600160a01b0383169063f2fde38b9061016c9084906004016108ef565b600060405180830381600087803b15801561018657600080fd5b505af115801561019a573d6000803e3d6000fd5b505050505050565b630a85bd0160e11b949350505050565b6101ba610585565b6001600160a01b03166101cb610505565b6001600160a01b0316146101f15760405162461bcd60e51b8152600401610137906109d1565b86518851148015610203575085518851145b8015610210575084518851145b801561021d575083518551145b801561022a575082518451145b8015610237575081518351145b8015610244575080518251145b6102605760405162461bcd60e51b81526004016101379061099a565b87516000905b808210156104ad5760008b6001600160a01b03166347c8e7b28c858151811061029f57634e487b7160e01b600052603260045260246000fd5b60200260200101518c86815181106102c757634e487b7160e01b600052603260045260246000fd5b60200260200101518c87815181106102ef57634e487b7160e01b600052603260045260246000fd5b60200260200101518c888151811061031757634e487b7160e01b600052603260045260246000fd5b60200260200101518c898151811061033f57634e487b7160e01b600052603260045260246000fd5b60200260200101518c8a8151811061036757634e487b7160e01b600052603260045260246000fd5b60200260200101518c8b8151811061038f57634e487b7160e01b600052603260045260246000fd5b60200260200101518c8c815181106103b757634e487b7160e01b600052603260045260246000fd5b60200260200101516040518963ffffffff1660e01b81526004016103e2989796959493929190610a06565b602060405180830381600087803b1580156103fc57600080fd5b505af1158015610410573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043491906108d7565b6040516323b872dd60e01b81529091506001600160a01b038d16906323b872dd9061046790309033908690600401610903565b600060405180830381600087803b15801561048157600080fd5b505af1158015610495573d6000803e3d6000fd5b505050505081806104a590610a66565b925050610266565b5050505050505050505050565b6104c2610585565b6001600160a01b03166104d3610505565b6001600160a01b0316146104f95760405162461bcd60e51b8152600401610137906109d1565b6105036000610589565b565b6000546001600160a01b031690565b61051c610585565b6001600160a01b031661052d610505565b6001600160a01b0316146105535760405162461bcd60e51b8152600401610137906109d1565b6001600160a01b0381166105795760405162461bcd60e51b815260040161013790610954565b61058281610589565b50565b3390565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146105fd57600080fd5b919050565b600082601f830112610612578081fd5b8135602067ffffffffffffffff82111561062e5761062e610a8d565b80820261063c828201610a3c565b838152828101908684018388018501891015610656578687fd5b8693505b8584101561067857803583526001939093019291840191840161065a565b50979650505050505050565b600060208284031215610695578081fd5b61069e826105e6565b9392505050565b600080604083850312156106b7578081fd5b6106c0836105e6565b91506106ce602084016105e6565b90509250929050565b600080600080608085870312156106ec578182fd5b6106f5856105e6565b935060206107048187016105e6565b935060408601359250606086013567ffffffffffffffff80821115610727578384fd5b818801915088601f83011261073a578384fd5b81358181111561074c5761074c610a8d565b61075e601f8201601f19168501610a3c565b91508082528984828501011115610773578485fd5b8084840185840137810190920192909252939692955090935050565b60008060008060008060008060006101208a8c0312156107ad578485fd5b6107b68a6105e6565b985060208a013567ffffffffffffffff808211156107d2578687fd5b6107de8d838e01610602565b995060408c01359150808211156107f3578687fd5b6107ff8d838e01610602565b985060608c0135915080821115610814578687fd5b6108208d838e01610602565b975060808c0135915080821115610835578687fd5b6108418d838e01610602565b965060a08c0135915080821115610856578586fd5b6108628d838e01610602565b955060c08c0135915080821115610877578485fd5b6108838d838e01610602565b945060e08c0135915080821115610898578384fd5b6108a48d838e01610602565b93506101008c01359150808211156108ba578283fd5b506108c78c828d01610602565b9150509295985092959850929598565b6000602082840312156108e8578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526017908201527f4e6f7420657175616c20706172616d73206c656e677468000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b978852602088019690965260408701949094526060860192909252608085015260a084015260c083015260e08201526101000190565b60405181810167ffffffffffffffff81118282101715610a5e57610a5e610a8d565b604052919050565b6000600019821415610a8657634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea264697066735822122077fe065901543a1e090595c0cf00a60b7caf110e4670ed0c6e13769ecaafd3ed64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063715018a611610050578063715018a6146100c85780638da5cb5b146100d0578063f2fde38b146100e557610072565b806312431f1514610077578063150b7a021461008c578063404ae703146100b5575b600080fd5b61008a6100853660046106a5565b6100f8565b005b61009f61009a3660046106d7565b6101a2565b6040516100ac9190610927565b60405180910390f35b61008a6100c336600461078f565b6101b2565b61008a6104ba565b6100d8610505565b6040516100ac91906108ef565b61008a6100f3366004610684565b610514565b610100610585565b6001600160a01b0316610111610505565b6001600160a01b0316146101405760405162461bcd60e51b8152600401610137906109d1565b60405180910390fd5b60405163f2fde38b60e01b81526001600160a01b0383169063f2fde38b9061016c9084906004016108ef565b600060405180830381600087803b15801561018657600080fd5b505af115801561019a573d6000803e3d6000fd5b505050505050565b630a85bd0160e11b949350505050565b6101ba610585565b6001600160a01b03166101cb610505565b6001600160a01b0316146101f15760405162461bcd60e51b8152600401610137906109d1565b86518851148015610203575085518851145b8015610210575084518851145b801561021d575083518551145b801561022a575082518451145b8015610237575081518351145b8015610244575080518251145b6102605760405162461bcd60e51b81526004016101379061099a565b87516000905b808210156104ad5760008b6001600160a01b03166347c8e7b28c858151811061029f57634e487b7160e01b600052603260045260246000fd5b60200260200101518c86815181106102c757634e487b7160e01b600052603260045260246000fd5b60200260200101518c87815181106102ef57634e487b7160e01b600052603260045260246000fd5b60200260200101518c888151811061031757634e487b7160e01b600052603260045260246000fd5b60200260200101518c898151811061033f57634e487b7160e01b600052603260045260246000fd5b60200260200101518c8a8151811061036757634e487b7160e01b600052603260045260246000fd5b60200260200101518c8b8151811061038f57634e487b7160e01b600052603260045260246000fd5b60200260200101518c8c815181106103b757634e487b7160e01b600052603260045260246000fd5b60200260200101516040518963ffffffff1660e01b81526004016103e2989796959493929190610a06565b602060405180830381600087803b1580156103fc57600080fd5b505af1158015610410573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043491906108d7565b6040516323b872dd60e01b81529091506001600160a01b038d16906323b872dd9061046790309033908690600401610903565b600060405180830381600087803b15801561048157600080fd5b505af1158015610495573d6000803e3d6000fd5b505050505081806104a590610a66565b925050610266565b5050505050505050505050565b6104c2610585565b6001600160a01b03166104d3610505565b6001600160a01b0316146104f95760405162461bcd60e51b8152600401610137906109d1565b6105036000610589565b565b6000546001600160a01b031690565b61051c610585565b6001600160a01b031661052d610505565b6001600160a01b0316146105535760405162461bcd60e51b8152600401610137906109d1565b6001600160a01b0381166105795760405162461bcd60e51b815260040161013790610954565b61058281610589565b50565b3390565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146105fd57600080fd5b919050565b600082601f830112610612578081fd5b8135602067ffffffffffffffff82111561062e5761062e610a8d565b80820261063c828201610a3c565b838152828101908684018388018501891015610656578687fd5b8693505b8584101561067857803583526001939093019291840191840161065a565b50979650505050505050565b600060208284031215610695578081fd5b61069e826105e6565b9392505050565b600080604083850312156106b7578081fd5b6106c0836105e6565b91506106ce602084016105e6565b90509250929050565b600080600080608085870312156106ec578182fd5b6106f5856105e6565b935060206107048187016105e6565b935060408601359250606086013567ffffffffffffffff80821115610727578384fd5b818801915088601f83011261073a578384fd5b81358181111561074c5761074c610a8d565b61075e601f8201601f19168501610a3c565b91508082528984828501011115610773578485fd5b8084840185840137810190920192909252939692955090935050565b60008060008060008060008060006101208a8c0312156107ad578485fd5b6107b68a6105e6565b985060208a013567ffffffffffffffff808211156107d2578687fd5b6107de8d838e01610602565b995060408c01359150808211156107f3578687fd5b6107ff8d838e01610602565b985060608c0135915080821115610814578687fd5b6108208d838e01610602565b975060808c0135915080821115610835578687fd5b6108418d838e01610602565b965060a08c0135915080821115610856578586fd5b6108628d838e01610602565b955060c08c0135915080821115610877578485fd5b6108838d838e01610602565b945060e08c0135915080821115610898578384fd5b6108a48d838e01610602565b93506101008c01359150808211156108ba578283fd5b506108c78c828d01610602565b9150509295985092959850929598565b6000602082840312156108e8578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526017908201527f4e6f7420657175616c20706172616d73206c656e677468000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b978852602088019690965260408701949094526060860192909252608085015260a084015260c083015260e08201526101000190565b60405181810167ffffffffffffffff81118282101715610a5e57610a5e610a8d565b604052919050565b6000600019821415610a8657634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea264697066735822122077fe065901543a1e090595c0cf00a60b7caf110e4670ed0c6e13769ecaafd3ed64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bulkMint(address,uint256[],uint256[],uint256[],uint256[],uint256[],uint256[],uint256[],uint256[])": {
        "notice": "Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef)."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/mocks/DragonBulkMint.sol:DragonBulkMint",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}