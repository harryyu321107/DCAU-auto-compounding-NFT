{
  "address": "0x8d58C0C8821FBF90002AeEb8767657556c52A450",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_initialWalletPath",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_vaultChefAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_masterchefAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniRouterAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_wantAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_earnedAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToWmaticPath",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "Panic",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "ResetAllowances",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oldGov",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newGov",
          "type": "address"
        }
      ],
      "name": "SetGov",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_controllerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_rewardRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_buyBackRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawFeeFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_slippageFactor",
          "type": "uint256"
        }
      ],
      "name": "SetSettings",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "UnPanic",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HasPanicked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controllerFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dcauAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earnedAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedToDcauPath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedToWmaticPath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeMaxTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastEarnBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterchefAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "panic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_govAddress",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_controllerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buyBackRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFeeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippageFactor",
          "type": "uint256"
        }
      ],
      "name": "setSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageFactorUL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniRouterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultChefAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantLockedTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeFactorLL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeFactorMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x147d58548ad551a2c844b50bfbe185a9745656fb1ee9c0b3787f71d1a1fd6a2b",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0x8d58C0C8821FBF90002AeEb8767657556c52A450",
    "transactionIndex": 2,
    "gasUsed": "2691464",
    "logsBloom": "0x04200000000000000000000000000000000000000000000020810000000040000000000000000000010000000000000000000000008000000020000000200000000000000000000000008000000004000001000000000000000000000010000000040000020000000000000000000800000000000000000000000000000000400000000000000000004000008000000000000010000000000000000000000000020000000000000000000000000000000000000000000000000000000000000200000000001000000100000000000000000000000000004000000000000020000010002000000004000000001000000000000000000008000000000000000000",
    "blockHash": "0x5e91f4723428f0453b575393efd057364e87674d0af84b669035edbd27feaeaa",
    "transactionHash": "0x147d58548ad551a2c844b50bfbe185a9745656fb1ee9c0b3787f71d1a1fd6a2b",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 9534536,
        "transactionHash": "0x147d58548ad551a2c844b50bfbe185a9745656fb1ee9c0b3787f71d1a1fd6a2b",
        "address": "0x8d58C0C8821FBF90002AeEb8767657556c52A450",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5e91f4723428f0453b575393efd057364e87674d0af84b669035edbd27feaeaa"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 9534536,
        "transactionHash": "0x147d58548ad551a2c844b50bfbe185a9745656fb1ee9c0b3787f71d1a1fd6a2b",
        "address": "0x8d58C0C8821FBF90002AeEb8767657556c52A450",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b",
          "0x0000000000000000000000005f576581c54fc09e2c6e350a65dc781978c87199"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x5e91f4723428f0453b575393efd057364e87674d0af84b669035edbd27feaeaa"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 9534536,
        "transactionHash": "0x147d58548ad551a2c844b50bfbe185a9745656fb1ee9c0b3787f71d1a1fd6a2b",
        "address": "0xa37EB8Fe910A00f973E0913024F631Ed387eE512",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000008d58c0c8821fbf90002aeeb8767657556c52a450",
          "0x0000000000000000000000005b4daddd5fc57c81a04358dec86c77d9d9d9a0fc"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 2,
        "blockHash": "0x5e91f4723428f0453b575393efd057364e87674d0af84b669035edbd27feaeaa"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 9534536,
        "transactionHash": "0x147d58548ad551a2c844b50bfbe185a9745656fb1ee9c0b3787f71d1a1fd6a2b",
        "address": "0xa37EB8Fe910A00f973E0913024F631Ed387eE512",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000008d58c0c8821fbf90002aeeb8767657556c52a450",
          "0x0000000000000000000000005b4daddd5fc57c81a04358dec86c77d9d9d9a0fc"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0x5e91f4723428f0453b575393efd057364e87674d0af84b669035edbd27feaeaa"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 9534536,
        "transactionHash": "0x147d58548ad551a2c844b50bfbe185a9745656fb1ee9c0b3787f71d1a1fd6a2b",
        "address": "0x165003a2163465F3E27cEdA9708A150dD1D3b1CB",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000008d58c0c8821fbf90002aeeb8767657556c52a450",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 4,
        "blockHash": "0x5e91f4723428f0453b575393efd057364e87674d0af84b669035edbd27feaeaa"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 9534536,
        "transactionHash": "0x147d58548ad551a2c844b50bfbe185a9745656fb1ee9c0b3787f71d1a1fd6a2b",
        "address": "0x165003a2163465F3E27cEdA9708A150dD1D3b1CB",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000008d58c0c8821fbf90002aeeb8767657556c52a450",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0x5e91f4723428f0453b575393efd057364e87674d0af84b669035edbd27feaeaa"
      }
    ],
    "blockNumber": 9534536,
    "cumulativeGasUsed": "2744582",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x165003a2163465F3E27cEdA9708A150dD1D3b1CB",
      "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
      "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b"
    ],
    "0x5f576581C54Fc09E2C6e350a65dc781978C87199",
    "0x5B4DAddd5FC57c81A04358dec86c77d9d9d9A0fc",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
    1,
    "0xa37EB8Fe910A00f973E0913024F631Ed387eE512",
    "0x165003a2163465F3E27cEdA9708A150dD1D3b1CB",
    [
      "0x165003a2163465F3E27cEdA9708A150dD1D3b1CB",
      "0xc778417e063141139fce010982780140aa0cd5ab"
    ]
  ],
  "solcInputHash": "76fcc94bbf61f667ef65023a0d0dd8fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_initialWalletPath\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_vaultChefAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterchefAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniRouterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wantAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_earnedAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToWmaticPath\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"Panic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"ResetAllowances\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldGov\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newGov\",\"type\":\"address\"}],\"name\":\"SetGov\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawFeeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_slippageFactor\",\"type\":\"uint256\"}],\"name\":\"SetSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"UnPanic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HasPanicked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dcauAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToDcauPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToWmaticPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMaxTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEarnBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterchefAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govAddress\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippageFactor\",\"type\":\"uint256\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFactorUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultChefAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantLockedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactorLL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactorMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/StrategyMasterChef.sol\":\"StrategyMasterChef\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/interfaces/IUniPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniPair {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9338cbba041543c256193483361d6fc6ff775b2a57eb8bebdfa2a32999acfdc4\",\"license\":\"MIT\"},\"contracts/interfaces/IUniRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xb8b608812f0f94c20ebd1825ea134d624eb0919c5eec4bc8a25a3232643aea3d\",\"license\":\"MIT\"},\"contracts/interfaces/IUniRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IUniRouter01.sol\\\";\\n\\ninterface IUniRouter02 is IUniRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7cab8b2d1f9bcc5c1944023b1755b3c73ffec7ed04a4801e565a58fc1eb7555e\",\"license\":\"MIT\"},\"contracts/vault/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../interfaces/IUniPair.sol\\\";\\nimport \\\"../interfaces/IUniRouter02.sol\\\";\\n\\nabstract contract BaseStrategy is Ownable, ReentrancyGuard, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    address public wantAddress;\\n    address public earnedAddress;\\n\\n    address public uniRouterAddress;\\n    address public dcauAddress;\\n    address public withdrawFeeAddress;\\n    address public feeAddress;\\n    address public vaultChefAddress;\\n    address public govAddress;\\n\\n    uint256 public lastEarnBlock = block.number;\\n    uint256 public sharesTotal;\\n\\n    address public constant buyBackAddress = 0x000000000000000000000000000000000000dEaD;\\n    uint256 public controllerFee = 50;\\n    uint256 public rewardRate;\\n    uint256 public buyBackRate = 150;\\n    uint256 public constant feeMaxTotal = 1000;\\n    uint256 public constant feeMax = 10000; // 100 = 1%\\n\\n    uint256 public withdrawFeeFactor = 9900; // 10% withdraw fee, origin: 0% withdraw fee -> withdrawFeeFactor = 10000;\\n    uint256 public constant withdrawFeeFactorMax = 10000;\\n    uint256 public constant withdrawFeeFactorLL = 9900;\\n\\n    uint256 public slippageFactor = 950; // 5% default slippage tolerance\\n    uint256 public constant slippageFactorUL = 995;\\n\\n    address[] public earnedToWmaticPath; // for distributeFee, DNGN_WMATIC path\\n    address[] public earnedToDcauPath; // for buyBack, do we need it?\\n\\n    bool public HasPanicked = false;\\n\\n    event SetSettings(\\n        uint256 _controllerFee,\\n        uint256 _rewardRate,\\n        uint256 _buyBackRate,\\n        uint256 _withdrawFeeFactor,\\n        uint256 _slippageFactor\\n    );\\n\\n    event Panic(address indexed _gov);\\n    event UnPanic(address indexed _gov);\\n    event ResetAllowances(address indexed _gov);\\n    event SetGov(address indexed _oldGov, address indexed _newGov);\\n\\n    modifier onlyGov() {\\n        require(msg.sender == govAddress, \\\"!gov\\\");\\n        _;\\n    }\\n\\n    function _vaultDeposit(uint256 _amount) internal virtual;\\n\\n    function _vaultWithdraw(uint256 _amount) internal virtual;\\n\\n    function earn() external virtual;\\n\\n    function totalInUnderlying() public view virtual returns (uint256);\\n\\n    function wantLockedTotal() public view virtual returns (uint256);\\n\\n    function _resetAllowances() internal virtual;\\n\\n    function _revokeAllowances() internal virtual;\\n\\n    function _emergencyVaultWithdraw() internal virtual;\\n\\n    function deposit(uint256 _wantAmt) external onlyOwner nonReentrant whenNotPaused returns (uint256) {\\n        // Call must happen before transfer\\n        uint256 wantLockedBefore = wantLockedTotal();\\n\\n        uint256 balanceBefore = IERC20(wantAddress).balanceOf(address(this));\\n        IERC20(wantAddress).safeTransferFrom(address(msg.sender), address(this), _wantAmt);\\n        _wantAmt = IERC20(wantAddress).balanceOf(address(this)) - balanceBefore;\\n        require(_wantAmt > 0, \\\"We only accept amount > 0\\\");\\n\\n        // Proper deposit amount for tokens with fees, or vaults with deposit fees\\n        uint256 underlyingAdded = _farm();\\n\\n        //The share amount is the underlying added amount unless there is shares\\n        //then the share total is used to calculate the share amount\\n        uint256 sharesAmount = underlyingAdded;\\n\\n        if (sharesTotal > 0) {\\n            sharesAmount = (underlyingAdded * sharesTotal) / wantLockedBefore;\\n        }\\n\\n        sharesTotal = sharesTotal + sharesAmount;\\n\\n        return sharesAmount;\\n    }\\n\\n    function _farm() internal returns (uint256) {\\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\\n        if (wantAmt == 0) return 0;\\n        uint256 underlyingBefore = totalInUnderlying();\\n        _vaultDeposit(wantAmt);\\n        uint256 underlyingAfter = totalInUnderlying();\\n\\n        return underlyingAfter - underlyingBefore;\\n    }\\n\\n    function withdraw(uint256 _wantAmt) external onlyOwner nonReentrant returns (uint256) {\\n        require(_wantAmt > 0, \\\"_wantAmt is 0\\\");\\n\\n        uint256 wantLockedBefore = wantLockedTotal();\\n\\n        uint256 actualBalanceWantAmt = IERC20(wantAddress).balanceOf(address(this));\\n\\n        // Check if strategy has tokens from panic\\n        if (_wantAmt > actualBalanceWantAmt) {\\n            _vaultWithdraw(_wantAmt - actualBalanceWantAmt);\\n            actualBalanceWantAmt = IERC20(wantAddress).balanceOf(address(this));\\n        }\\n\\n        uint256 wantAmtToReceive = _wantAmt;\\n\\n        if (wantAmtToReceive > actualBalanceWantAmt) {\\n            wantAmtToReceive = actualBalanceWantAmt;\\n        }\\n\\n        uint256 sharesRemoved = (_wantAmt * sharesTotal) / wantLockedBefore;\\n        if (sharesRemoved > sharesTotal) {\\n            sharesRemoved = sharesTotal;\\n        }\\n        sharesTotal = sharesTotal - sharesRemoved;\\n\\n        // Withdraw fee\\n        uint256 withdrawFee = (wantAmtToReceive * (withdrawFeeFactorMax - withdrawFeeFactor)) / withdrawFeeFactorMax;\\n        if (withdrawFee > 0) {\\n            IERC20(wantAddress).safeTransfer(withdrawFeeAddress, withdrawFee);\\n            wantAmtToReceive = wantAmtToReceive - withdrawFee;\\n        }\\n\\n        IERC20(wantAddress).safeTransfer(vaultChefAddress, wantAmtToReceive);\\n\\n        return sharesRemoved;\\n    }\\n\\n    // To pay for earn function\\n    function distributeFees(uint256 _earnedAmt) internal returns (uint256) {\\n        if (controllerFee > 0) {\\n            uint256 fee = (_earnedAmt * controllerFee) / feeMax;\\n            _safeSwapWmatic(fee, earnedToWmaticPath, feeAddress);\\n            _earnedAmt = _earnedAmt - fee;\\n        }\\n\\n        return _earnedAmt;\\n    }\\n\\n    function buyBack(uint256 _earnedAmt) internal virtual returns (uint256) {\\n        if (earnedAddress == dcauAddress) {\\n            return _earnedAmt;\\n        }\\n        if (buyBackRate > 0) {\\n            uint256 buyBackAmt = (_earnedAmt * buyBackRate) / feeMax;\\n            if (earnedAddress != dcauAddress) {\\n                _safeSwap(buyBackAmt, earnedToDcauPath, buyBackAddress);\\n            }\\n            _earnedAmt = _earnedAmt - buyBackAmt;\\n        }\\n\\n        return _earnedAmt;\\n    }\\n\\n    function resetAllowances() external onlyGov {\\n        _resetAllowances();\\n        emit ResetAllowances(msg.sender);\\n    }\\n\\n    function pause() external onlyGov {\\n        _pause();\\n    }\\n\\n    function panic() external onlyGov {\\n        HasPanicked = true;\\n\\n        _pause();\\n        _revokeAllowances();\\n        _emergencyVaultWithdraw();\\n        emit Panic(msg.sender);\\n    }\\n\\n    function unpause() external onlyGov {\\n        require(!HasPanicked, \\\"cannot unpause a panicked strategy\\\");\\n\\n        _unpause();\\n        _resetAllowances();\\n        _farm();\\n        emit UnPanic(msg.sender);\\n    }\\n\\n    function setGov(address _govAddress) external onlyGov {\\n        govAddress = _govAddress;\\n        emit SetGov(msg.sender, _govAddress);\\n    }\\n\\n    function setSettings(\\n        uint256 _controllerFee,\\n        uint256 _rewardRate,\\n        uint256 _buyBackRate,\\n        uint256 _withdrawFeeFactor,\\n        uint256 _slippageFactor\\n    ) external onlyGov {\\n        require(_controllerFee + _rewardRate + _buyBackRate <= feeMaxTotal, \\\"Max fee of 10%\\\");\\n        require(_withdrawFeeFactor >= withdrawFeeFactorLL, \\\"_withdrawFeeFactor too low\\\");\\n        require(_withdrawFeeFactor <= withdrawFeeFactorMax, \\\"_withdrawFeeFactor too high\\\");\\n        require(_slippageFactor <= slippageFactorUL, \\\"_slippageFactor too high\\\");\\n        controllerFee = _controllerFee;\\n        rewardRate = _rewardRate;\\n        buyBackRate = _buyBackRate;\\n        withdrawFeeFactor = _withdrawFeeFactor;\\n        slippageFactor = _slippageFactor;\\n\\n        emit SetSettings(_controllerFee, _rewardRate, _buyBackRate, _withdrawFeeFactor, _slippageFactor);\\n    }\\n\\n    function _safeSwap(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        address _to\\n    ) internal {\\n        if (_amountIn > 0) {\\n            uint256[] memory amounts = IUniRouter02(uniRouterAddress).getAmountsOut(_amountIn, _path);\\n            uint256 amountOut = amounts[amounts.length - 1];\\n\\n            IUniRouter02(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                _amountIn,\\n                (amountOut * slippageFactor) / 1000,\\n                _path,\\n                _to,\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    function _safeSwapWmatic(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        address _to\\n    ) internal {\\n        if (_amountIn > 0) {\\n            uint256[] memory amounts = IUniRouter02(uniRouterAddress).getAmountsOut(_amountIn, _path);\\n            uint256 amountOut = amounts[amounts.length - 1];\\n\\n            IUniRouter02(uniRouterAddress).swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                _amountIn,\\n                (amountOut * slippageFactor) / 1000,\\n                _path,\\n                _to,\\n                block.timestamp\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b15ba5815defd0439adeeffd7886452b8f5383de6a542db8fbfe92483f67f27\",\"license\":\"MIT\"},\"contracts/vault/StrategyMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * This strategy is for the single asset in MasterChef\\n */\\n\\nimport \\\"./interfaces/IMasterChef.sol\\\";\\nimport \\\"./BaseStrategy.sol\\\";\\n\\ncontract StrategyMasterChef is BaseStrategy {\\n    using SafeERC20 for IERC20;\\n\\n    address public masterchefAddress;\\n    uint256 public pid; // MasterChef Pool id\\n\\n    constructor(\\n        address[] memory _initialWalletPath,\\n        address _vaultChefAddress,\\n        address _masterchefAddress,\\n        address _uniRouterAddress,\\n        uint256 _pid,\\n        address _wantAddress, // the token which we want to put in pool\\n        address _earnedAddress,\\n        address[] memory _earnedToWmaticPath\\n    ) {\\n        require(_initialWalletPath.length == 3, \\\"Parameter _initialWalletPath length shoud be 3\\\");\\n        require(\\n            _initialWalletPath[0] != address(0) && _initialWalletPath[1] != address(0) && _initialWalletPath[2] != address(0),\\n            \\\"Any of _initialWalletPath should not be ZERO\\\"\\n        );\\n        require(\\n            _wantAddress != address(0) && _earnedAddress != address(0),\\n            \\\"Want token or earned token should not be ZERO address\\\"\\n        );\\n        require(_wantAddress != _earnedAddress, \\\"Want token should not be equal to earned token\\\");\\n        govAddress = msg.sender;\\n        dcauAddress = _initialWalletPath[0];\\n        withdrawFeeAddress = _initialWalletPath[1];\\n        feeAddress = _initialWalletPath[2];\\n        vaultChefAddress = _vaultChefAddress;\\n        masterchefAddress = _masterchefAddress;\\n        uniRouterAddress = _uniRouterAddress;\\n\\n        wantAddress = _wantAddress;\\n\\n        pid = _pid;\\n        earnedAddress = _earnedAddress;\\n\\n        earnedToWmaticPath = _earnedToWmaticPath;\\n\\n        transferOwnership(vaultChefAddress);\\n        _resetAllowances();\\n    }\\n\\n    function earn() external override nonReentrant whenNotPaused onlyGov {\\n        // Harvest farm tokens\\n        _vaultHarvest();\\n\\n        // Converts farm tokens into want tokens\\n        uint256 earnedAmt = IERC20(earnedAddress).balanceOf(address(this));\\n\\n        if (earnedAmt > 0) {\\n            earnedAmt = distributeFees(earnedAmt);\\n            earnedAmt = buyBack(earnedAmt);\\n\\n            if (earnedAddress != wantAddress) {\\n                // Swap half earned to wantAddress\\n                address[] memory path = new address[](2);\\n                path[0] = earnedAddress;\\n                path[1] = wantAddress;\\n                _safeSwap(earnedAmt, path, address(this));\\n            }\\n            lastEarnBlock = block.number;\\n            _farm();\\n        }\\n    }\\n\\n    function _vaultDeposit(uint256 _amount) internal override {\\n        IMasterchef(masterchefAddress).deposit(pid, _amount);\\n    }\\n\\n    function _vaultWithdraw(uint256 _amount) internal override {\\n        IMasterchef(masterchefAddress).withdraw(pid, _amount);\\n    }\\n\\n    function _vaultHarvest() internal {\\n        IMasterchef(masterchefAddress).withdraw(pid, 0);\\n    }\\n\\n    function totalInUnderlying() public view override returns (uint256) {\\n        (uint256 amount, ) = IMasterchef(masterchefAddress).userInfo(pid, address(this));\\n        return amount;\\n    }\\n\\n    function wantLockedTotal() public view override returns (uint256) {\\n        return IERC20(wantAddress).balanceOf(address(this)) + totalInUnderlying();\\n    }\\n\\n    function _resetAllowances() internal override {\\n        IERC20(wantAddress).safeApprove(masterchefAddress, uint256(0));\\n        IERC20(wantAddress).safeIncreaseAllowance(masterchefAddress, type(uint256).max);\\n\\n        IERC20(earnedAddress).safeApprove(uniRouterAddress, uint256(0));\\n        IERC20(earnedAddress).safeIncreaseAllowance(uniRouterAddress, type(uint256).max);\\n    }\\n\\n    function _revokeAllowances() internal override {\\n        IERC20(wantAddress).safeApprove(masterchefAddress, uint256(0));\\n\\n        IERC20(earnedAddress).safeApprove(uniRouterAddress, uint256(0));\\n    }\\n\\n    function _emergencyVaultWithdraw() internal override {\\n        IMasterchef(masterchefAddress).emergencyWithdraw(pid);\\n    }\\n}\\n\",\"keccak256\":\"0xf3cd23837981836984d98f734da8bfdee69cb81b8eef214e4bc7d98dd11be46b\",\"license\":\"MIT\"},\"contracts/vault/interfaces/IMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMasterchef {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function userInfo(uint256 _pid, address _address) external view returns (uint256, uint256);\\n\\n    function harvest(uint256 _pid, address _to) external;\\n}\\n\",\"keccak256\":\"0x62c5e33455b5cf43ff6927269abecfa8e225d40a1d507b26c555e8f7ab1cc036\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405243600a556032600c556096600e556126ac600f556103b66010556013805460ff191690553480156200003557600080fd5b506040516200344e3803806200344e833981016040819052620000589162000a32565b6200006c62000066620003b0565b620003b4565b600180556002805460ff191690558751600314620000a75760405162461bcd60e51b81526004016200009e9062000d79565b60405180910390fd5b60006001600160a01b031688600081518110620000d457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415801562000130575060006001600160a01b0316886001815181106200011c57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b801562000179575060006001600160a01b0316886002815181106200016557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b620001985760405162461bcd60e51b81526004016200009e9062000d2d565b6001600160a01b03831615801590620001b957506001600160a01b03821615155b620001d85760405162461bcd60e51b81526004016200009e9062000c9b565b816001600160a01b0316836001600160a01b031614156200020d5760405162461bcd60e51b81526004016200009e9062000c07565b600980546001600160a01b03191633179055875188906000906200024157634e487b7160e01b600052603260045260246000fd5b6020026020010151600560006101000a8154816001600160a01b0302191690836001600160a01b03160217905550876001815181106200029157634e487b7160e01b600052603260045260246000fd5b6020026020010151600660006101000a8154816001600160a01b0302191690836001600160a01b0316021790555087600281518110620002e157634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600780546001600160a01b03199081166001600160a01b03938416179091556008805482168b841617905560138054610100600160a81b03199081166101008c86168102919091179092556004805484168b8616179055600280549091168885169092029190911790556014879055600380549091169185169190911790558151620003809160119190840190620008ef565b5060085462000398906001600160a01b031662000404565b620003a262000481565b505050505050505062000f0f565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6200040e620003b0565b6001600160a01b03166200042162000547565b6001600160a01b0316146200044a5760405162461bcd60e51b81526004016200009e9062000cf8565b6001600160a01b038116620004735760405162461bcd60e51b81526004016200009e9062000bc1565b6200047e81620003b4565b50565b601354600254620004b6916001600160a01b036101009283900481169290910416600062000556602090811b6200118a17901c565b601354600254620004ec916001600160a01b03610100928390048116929091041660001962000664602090811b620012b617901c565b60045460035462000518916001600160a01b039182169116600062000556602090811b6200118a17901c565b60045460035462000545916001600160a01b03918216911660001962000664602090811b620012b617901c565b565b6000546001600160a01b031690565b801580620005e55750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906200058f903090869060040162000b59565b60206040518083038186803b158015620005a857600080fd5b505afa158015620005bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005e3919062000b22565b155b620006045760405162461bcd60e51b81526004016200009e9062000e48565b6200065f8363095ea7b360e01b84846040516024016200062692919062000b73565b60408051808303601f190181529190526020810180516001600160e01b0319939093166001600160e01b03938416179052906200072116565b505050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b81526004016200069792919062000b59565b60206040518083038186803b158015620006b057600080fd5b505afa158015620006c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006eb919062000b22565b620006f7919062000ea5565b90506200071b8463095ea7b360e01b85846040516024016200062692919062000b73565b50505050565b60006200077d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620007bd60201b62001368179092919060201c565b8051909150156200065f57808060200190518101906200079e919062000b00565b6200065f5760405162461bcd60e51b81526004016200009e9062000dfe565b6060620007ce8484600085620007d8565b90505b9392505050565b606082471015620007fd5760405162461bcd60e51b81526004016200009e9062000c55565b6200080885620008a7565b620008275760405162461bcd60e51b81526004016200009e9062000dc7565b600080866001600160a01b0316858760405162000845919062000b3b565b60006040518083038185875af1925050503d806000811462000884576040519150601f19603f3d011682016040523d82523d6000602084013e62000889565b606091505b5090925090506200089c828286620008b1565b979650505050505050565b803b15155b919050565b60608315620008c2575081620007d1565b825115620008d35782518084602001fd5b8160405162461bcd60e51b81526004016200009e919062000b8c565b82805482825590600052602060002090810192821562000947579160200282015b828111156200094757825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000910565b506200095592915062000959565b5090565b5b808211156200095557600081556001016200095a565b80516001600160a01b0381168114620008ac57600080fd5b600082601f83011262000999578081fd5b815160206001600160401b0380831115620009b857620009b862000ef9565b81830260405183828201018181108482111715620009da57620009da62000ef9565b60405284815283810192508684018288018501891015620009f9578687fd5b8692505b8583101562000a265762000a118162000970565b845292840192600192909201918401620009fd565b50979650505050505050565b600080600080600080600080610100898b03121562000a4f578384fd5b88516001600160401b038082111562000a66578586fd5b62000a748c838d0162000988565b995062000a8460208c0162000970565b985062000a9460408c0162000970565b975062000aa460608c0162000970565b965060808b0151955062000abb60a08c0162000970565b945062000acb60c08c0162000970565b935060e08b015191508082111562000ae1578283fd5b5062000af08b828c0162000988565b9150509295985092959890939650565b60006020828403121562000b12578081fd5b81518015158114620007d1578182fd5b60006020828403121562000b34578081fd5b5051919050565b6000825162000b4f81846020870162000eca565b9190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b600060208252825180602084015262000bad81604085016020870162000eca565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252602e908201527f57616e7420746f6b656e2073686f756c64206e6f7420626520657175616c207460408201526d379032b0b93732b2103a37b5b2b760911b606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526035908201527f57616e7420746f6b656e206f72206561726e656420746f6b656e2073686f756c60408201527f64206e6f74206265205a45524f20616464726573730000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602c908201527f416e79206f66205f696e697469616c57616c6c6574506174682073686f756c6460408201526b206e6f74206265205a45524f60a01b606082015260800190565b6020808252602e908201527f506172616d65746572205f696e697469616c57616c6c657450617468206c656e60408201526d6774682073686f7564206265203360901b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6000821982111562000ec557634e487b7160e01b81526011600452602481fd5b500190565b60005b8381101562000ee757818101518382015260200162000ecd565b838111156200071b5750506000910152565b634e487b7160e01b600052604160045260246000fd5b61252f8062000f1f6000396000f3fe608060405234801561001057600080fd5b50600436106102625760003560e01c8063715018a611610156578063b6b55f25116100d3578063e719847411610097578063f2fde38b11610071578063f2fde38b1461040b578063ffbd3b1f1461041e578063ffbe9f1e1461034257610262565b8063e7198474146103f3578063e7a03679146103fb578063f10684541461040357610262565b8063b6b55f25146103b5578063b74cd242146103c8578063cead67c0146103d0578063cfad57a2146103d8578063d389800f146103eb57610262565b806384fa32ac1161011a57806384fa32ac1461038257806385f02dd614610395578063866b20181461039d5780638da5cb5b146103a55780638fefda06146103ad57610262565b8063715018a61461035a578063783478ad14610362578063784def8c1461036a5780637b0a47ee146103725780638456cb591461037a57610262565b806340c34b58116101e45780634700d305116101a85780634700d305146103325780635c975abb1461033a57806367057b6c1461034257806368f541621461034a578063693a090b1461035257610262565b806340c34b581461030a578063412753581461031257806342da4eb31461031a57806344a3955e1461032257806346008a071461032a57610262565b80632e1a7d4d1161022b5780632e1a7d4d146102ca5780632eda6f5b146102dd5780633220d732146102f05780633505b09f146102f85780633f4ba83a1461030257610262565b806256fbaa146102675780630fa4e01e146102855780631666fc7f1461029a578063178a8d07146102a2578063260ab48c146102aa575b600080fd5b61026f610426565b60405161027c9190611f71565b60405180910390f35b61028d61042f565b60405161027c919061238d565b61028d610435565b61028d6104c8565b6102bd6102b8366004611e1a565b6104ce565b60405161027c9190611f06565b61028d6102d8366004611e1a565b6104f8565b6102bd6102eb366004611e1a565b610796565b6102bd6107a6565b6103006107b5565b005b610300610814565b6102bd6108a7565b6102bd6108bb565b61028d6108ca565b61028d610967565b6102bd61096d565b61030061097c565b61026f6109f8565b61028d610a01565b61028d610a07565b6102bd610a0d565b610300610a1c565b6102bd610a67565b6102bd610a6d565b61028d610a7c565b610300610a82565b610300610390366004611e6d565b610ab4565b61028d610bda565b61028d610be0565b6102bd610be6565b61028d610bf5565b61028d6103c3366004611e1a565b610bfb565b61028d610e3f565b6102bd610e45565b6103006103e6366004611d19565b610e54565b610300610ed7565b6102bd6110ea565b6102bd6110f9565b61028d61110d565b610300610419366004611d19565b611113565b61028d611184565b60135460ff1681565b600a5481565b6013546014546040516393f1a40b60e01b815260009283926101009091046001600160a01b0316916393f1a40b91610471913090600401612396565b604080518083038186803b15801561048857600080fd5b505afa15801561049c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c09190611e4a565b509150505b90565b600e5481565b601181815481106104de57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610502611381565b6001600160a01b0316610513610be6565b6001600160a01b0316146105425760405162461bcd60e51b8152600401610539906121e5565b60405180910390fd5b600260015414156105655760405162461bcd60e51b8152600401610539906122c2565b6002600155816105875760405162461bcd60e51b81526004016105399061221a565b60006105916108ca565b6002546040516370a0823160e01b81529192506000916101009091046001600160a01b0316906370a08231906105cb903090600401611f06565b60206040518083038186803b1580156105e357600080fd5b505afa1580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b9190611e32565b9050808411156106be57610637610632828661248a565b611385565b6002546040516370a0823160e01b81526101009091046001600160a01b0316906370a082319061066b903090600401611f06565b60206040518083038186803b15801561068357600080fd5b505afa158015610697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bb9190611e32565b90505b83818111156106ca5750805b600083600b54876106db919061246b565b6106e5919061244b565b9050600b548111156106f65750600b545b80600b54610704919061248a565b600b55600f546000906127109061071b908261248a565b610725908561246b565b61072f919061244b565b9050801561076657600654600254610759916001600160a01b0361010090920482169116836113f1565b610763818461248a565b92505b600854600254610788916001600160a01b0361010090920482169116856113f1565b506001805595945050505050565b601281815481106104de57600080fd5b6008546001600160a01b031681565b6009546001600160a01b031633146107df5760405162461bcd60e51b81526004016105399061209a565b6107e7611410565b60405133907f07a306d96c243284946e55743fe8bc35109c65f66d9e27955810577aac4828d690600090a2565b6009546001600160a01b0316331461083e5760405162461bcd60e51b81526004016105399061209a565b60135460ff16156108615760405162461bcd60e51b8152600401610539906121a3565b61086961149c565b610871611410565b61087961150a565b5060405133907fcd362254255a88720afce533b7c0def89b2fa7145e7cbd1fafac32da507ca00b90600090a2565b60135461010090046001600160a01b031681565b6007546001600160a01b031681565b60006108d4610435565b6002546040516370a0823160e01b81526101009091046001600160a01b0316906370a0823190610908903090600401611f06565b60206040518083038186803b15801561092057600080fd5b505afa158015610934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109589190611e32565b6109629190612433565b905090565b600b5481565b6009546001600160a01b031681565b6009546001600160a01b031633146109a65760405162461bcd60e51b81526004016105399061209a565b6013805460ff191660011790556109bb6115d7565b6109c3611632565b6109cb611677565b60405133907fa0281c9359a6afac738fb86a45f94a2482ed1f0bfbdf7ce5ef88046acf47160c90600090a2565b60025460ff1690565b61271081565b600f5481565b6004546001600160a01b031681565b610a24611381565b6001600160a01b0316610a35610be6565b6001600160a01b031614610a5b5760405162461bcd60e51b8152600401610539906121e5565b610a6560006116da565b565b61dead81565b6006546001600160a01b031681565b600d5481565b6009546001600160a01b03163314610aac5760405162461bcd60e51b81526004016105399061209a565b610a656115d7565b6009546001600160a01b03163314610ade5760405162461bcd60e51b81526004016105399061209a565b6103e883610aec8688612433565b610af69190612433565b1115610b145760405162461bcd60e51b815260040161053990612356565b6126ac821015610b365760405162461bcd60e51b81526004016105399061201d565b612710821115610b585760405162461bcd60e51b815260040161053990611fe6565b6103e3811115610b7a5760405162461bcd60e51b8152600401610539906120b8565b600c859055600d849055600e839055600f82905560108190556040517fc67e0b149a57a70fa44a531a46c2c6d8e0b242fa12f459f250012c3a5987d29a90610bcb9087908790879087908790612410565b60405180910390a15050505050565b600c5481565b6126ac81565b6000546001600160a01b031690565b6103e881565b6000610c05611381565b6001600160a01b0316610c16610be6565b6001600160a01b031614610c3c5760405162461bcd60e51b8152600401610539906121e5565b60026001541415610c5f5760405162461bcd60e51b8152600401610539906122c2565b6002600155610c6c6109f8565b15610c895760405162461bcd60e51b81526004016105399061216c565b6000610c936108ca565b6002546040516370a0823160e01b81529192506000916101009091046001600160a01b0316906370a0823190610ccd903090600401611f06565b60206040518083038186803b158015610ce557600080fd5b505afa158015610cf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1d9190611e32565b600254909150610d3d9061010090046001600160a01b0316333087611737565b6002546040516370a0823160e01b8152829161010090046001600160a01b0316906370a0823190610d72903090600401611f06565b60206040518083038186803b158015610d8a57600080fd5b505afa158015610d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc29190611e32565b610dcc919061248a565b935060008411610dee5760405162461bcd60e51b8152600401610539906120ef565b6000610df861150a565b600b54909150819015610e215783600b5483610e14919061246b565b610e1e919061244b565b90505b80600b54610e2f9190612433565b600b556001805595945050505050565b6103e381565b6005546001600160a01b031681565b6009546001600160a01b03163314610e7e5760405162461bcd60e51b81526004016105399061209a565b6009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811790915560405133907f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f78590600090a350565b60026001541415610efa5760405162461bcd60e51b8152600401610539906122c2565b6002600155610f076109f8565b15610f245760405162461bcd60e51b81526004016105399061216c565b6009546001600160a01b03163314610f4e5760405162461bcd60e51b81526004016105399061209a565b610f56611758565b6003546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610f87903090600401611f06565b60206040518083038186803b158015610f9f57600080fd5b505afa158015610fb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd79190611e32565b905080156110e357610fe881611790565b9050610ff381611842565b60025460035491925061010090046001600160a01b039081169116146110d557604080516002808252606082018352600092602083019080368337505060035482519293506001600160a01b03169183915060009061106257634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152600254825161010090910490911690829060019081106110a857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506110d3828230611908565b505b43600a556110e161150a565b505b5060018055565b6003546001600160a01b031681565b60025461010090046001600160a01b031681565b60145481565b61111b611381565b6001600160a01b031661112c610be6565b6001600160a01b0316146111525760405162461bcd60e51b8152600401610539906121e5565b6001600160a01b0381166111785760405162461bcd60e51b815260040161053990612054565b611181816116da565b50565b60105481565b8015806112125750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906111c09030908690600401611f1a565b60206040518083038186803b1580156111d857600080fd5b505afa1580156111ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112109190611e32565b155b61122e5760405162461bcd60e51b8152600401610539906122f9565b6112b18363095ea7b360e01b848460405160240161124d929190611f58565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611a61565b505050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b81526004016112e7929190611f1a565b60206040518083038186803b1580156112ff57600080fd5b505afa158015611313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113379190611e32565b6113419190612433565b90506113628463095ea7b360e01b858460405160240161124d929190611f58565b50505050565b60606113778484600085611af0565b90505b9392505050565b3390565b601354601454604051630441a3e760e41b81526101009092046001600160a01b03169163441a3e70916113bc9185906004016123c6565b600060405180830381600087803b1580156113d657600080fd5b505af11580156113ea573d6000803e3d6000fd5b5050505050565b6112b18363a9059cbb60e01b848460405160240161124d929190611f58565b601354600254611437916001600160a01b036101009283900481169290910416600061118a565b60135460025461145f916001600160a01b0361010092839004811692909104166000196112b6565b60045460035461147d916001600160a01b039182169116600061118a565b600454600354610a65916001600160a01b0391821691166000196112b6565b6114a46109f8565b6114c05760405162461bcd60e51b815260040161053990611faf565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6114f3611381565b6040516115009190611f06565b60405180910390a1565b6002546040516370a0823160e01b815260009182916101009091046001600160a01b0316906370a0823190611543903090600401611f06565b60206040518083038186803b15801561155b57600080fd5b505afa15801561156f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115939190611e32565b9050806115a45760009150506104c5565b60006115ae610435565b90506115b982611bb0565b60006115c3610435565b90506115cf828261248a565b935050505090565b6115df6109f8565b156115fc5760405162461bcd60e51b81526004016105399061216c565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586114f3611381565b601354600254611659916001600160a01b036101009283900481169290910416600061118a565b600454600354610a65916001600160a01b039182169116600061118a565b601354601454604051632989754760e11b81526101009092046001600160a01b031691635312ea8e916116ac9160040161238d565b600060405180830381600087803b1580156116c657600080fd5b505af1158015611362573d6000803e3d6000fd5b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611362846323b872dd60e01b85858560405160240161124d93929190611f34565b601354601454604051630441a3e760e41b81526101009092046001600160a01b03169163441a3e70916116ac916000906004016123c6565b600c546000901561183a576000612710600c54846117ae919061246b565b6117b8919061244b565b905061182c81601180548060200260200160405190810160405280929190818152602001828054801561181457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116117f6575b50506007546001600160a01b03169250611be7915050565b611836818461248a565b9250505b50805b919050565b6005546003546000916001600160a01b039182169116141561186557508061183d565b600e541561183a576000612710600e5484611880919061246b565b61188a919061244b565b6005546003549192506001600160a01b0391821691161461182c5761182c8160128054806020026020016040519081016040528092919081815260200182805480156118ff57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116118e1575b505050505061dead5b82156112b1576004805460405163d06ca61f60e01b81526000926001600160a01b039092169163d06ca61f916119429188918891016123ad565b60006040518083038186803b15801561195a57600080fd5b505afa15801561196e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119969190810190611d40565b9050600081600183516119a9919061248a565b815181106119c757634e487b7160e01b600052603260045260246000fd5b60209081029190910101516004546010549192506001600160a01b031690635c11d7959087906103e8906119fb908661246b565b611a05919061244b565b8787426040518663ffffffff1660e01b8152600401611a289594939291906123d4565b600060405180830381600087803b158015611a4257600080fd5b505af1158015611a56573d6000803e3d6000fd5b505050505050505050565b6000611ab6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113689092919063ffffffff16565b8051909150156112b15780806020019051810190611ad49190611dfa565b6112b15760405162461bcd60e51b815260040161053990612278565b606082471015611b125760405162461bcd60e51b815260040161053990612126565b611b1b85611cda565b611b375760405162461bcd60e51b815260040161053990612241565b600080866001600160a01b03168587604051611b539190611eea565b60006040518083038185875af1925050503d8060008114611b90576040519150601f19603f3d011682016040523d82523d6000602084013e611b95565b606091505b5091509150611ba5828286611ce0565b979650505050505050565b601354601454604051631c57762b60e31b81526101009092046001600160a01b03169163e2bbb158916113bc9185906004016123c6565b82156112b1576004805460405163d06ca61f60e01b81526000926001600160a01b039092169163d06ca61f91611c219188918891016123ad565b60006040518083038186803b158015611c3957600080fd5b505afa158015611c4d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c759190810190611d40565b905060008160018351611c88919061248a565b81518110611ca657634e487b7160e01b600052603260045260246000fd5b60209081029190910101516004546010549192506001600160a01b03169063791ac9479087906103e8906119fb908661246b565b3b151590565b60608315611cef57508161137a565b825115611cff5782518084602001fd5b8160405162461bcd60e51b81526004016105399190611f7c565b600060208284031215611d2a578081fd5b81356001600160a01b038116811461137a578182fd5b60006020808385031215611d52578182fd5b825167ffffffffffffffff80821115611d69578384fd5b818501915085601f830112611d7c578384fd5b815181811115611d8e57611d8e6124e3565b83810260405185828201018181108582111715611dad57611dad6124e3565b604052828152858101935084860182860187018a1015611dcb578788fd5b8795505b83861015611ded578051855260019590950194938601938601611dcf565b5098975050505050505050565b600060208284031215611e0b578081fd5b8151801515811461137a578182fd5b600060208284031215611e2b578081fd5b5035919050565b600060208284031215611e43578081fd5b5051919050565b60008060408385031215611e5c578081fd5b505080516020909101519092909150565b600080600080600060a08688031215611e84578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000815180845260208085019450808401835b83811015611edf5781516001600160a01b031687529582019590820190600101611eba565b509495945050505050565b60008251611efc8184602087016124a1565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152611f9b8160408501602087016124a1565b601f01601f19169190910160400192915050565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b6020808252601b908201527f5f7769746864726177466565466163746f7220746f6f20686967680000000000604082015260600190565b6020808252601a908201527f5f7769746864726177466565466163746f7220746f6f206c6f77000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526004908201526310b3b7bb60e11b604082015260600190565b60208082526018908201527f5f736c697070616765466163746f7220746f6f20686967680000000000000000604082015260600190565b60208082526019908201527f5765206f6e6c792061636365707420616d6f756e74203e203000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526022908201527f63616e6e6f7420756e706175736520612070616e69636b656420737472617465604082015261677960f01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c05f77616e74416d74206973203609c1b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6020808252600e908201527f4d617820666565206f6620313025000000000000000000000000000000000000604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6000838252604060208301526113776040830184611ea7565b918252602082015260400190565b600086825285602083015260a060408301526123f360a0830186611ea7565b6001600160a01b0394909416606083015250608001529392505050565b948552602085019390935260408401919091526060830152608082015260a00190565b60008219821115612446576124466124cd565b500190565b60008261246657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612485576124856124cd565b500290565b60008282101561249c5761249c6124cd565b500390565b60005b838110156124bc5781810151838201526020016124a4565b838111156113625750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e731ce3ebdb3202faf0b949ca6bafd86f0ddbc59d0654422e28f192869889ad864736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102625760003560e01c8063715018a611610156578063b6b55f25116100d3578063e719847411610097578063f2fde38b11610071578063f2fde38b1461040b578063ffbd3b1f1461041e578063ffbe9f1e1461034257610262565b8063e7198474146103f3578063e7a03679146103fb578063f10684541461040357610262565b8063b6b55f25146103b5578063b74cd242146103c8578063cead67c0146103d0578063cfad57a2146103d8578063d389800f146103eb57610262565b806384fa32ac1161011a57806384fa32ac1461038257806385f02dd614610395578063866b20181461039d5780638da5cb5b146103a55780638fefda06146103ad57610262565b8063715018a61461035a578063783478ad14610362578063784def8c1461036a5780637b0a47ee146103725780638456cb591461037a57610262565b806340c34b58116101e45780634700d305116101a85780634700d305146103325780635c975abb1461033a57806367057b6c1461034257806368f541621461034a578063693a090b1461035257610262565b806340c34b581461030a578063412753581461031257806342da4eb31461031a57806344a3955e1461032257806346008a071461032a57610262565b80632e1a7d4d1161022b5780632e1a7d4d146102ca5780632eda6f5b146102dd5780633220d732146102f05780633505b09f146102f85780633f4ba83a1461030257610262565b806256fbaa146102675780630fa4e01e146102855780631666fc7f1461029a578063178a8d07146102a2578063260ab48c146102aa575b600080fd5b61026f610426565b60405161027c9190611f71565b60405180910390f35b61028d61042f565b60405161027c919061238d565b61028d610435565b61028d6104c8565b6102bd6102b8366004611e1a565b6104ce565b60405161027c9190611f06565b61028d6102d8366004611e1a565b6104f8565b6102bd6102eb366004611e1a565b610796565b6102bd6107a6565b6103006107b5565b005b610300610814565b6102bd6108a7565b6102bd6108bb565b61028d6108ca565b61028d610967565b6102bd61096d565b61030061097c565b61026f6109f8565b61028d610a01565b61028d610a07565b6102bd610a0d565b610300610a1c565b6102bd610a67565b6102bd610a6d565b61028d610a7c565b610300610a82565b610300610390366004611e6d565b610ab4565b61028d610bda565b61028d610be0565b6102bd610be6565b61028d610bf5565b61028d6103c3366004611e1a565b610bfb565b61028d610e3f565b6102bd610e45565b6103006103e6366004611d19565b610e54565b610300610ed7565b6102bd6110ea565b6102bd6110f9565b61028d61110d565b610300610419366004611d19565b611113565b61028d611184565b60135460ff1681565b600a5481565b6013546014546040516393f1a40b60e01b815260009283926101009091046001600160a01b0316916393f1a40b91610471913090600401612396565b604080518083038186803b15801561048857600080fd5b505afa15801561049c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c09190611e4a565b509150505b90565b600e5481565b601181815481106104de57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610502611381565b6001600160a01b0316610513610be6565b6001600160a01b0316146105425760405162461bcd60e51b8152600401610539906121e5565b60405180910390fd5b600260015414156105655760405162461bcd60e51b8152600401610539906122c2565b6002600155816105875760405162461bcd60e51b81526004016105399061221a565b60006105916108ca565b6002546040516370a0823160e01b81529192506000916101009091046001600160a01b0316906370a08231906105cb903090600401611f06565b60206040518083038186803b1580156105e357600080fd5b505afa1580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b9190611e32565b9050808411156106be57610637610632828661248a565b611385565b6002546040516370a0823160e01b81526101009091046001600160a01b0316906370a082319061066b903090600401611f06565b60206040518083038186803b15801561068357600080fd5b505afa158015610697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bb9190611e32565b90505b83818111156106ca5750805b600083600b54876106db919061246b565b6106e5919061244b565b9050600b548111156106f65750600b545b80600b54610704919061248a565b600b55600f546000906127109061071b908261248a565b610725908561246b565b61072f919061244b565b9050801561076657600654600254610759916001600160a01b0361010090920482169116836113f1565b610763818461248a565b92505b600854600254610788916001600160a01b0361010090920482169116856113f1565b506001805595945050505050565b601281815481106104de57600080fd5b6008546001600160a01b031681565b6009546001600160a01b031633146107df5760405162461bcd60e51b81526004016105399061209a565b6107e7611410565b60405133907f07a306d96c243284946e55743fe8bc35109c65f66d9e27955810577aac4828d690600090a2565b6009546001600160a01b0316331461083e5760405162461bcd60e51b81526004016105399061209a565b60135460ff16156108615760405162461bcd60e51b8152600401610539906121a3565b61086961149c565b610871611410565b61087961150a565b5060405133907fcd362254255a88720afce533b7c0def89b2fa7145e7cbd1fafac32da507ca00b90600090a2565b60135461010090046001600160a01b031681565b6007546001600160a01b031681565b60006108d4610435565b6002546040516370a0823160e01b81526101009091046001600160a01b0316906370a0823190610908903090600401611f06565b60206040518083038186803b15801561092057600080fd5b505afa158015610934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109589190611e32565b6109629190612433565b905090565b600b5481565b6009546001600160a01b031681565b6009546001600160a01b031633146109a65760405162461bcd60e51b81526004016105399061209a565b6013805460ff191660011790556109bb6115d7565b6109c3611632565b6109cb611677565b60405133907fa0281c9359a6afac738fb86a45f94a2482ed1f0bfbdf7ce5ef88046acf47160c90600090a2565b60025460ff1690565b61271081565b600f5481565b6004546001600160a01b031681565b610a24611381565b6001600160a01b0316610a35610be6565b6001600160a01b031614610a5b5760405162461bcd60e51b8152600401610539906121e5565b610a6560006116da565b565b61dead81565b6006546001600160a01b031681565b600d5481565b6009546001600160a01b03163314610aac5760405162461bcd60e51b81526004016105399061209a565b610a656115d7565b6009546001600160a01b03163314610ade5760405162461bcd60e51b81526004016105399061209a565b6103e883610aec8688612433565b610af69190612433565b1115610b145760405162461bcd60e51b815260040161053990612356565b6126ac821015610b365760405162461bcd60e51b81526004016105399061201d565b612710821115610b585760405162461bcd60e51b815260040161053990611fe6565b6103e3811115610b7a5760405162461bcd60e51b8152600401610539906120b8565b600c859055600d849055600e839055600f82905560108190556040517fc67e0b149a57a70fa44a531a46c2c6d8e0b242fa12f459f250012c3a5987d29a90610bcb9087908790879087908790612410565b60405180910390a15050505050565b600c5481565b6126ac81565b6000546001600160a01b031690565b6103e881565b6000610c05611381565b6001600160a01b0316610c16610be6565b6001600160a01b031614610c3c5760405162461bcd60e51b8152600401610539906121e5565b60026001541415610c5f5760405162461bcd60e51b8152600401610539906122c2565b6002600155610c6c6109f8565b15610c895760405162461bcd60e51b81526004016105399061216c565b6000610c936108ca565b6002546040516370a0823160e01b81529192506000916101009091046001600160a01b0316906370a0823190610ccd903090600401611f06565b60206040518083038186803b158015610ce557600080fd5b505afa158015610cf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1d9190611e32565b600254909150610d3d9061010090046001600160a01b0316333087611737565b6002546040516370a0823160e01b8152829161010090046001600160a01b0316906370a0823190610d72903090600401611f06565b60206040518083038186803b158015610d8a57600080fd5b505afa158015610d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc29190611e32565b610dcc919061248a565b935060008411610dee5760405162461bcd60e51b8152600401610539906120ef565b6000610df861150a565b600b54909150819015610e215783600b5483610e14919061246b565b610e1e919061244b565b90505b80600b54610e2f9190612433565b600b556001805595945050505050565b6103e381565b6005546001600160a01b031681565b6009546001600160a01b03163314610e7e5760405162461bcd60e51b81526004016105399061209a565b6009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811790915560405133907f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f78590600090a350565b60026001541415610efa5760405162461bcd60e51b8152600401610539906122c2565b6002600155610f076109f8565b15610f245760405162461bcd60e51b81526004016105399061216c565b6009546001600160a01b03163314610f4e5760405162461bcd60e51b81526004016105399061209a565b610f56611758565b6003546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610f87903090600401611f06565b60206040518083038186803b158015610f9f57600080fd5b505afa158015610fb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd79190611e32565b905080156110e357610fe881611790565b9050610ff381611842565b60025460035491925061010090046001600160a01b039081169116146110d557604080516002808252606082018352600092602083019080368337505060035482519293506001600160a01b03169183915060009061106257634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152600254825161010090910490911690829060019081106110a857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506110d3828230611908565b505b43600a556110e161150a565b505b5060018055565b6003546001600160a01b031681565b60025461010090046001600160a01b031681565b60145481565b61111b611381565b6001600160a01b031661112c610be6565b6001600160a01b0316146111525760405162461bcd60e51b8152600401610539906121e5565b6001600160a01b0381166111785760405162461bcd60e51b815260040161053990612054565b611181816116da565b50565b60105481565b8015806112125750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906111c09030908690600401611f1a565b60206040518083038186803b1580156111d857600080fd5b505afa1580156111ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112109190611e32565b155b61122e5760405162461bcd60e51b8152600401610539906122f9565b6112b18363095ea7b360e01b848460405160240161124d929190611f58565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611a61565b505050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b81526004016112e7929190611f1a565b60206040518083038186803b1580156112ff57600080fd5b505afa158015611313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113379190611e32565b6113419190612433565b90506113628463095ea7b360e01b858460405160240161124d929190611f58565b50505050565b60606113778484600085611af0565b90505b9392505050565b3390565b601354601454604051630441a3e760e41b81526101009092046001600160a01b03169163441a3e70916113bc9185906004016123c6565b600060405180830381600087803b1580156113d657600080fd5b505af11580156113ea573d6000803e3d6000fd5b5050505050565b6112b18363a9059cbb60e01b848460405160240161124d929190611f58565b601354600254611437916001600160a01b036101009283900481169290910416600061118a565b60135460025461145f916001600160a01b0361010092839004811692909104166000196112b6565b60045460035461147d916001600160a01b039182169116600061118a565b600454600354610a65916001600160a01b0391821691166000196112b6565b6114a46109f8565b6114c05760405162461bcd60e51b815260040161053990611faf565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6114f3611381565b6040516115009190611f06565b60405180910390a1565b6002546040516370a0823160e01b815260009182916101009091046001600160a01b0316906370a0823190611543903090600401611f06565b60206040518083038186803b15801561155b57600080fd5b505afa15801561156f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115939190611e32565b9050806115a45760009150506104c5565b60006115ae610435565b90506115b982611bb0565b60006115c3610435565b90506115cf828261248a565b935050505090565b6115df6109f8565b156115fc5760405162461bcd60e51b81526004016105399061216c565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586114f3611381565b601354600254611659916001600160a01b036101009283900481169290910416600061118a565b600454600354610a65916001600160a01b039182169116600061118a565b601354601454604051632989754760e11b81526101009092046001600160a01b031691635312ea8e916116ac9160040161238d565b600060405180830381600087803b1580156116c657600080fd5b505af1158015611362573d6000803e3d6000fd5b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611362846323b872dd60e01b85858560405160240161124d93929190611f34565b601354601454604051630441a3e760e41b81526101009092046001600160a01b03169163441a3e70916116ac916000906004016123c6565b600c546000901561183a576000612710600c54846117ae919061246b565b6117b8919061244b565b905061182c81601180548060200260200160405190810160405280929190818152602001828054801561181457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116117f6575b50506007546001600160a01b03169250611be7915050565b611836818461248a565b9250505b50805b919050565b6005546003546000916001600160a01b039182169116141561186557508061183d565b600e541561183a576000612710600e5484611880919061246b565b61188a919061244b565b6005546003549192506001600160a01b0391821691161461182c5761182c8160128054806020026020016040519081016040528092919081815260200182805480156118ff57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116118e1575b505050505061dead5b82156112b1576004805460405163d06ca61f60e01b81526000926001600160a01b039092169163d06ca61f916119429188918891016123ad565b60006040518083038186803b15801561195a57600080fd5b505afa15801561196e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119969190810190611d40565b9050600081600183516119a9919061248a565b815181106119c757634e487b7160e01b600052603260045260246000fd5b60209081029190910101516004546010549192506001600160a01b031690635c11d7959087906103e8906119fb908661246b565b611a05919061244b565b8787426040518663ffffffff1660e01b8152600401611a289594939291906123d4565b600060405180830381600087803b158015611a4257600080fd5b505af1158015611a56573d6000803e3d6000fd5b505050505050505050565b6000611ab6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113689092919063ffffffff16565b8051909150156112b15780806020019051810190611ad49190611dfa565b6112b15760405162461bcd60e51b815260040161053990612278565b606082471015611b125760405162461bcd60e51b815260040161053990612126565b611b1b85611cda565b611b375760405162461bcd60e51b815260040161053990612241565b600080866001600160a01b03168587604051611b539190611eea565b60006040518083038185875af1925050503d8060008114611b90576040519150601f19603f3d011682016040523d82523d6000602084013e611b95565b606091505b5091509150611ba5828286611ce0565b979650505050505050565b601354601454604051631c57762b60e31b81526101009092046001600160a01b03169163e2bbb158916113bc9185906004016123c6565b82156112b1576004805460405163d06ca61f60e01b81526000926001600160a01b039092169163d06ca61f91611c219188918891016123ad565b60006040518083038186803b158015611c3957600080fd5b505afa158015611c4d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c759190810190611d40565b905060008160018351611c88919061248a565b81518110611ca657634e487b7160e01b600052603260045260246000fd5b60209081029190910101516004546010549192506001600160a01b03169063791ac9479087906103e8906119fb908661246b565b3b151590565b60608315611cef57508161137a565b825115611cff5782518084602001fd5b8160405162461bcd60e51b81526004016105399190611f7c565b600060208284031215611d2a578081fd5b81356001600160a01b038116811461137a578182fd5b60006020808385031215611d52578182fd5b825167ffffffffffffffff80821115611d69578384fd5b818501915085601f830112611d7c578384fd5b815181811115611d8e57611d8e6124e3565b83810260405185828201018181108582111715611dad57611dad6124e3565b604052828152858101935084860182860187018a1015611dcb578788fd5b8795505b83861015611ded578051855260019590950194938601938601611dcf565b5098975050505050505050565b600060208284031215611e0b578081fd5b8151801515811461137a578182fd5b600060208284031215611e2b578081fd5b5035919050565b600060208284031215611e43578081fd5b5051919050565b60008060408385031215611e5c578081fd5b505080516020909101519092909150565b600080600080600060a08688031215611e84578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000815180845260208085019450808401835b83811015611edf5781516001600160a01b031687529582019590820190600101611eba565b509495945050505050565b60008251611efc8184602087016124a1565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152611f9b8160408501602087016124a1565b601f01601f19169190910160400192915050565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b6020808252601b908201527f5f7769746864726177466565466163746f7220746f6f20686967680000000000604082015260600190565b6020808252601a908201527f5f7769746864726177466565466163746f7220746f6f206c6f77000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526004908201526310b3b7bb60e11b604082015260600190565b60208082526018908201527f5f736c697070616765466163746f7220746f6f20686967680000000000000000604082015260600190565b60208082526019908201527f5765206f6e6c792061636365707420616d6f756e74203e203000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526022908201527f63616e6e6f7420756e706175736520612070616e69636b656420737472617465604082015261677960f01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c05f77616e74416d74206973203609c1b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6020808252600e908201527f4d617820666565206f6620313025000000000000000000000000000000000000604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6000838252604060208301526113776040830184611ea7565b918252602082015260400190565b600086825285602083015260a060408301526123f360a0830186611ea7565b6001600160a01b0394909416606083015250608001529392505050565b948552602085019390935260408401919091526060830152608082015260a00190565b60008219821115612446576124466124cd565b500190565b60008261246657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612485576124856124cd565b500290565b60008282101561249c5761249c6124cd565b500390565b60005b838110156124bc5781810151838201526020016124a4565b838111156113625750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e731ce3ebdb3202faf0b949ca6bafd86f0ddbc59d0654422e28f192869889ad864736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 206,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 121,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 10127,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "wantAddress",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10129,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "earnedAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10131,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "uniRouterAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10133,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "dcauAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10135,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "withdrawFeeAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10137,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "feeAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 10139,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "vaultChefAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 10141,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "govAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 10145,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "lastEarnBlock",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 10147,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "sharesTotal",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 10153,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "controllerFee",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 10155,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "rewardRate",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 10158,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "buyBackRate",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 10167,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "withdrawFeeFactor",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 10176,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "slippageFactor",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 10182,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "earnedToWmaticPath",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10185,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "earnedToDcauPath",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10188,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "HasPanicked",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 11244,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "masterchefAddress",
        "offset": 1,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 11246,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "pid",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}