{
  "address": "0x224614E0201185f1b0203b509843a5CD4507B9d6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_equipment",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_owner",
          "type": "address[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_type",
          "type": "uint16[]"
        },
        {
          "internalType": "uint64[]",
          "name": "_damage",
          "type": "uint64[]"
        },
        {
          "internalType": "uint64[]",
          "name": "_defense",
          "type": "uint64[]"
        },
        {
          "internalType": "uint64[]",
          "name": "_durability",
          "type": "uint64[]"
        },
        {
          "internalType": "uint64[]",
          "name": "_speed",
          "type": "uint64[]"
        },
        {
          "internalType": "uint64[]",
          "name": "_endurance",
          "type": "uint64[]"
        },
        {
          "internalType": "uint64[]",
          "name": "_luck",
          "type": "uint64[]"
        }
      ],
      "name": "bulkMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_character",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "transferCharacterOwnerShip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc1645354b7c097d9110b43ed540b63f081875b40e6d96de3346f8935cc2b609e",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0x224614E0201185f1b0203b509843a5CD4507B9d6",
    "transactionIndex": 2,
    "gasUsed": "734186",
    "logsBloom": "0x
    "blockHash": "0x2f4d743628bae57cb7b95f82e1799eca8d25102240c5ac19848a198c33c94c42",
    "transactionHash": "0xc1645354b7c097d9110b43ed540b63f081875b40e6d96de3346f8935cc2b609e",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 9750414,
        "transactionHash": "0xc1645354b7c097d9110b43ed540b63f081875b40e6d96de3346f8935cc2b609e",
        "address": "0x224614E0201185f1b0203b509843a5CD4507B9d6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x2f4d743628bae57cb7b95f82e1799eca8d25102240c5ac19848a198c33c94c42"
      }
    ],
    "blockNumber": 9750414,
    "cumulativeGasUsed": "836908",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "45e2e59d5c6be8a4f1c89813c62c1e03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_equipment\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_owner\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_type\",\"type\":\"uint16[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_damage\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_defense\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_durability\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_speed\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_endurance\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_luck\",\"type\":\"uint64[]\"}],\"name\":\"bulkMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_character\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferCharacterOwnerShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bulkMint(address,address[],uint16[],uint64[],uint64[],uint64[],uint64[],uint64[],uint64[])\":{\"notice\":\"Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/DragonEquipmentBulkMint.sol\":\"DragonEquipmentBulkMint\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/mocks/DragonEquipmentBulkMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n/**\\r\\n * @dev This smart contract is for easy bulk mint of DragonPlayerCharacter or something else\\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./IDragonEquipment.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\n\\r\\ncontract DragonEquipmentBulkMint is Ownable, ERC721Holder {\\r\\n    constructor() {}\\r\\n\\r\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\r\\n    function bulkMint(\\r\\n        address _equipment,\\r\\n        address[] memory _owner,\\r\\n        uint16[] memory _type,\\r\\n        uint64[] memory _damage,\\r\\n        uint64[] memory _defense,\\r\\n        uint64[] memory _durability,\\r\\n        uint64[] memory _speed,\\r\\n        uint64[] memory _endurance,\\r\\n        uint64[] memory _luck\\r\\n    ) public onlyOwner {\\r\\n        uint256 len = _owner.length;\\r\\n        require(\\r\\n                len == _type.length &&\\r\\n                len == _damage.length &&\\r\\n                len == _defense.length &&\\r\\n                len == _durability.length &&\\r\\n                len == _speed.length &&\\r\\n                len == _endurance.length &&\\r\\n                len == _luck.length,\\r\\n            \\\"Not equal params length\\\"\\r\\n        );\\r\\n        uint256 ii;\\r\\n        \\r\\n        for (ii = 0; ii < len; ii++) {\\r\\n            uint256 itemId = IDragonEquipment(_equipment).mintNewEquipment(\\r\\n                _owner[ii],\\r\\n                _type[ii],\\r\\n                _damage[ii],\\r\\n                _defense[ii],\\r\\n                _durability[ii],\\r\\n                _speed[ii],\\r\\n                _endurance[ii],\\r\\n                _luck[ii]\\r\\n            );\\r\\n            IERC721(_equipment).transferFrom(address(this), msg.sender, itemId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferCharacterOwnerShip(address _character, address _to) external onlyOwner {\\r\\n        IDragonEquipment(_character).transferOwnership(_to);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbb0d21158e4e3aa140b93d910fdb12e1015936c6ce0b4113eb7bbde30f07f320\",\"license\":\"MIT\"},\"contracts/mocks/IDragonEquipment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of DragonPlayerCharacter.\\r\\n */\\r\\ninterface IDragonEquipment {\\r\\n    function mintNewEquipment(\\r\\n        address _owner,\\r\\n        uint16 _type,\\r\\n        uint64 _damage,\\r\\n        uint64 _defense,\\r\\n        uint64 _durability,\\r\\n        uint64 _speed,\\r\\n        uint64 _endurance,\\r\\n        uint64 _luck\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function transferOwnership(address _to) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9c39519055115b57267f3bb5f7fc62397b60f2dac22f8ca224dbfe220415fbc0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002161001c610026565b61002a565b61007a565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610bde806100896000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100bd578063a75d4837146100d2578063f2fde38b146100e557610072565b806312431f1514610077578063150b7a021461008c578063715018a6146100b5575b600080fd5b61008a610085366004610766565b6100f8565b005b61009f61009a366004610798565b6101a2565b6040516100ac9190610a3e565b60405180910390f35b61008a6101b2565b6100c56101fd565b6040516100ac91906109b0565b61008a6100e0366004610850565b61020c565b61008a6100f3366004610745565b61050c565b61010061057d565b6001600160a01b03166101116101fd565b6001600160a01b0316146101405760405162461bcd60e51b815260040161013790610ae8565b60405180910390fd5b60405163f2fde38b60e01b81526001600160a01b0383169063f2fde38b9061016c9084906004016109b0565b600060405180830381600087803b15801561018657600080fd5b505af115801561019a573d6000803e3d6000fd5b505050505050565b630a85bd0160e11b949350505050565b6101ba61057d565b6001600160a01b03166101cb6101fd565b6001600160a01b0316146101f15760405162461bcd60e51b815260040161013790610ae8565b6101fb6000610581565b565b6000546001600160a01b031690565b61021461057d565b6001600160a01b03166102256101fd565b6001600160a01b03161461024b5760405162461bcd60e51b815260040161013790610ae8565b875187518114801561025d5750865181145b80156102695750855181145b80156102755750845181145b80156102815750835181145b801561028d5750825181145b80156102995750815181145b6102b55760405162461bcd60e51b815260040161013790610ab1565b60005b818110156104ff5760008b6001600160a01b031663824ef1468c84815181106102f157634e487b7160e01b600052603260045260246000fd5b60200260200101518c858151811061031957634e487b7160e01b600052603260045260246000fd5b60200260200101518c868151811061034157634e487b7160e01b600052603260045260246000fd5b60200260200101518c878151811061036957634e487b7160e01b600052603260045260246000fd5b60200260200101518c888151811061039157634e487b7160e01b600052603260045260246000fd5b60200260200101518c89815181106103b957634e487b7160e01b600052603260045260246000fd5b60200260200101518c8a815181106103e157634e487b7160e01b600052603260045260246000fd5b60200260200101518c8b8151811061040957634e487b7160e01b600052603260045260246000fd5b60200260200101516040518963ffffffff1660e01b81526004016104349897969594939291906109e8565b602060405180830381600087803b15801561044e57600080fd5b505af1158015610462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104869190610998565b6040516323b872dd60e01b81529091506001600160a01b038d16906323b872dd906104b9903090339086906004016109c4565b600060405180830381600087803b1580156104d357600080fd5b505af11580156104e7573d6000803e3d6000fd5b505050505080806104f790610b6b565b9150506102b8565b5050505050505050505050565b61051461057d565b6001600160a01b03166105256101fd565b6001600160a01b03161461054b5760405162461bcd60e51b815260040161013790610ae8565b6001600160a01b0381166105715760405162461bcd60e51b815260040161013790610a6b565b61057a81610581565b50565b3390565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146105f557600080fd5b919050565b600082601f83011261060a578081fd5b8135602061061f61061a83610b47565b610b1d565b828152818101908583018385028701840188101561063b578586fd5b855b858110156106605761064e826105de565b8452928401929084019060010161063d565b5090979650505050505050565b600082601f83011261067d578081fd5b8135602061068d61061a83610b47565b82815281810190858301838502870184018810156106a9578586fd5b855b8581101561066057813561ffff811681146106c4578788fd5b845292840192908401906001016106ab565b600082601f8301126106e6578081fd5b813560206106f661061a83610b47565b8281528181019085830183850287018401881015610712578586fd5b855b8581101561066057813567ffffffffffffffff81168114610733578788fd5b84529284019290840190600101610714565b600060208284031215610756578081fd5b61075f826105de565b9392505050565b60008060408385031215610778578081fd5b610781836105de565b915061078f602084016105de565b90509250929050565b600080600080608085870312156107ad578182fd5b6107b6856105de565b935060206107c58187016105de565b935060408601359250606086013567ffffffffffffffff808211156107e8578384fd5b818801915088601f8301126107fb578384fd5b81358181111561080d5761080d610b92565b61081f601f8201601f19168501610b1d565b91508082528984828501011115610834578485fd5b8084840185840137810190920192909252939692955090935050565b60008060008060008060008060006101208a8c03121561086e578485fd5b6108778a6105de565b985060208a013567ffffffffffffffff80821115610893578687fd5b61089f8d838e016105fa565b995060408c01359150808211156108b4578687fd5b6108c08d838e0161066d565b985060608c01359150808211156108d5578687fd5b6108e18d838e016106d6565b975060808c01359150808211156108f6578687fd5b6109028d838e016106d6565b965060a08c0135915080821115610917578586fd5b6109238d838e016106d6565b955060c08c0135915080821115610938578485fd5b6109448d838e016106d6565b945060e08c0135915080821115610959578384fd5b6109658d838e016106d6565b93506101008c013591508082111561097b578283fd5b506109888c828d016106d6565b9150509295985092959850929598565b6000602082840312156109a9578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0398909816885261ffff96909616602088015267ffffffffffffffff948516604088015292841660608701529083166080860152821660a0850152811660c08401521660e08201526101000190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526017908201527f4e6f7420657175616c20706172616d73206c656e677468000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60405181810167ffffffffffffffff81118282101715610b3f57610b3f610b92565b604052919050565b600067ffffffffffffffff821115610b6157610b61610b92565b5060209081020190565b6000600019821415610b8b57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212201c31a5bd5f055280bd4f70728b47c1f1265dc0c95198b16580ab6b693d85041464736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100bd578063a75d4837146100d2578063f2fde38b146100e557610072565b806312431f1514610077578063150b7a021461008c578063715018a6146100b5575b600080fd5b61008a610085366004610766565b6100f8565b005b61009f61009a366004610798565b6101a2565b6040516100ac9190610a3e565b60405180910390f35b61008a6101b2565b6100c56101fd565b6040516100ac91906109b0565b61008a6100e0366004610850565b61020c565b61008a6100f3366004610745565b61050c565b61010061057d565b6001600160a01b03166101116101fd565b6001600160a01b0316146101405760405162461bcd60e51b815260040161013790610ae8565b60405180910390fd5b60405163f2fde38b60e01b81526001600160a01b0383169063f2fde38b9061016c9084906004016109b0565b600060405180830381600087803b15801561018657600080fd5b505af115801561019a573d6000803e3d6000fd5b505050505050565b630a85bd0160e11b949350505050565b6101ba61057d565b6001600160a01b03166101cb6101fd565b6001600160a01b0316146101f15760405162461bcd60e51b815260040161013790610ae8565b6101fb6000610581565b565b6000546001600160a01b031690565b61021461057d565b6001600160a01b03166102256101fd565b6001600160a01b03161461024b5760405162461bcd60e51b815260040161013790610ae8565b875187518114801561025d5750865181145b80156102695750855181145b80156102755750845181145b80156102815750835181145b801561028d5750825181145b80156102995750815181145b6102b55760405162461bcd60e51b815260040161013790610ab1565b60005b818110156104ff5760008b6001600160a01b031663824ef1468c84815181106102f157634e487b7160e01b600052603260045260246000fd5b60200260200101518c858151811061031957634e487b7160e01b600052603260045260246000fd5b60200260200101518c868151811061034157634e487b7160e01b600052603260045260246000fd5b60200260200101518c878151811061036957634e487b7160e01b600052603260045260246000fd5b60200260200101518c888151811061039157634e487b7160e01b600052603260045260246000fd5b60200260200101518c89815181106103b957634e487b7160e01b600052603260045260246000fd5b60200260200101518c8a815181106103e157634e487b7160e01b600052603260045260246000fd5b60200260200101518c8b8151811061040957634e487b7160e01b600052603260045260246000fd5b60200260200101516040518963ffffffff1660e01b81526004016104349897969594939291906109e8565b602060405180830381600087803b15801561044e57600080fd5b505af1158015610462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104869190610998565b6040516323b872dd60e01b81529091506001600160a01b038d16906323b872dd906104b9903090339086906004016109c4565b600060405180830381600087803b1580156104d357600080fd5b505af11580156104e7573d6000803e3d6000fd5b505050505080806104f790610b6b565b9150506102b8565b5050505050505050505050565b61051461057d565b6001600160a01b03166105256101fd565b6001600160a01b03161461054b5760405162461bcd60e51b815260040161013790610ae8565b6001600160a01b0381166105715760405162461bcd60e51b815260040161013790610a6b565b61057a81610581565b50565b3390565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146105f557600080fd5b919050565b600082601f83011261060a578081fd5b8135602061061f61061a83610b47565b610b1d565b828152818101908583018385028701840188101561063b578586fd5b855b858110156106605761064e826105de565b8452928401929084019060010161063d565b5090979650505050505050565b600082601f83011261067d578081fd5b8135602061068d61061a83610b47565b82815281810190858301838502870184018810156106a9578586fd5b855b8581101561066057813561ffff811681146106c4578788fd5b845292840192908401906001016106ab565b600082601f8301126106e6578081fd5b813560206106f661061a83610b47565b8281528181019085830183850287018401881015610712578586fd5b855b8581101561066057813567ffffffffffffffff81168114610733578788fd5b84529284019290840190600101610714565b600060208284031215610756578081fd5b61075f826105de565b9392505050565b60008060408385031215610778578081fd5b610781836105de565b915061078f602084016105de565b90509250929050565b600080600080608085870312156107ad578182fd5b6107b6856105de565b935060206107c58187016105de565b935060408601359250606086013567ffffffffffffffff808211156107e8578384fd5b818801915088601f8301126107fb578384fd5b81358181111561080d5761080d610b92565b61081f601f8201601f19168501610b1d565b91508082528984828501011115610834578485fd5b8084840185840137810190920192909252939692955090935050565b60008060008060008060008060006101208a8c03121561086e578485fd5b6108778a6105de565b985060208a013567ffffffffffffffff80821115610893578687fd5b61089f8d838e016105fa565b995060408c01359150808211156108b4578687fd5b6108c08d838e0161066d565b985060608c01359150808211156108d5578687fd5b6108e18d838e016106d6565b975060808c01359150808211156108f6578687fd5b6109028d838e016106d6565b965060a08c0135915080821115610917578586fd5b6109238d838e016106d6565b955060c08c0135915080821115610938578485fd5b6109448d838e016106d6565b945060e08c0135915080821115610959578384fd5b6109658d838e016106d6565b93506101008c013591508082111561097b578283fd5b506109888c828d016106d6565b9150509295985092959850929598565b6000602082840312156109a9578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0398909816885261ffff96909616602088015267ffffffffffffffff948516604088015292841660608701529083166080860152821660a0850152811660c08401521660e08201526101000190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526017908201527f4e6f7420657175616c20706172616d73206c656e677468000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60405181810167ffffffffffffffff81118282101715610b3f57610b3f610b92565b604052919050565b600067ffffffffffffffff821115610b6157610b61610b92565b5060209081020190565b6000600019821415610b8b57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212201c31a5bd5f055280bd4f70728b47c1f1265dc0c95198b16580ab6b693d85041464736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bulkMint(address,address[],uint16[],uint64[],uint64[],uint64[],uint64[],uint64[],uint64[])": {
        "notice": "Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef)."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/mocks/DragonEquipmentBulkMint.sol:DragonEquipmentBulkMint",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}